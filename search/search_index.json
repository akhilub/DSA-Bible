{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Greetings","text":"Akhil Singh Chauhan                          Creator                      <p>Welcome to the grand collection of DSA &amp; Large Optimizations problems with their solutions!</p> <p>This site contains detailed explanations of several data structures and implementations of various algorithms through LeetCode problems.</p>"},{"location":"#terminology-strategies","title":"Terminology &amp; Strategies","text":"<p>Comprehend DSA &amp; Optimizations golden-techniques, terminologies and strategies from here Glossary.</p>"},{"location":"#explore-1-free-problem-in-every-category","title":"Explore 1 Free Problem in Every Category!","text":"<p>See the quality, depth, and explanations before unlocking \ud83d\udd13 premium.</p> <p>1. Two Sum 15. 3Sum 424. Longest Repeating Character Replacement 739. Daily Temperatures 100. Same Tree 238. Product of Array Except Self 33. Search in Rotated Sorted Array 875. Koko Eating Bananas 146. LRU Cache 297. Serialize and Deserialize Binary Tree 355. Design Twitter 39. Combination Sum 207. Course Schedule 200. Number of Islands 1143. Longest Common Subsequence 509. Fibonacci Number</p>"},{"location":"#problem-categories","title":"Problem Categories","text":"<p>Air Transport</p> <p>Array</p> <p>Backtracking</p> <p>Binary Search</p> <p>Binary Search Tree</p> <p>Binary Tree</p> <p>Bit Manipulation</p> <p>Breadth-First Search</p> <p>Bucket Sort</p> <p>Combinatorics</p> <p>Counting</p> <p>Counting Sort</p> <p>Data Stream</p> <p>Depth-First Search</p> <p>Design</p> <p>Divide and Conquer</p> <p>Doubly-Linked List</p> <p>Dynamic Programming</p> <p>Graph</p> <p>Greedy</p> <p>Ground Transport</p> <p>Hash Function</p> <p>Hash Table</p> <p>Heap (Priority Queue)</p> <p>Interactive</p> <p>LP</p> <p>Linked List</p> <p>MIP</p> <p>Math</p> <p>Matrix</p> <p>Memoization</p> <p>Merge Sort</p> <p>Monotonic Stack</p> <p>Optimization</p> <p>Prefix Sum</p> <p>Queue</p> <p>Quickselect</p> <p>Radix Sort</p> <p>Recursion</p> <p>Simulation</p> <p>Sliding Window</p> <p>Sorting</p> <p>Stack</p> <p>String</p> <p>Topological Sort</p> <p>Tree</p> <p>Trie</p> <p>Two Pointers</p> <p>Union Find</p> <p>For a complete list of problem categories, see the Topics page.</p>"},{"location":"#companies-asked-problems","title":"Companies Asked Problems","text":"<p>Meta</p> <p>Amazon</p> <p>Apple</p> <p>Netflix</p> <p>Google</p> <p>Microsoft</p> <p>Uber</p> <p>Lyft</p> <p>Airbnb</p> <p>Tesla</p> <p>Adobe</p> <p>Asana</p> <p>Bloomberg</p> <p>Flipkart</p> <p>Goldman Sachs</p> <p>Impetus</p> <p>LinkedIn</p> <p>Lyft</p> <p>OpenAI</p> <p>Oracle</p> <p>PayPal</p> <p>Pinterest</p> <p>Tiktok</p> <p>Wise</p> <p>X (formerly Twitter)</p> <p>Yahoo</p> <p>Yandex</p> <p>For a complete list of company asked problems, see the Companies page.</p>"},{"location":"#popular-lists","title":"Popular Lists","text":"<p>Blind 75</p> <p>Grind 75</p> <p>Interview Master 100</p> <p>Neetcode 150</p> <p>Grind 169</p> <p>Neetcode 250</p> <p>For beginner friendly popular lists, see the Popular Lists page</p>"},{"location":"#site-architecture","title":"Site Architecture","text":"<p>dsabible.com</p> <pre><code>---\nconfig:\n  layout: fixed\n---\nflowchart LR\n subgraph Source_Repository[\"Source_Repository\"]\n        RepoRoot[\"Repo root\"]\n        mkdocsYml[\"mkdocs.yml\"]\n        reqTxt[\"requirements.txt\"]\n        scriptsDir[\"scripts/\"]\n        genNav[\"gen_nav.py\"]\n        docsContent[\"docs/\"]\n        overridesDir[\"overrides/\"]\n        includesDir[\"docs/_includes/\"]\n        authActionsDir[\"auth0-actions/\"]\n        ghFolder[\".github/\"]\n  end\n subgraph CI_CD_Pipeline[\"CI_CD_Pipeline\"]\n        CI[\"GitHub Actions\"]\n        ciYaml[\"ci.yaml\"]\n  end\n subgraph Static_Hosting[\"Static_Hosting\"]\n        Host[\"GitHub Pages\"]\n        CNAME[\"docs/CNAME\"]\n  end\n subgraph Browser_End_User[\"Browser_End_User\"]\n        Browser[\"Browser\"]\n        authJs[\"auth.js\"]\n  end\n  subgraph Backend[\"Service Workers\"]\n      Auth0[\"Auth0\"]\n      Stripe[\"Stripe\"]\n  end\n    RepoRoot -- Git Push --&gt; CI\n    mkdocsYml --&gt; CI\n    reqTxt --&gt; CI\n    scriptsDir --&gt; CI\n    genNav --&gt; CI\n    docsContent --&gt; CI\n    overridesDir --&gt; CI\n    includesDir --&gt; CI\n    authActionsDir --&gt; CI\n    ghFolder --&gt; CI\n    ciYaml --&gt; CI\n    CI -- Deploy site/ --&gt; Host\n    CNAME --&gt; Host\n    Browser -- HTTPS GET --&gt; Host\n    Host -- HTML/CSS/JS --&gt; Browser\n    Browser -- Auth Request --&gt; Auth0[\"Auth0\"]\n    Auth0 -- Payment Actions--&gt; Stripe[\"Stripe\"]\n    Stripe -- Validation--&gt; Auth0\n    Auth0 -- JWT / Session --&gt; Browser\n     RepoRoot:::artifact\n     mkdocsYml:::artifact\n     reqTxt:::artifact\n     scriptsDir:::artifact\n     genNav:::artifact\n     docsContent:::artifact\n     overridesDir:::artifact\n     includesDir:::artifact\n     authActionsDir:::artifact\n     ghFolder:::artifact\n     CI:::build\n     ciYaml:::artifact\n     Host:::runtime\n     CNAME:::artifact\n     Browser:::runtime\n     authJs:::artifact\n     Auth0:::external\n     postLoginStripe:::artifact\n     Stripe:::external\n    classDef build fill:#ADD8E6,stroke:#333,stroke-width:1px\n    classDef runtime fill:#90EE90,stroke:#333,stroke-width:1px\n    classDef external fill:#FFA500,stroke:#333,stroke-width:1px\n    classDef artifact fill:#D3D3D3,stroke:#333,stroke-width:1px\n    click RepoRoot \"https://github.com/akhilub/dsa-bible-source/tree/main/\"\n    click mkdocsYml \"https://github.com/akhilub/dsa-bible-source/blob/main/mkdocs.yml\"\n    click reqTxt \"https://github.com/akhilub/dsa-bible-source/blob/main/requirements.txt\"\n    click scriptsDir \"https://github.com/akhilub/dsa-bible-source/tree/main/scripts/\"\n    click genNav \"https://github.com/akhilub/dsa-bible-source/blob/main/scripts/gen_nav.py\"\n    click docsContent \"https://github.com/akhilub/dsa-bible-source/tree/main/docs/\"\n    click overridesDir \"https://github.com/akhilub/dsa-bible-source/tree/main/overrides/\"\n    click includesDir \"https://github.com/akhilub/dsa-bible-source/tree/main/docs/_includes/\"\n    click authActionsDir \"https://github.com/akhilub/dsa-bible-source/tree/main/auth0-actions/\"\n    click ciYaml \"https://github.com/akhilub/dsa-bible-source/blob/main/.github/workflows/ci.yaml\"\n    click CNAME \"https://github.com/akhilub/dsa-bible-source/tree/main/docs/CNAME\"\n    click authJs \"https://github.com/akhilub/dsa-bible-source/blob/main/docs/javascripts/auth.js\"\n    click postLoginStripe \"https://github.com/akhilub/dsa-bible-source/blob/main/auth0-actions/post-login-stripe.js\"</code></pre>"},{"location":"lists/","title":"Popular Lists Problems","text":"<p>Below are the DSA problems of popular lists, intended for people completely new to data structures, algorithms and optimizations.</p> Akhil Singh Chauhan                          Creator"},{"location":"lists/#tag:blind-75","title":"Blind 75","text":"<ul> <li>            100. Same Tree          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            11. Container With Most Water          </li> <li>            1143. Longest Common Subsequence          </li> <li>            128. Longest Consecutive Sequence          </li> <li>            133. Clone Graph          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            152. Maximum Product Subarray          </li> <li>            153. Find Minimum in Rotated Sorted Array          </li> <li>            191. Number of 1 Bits          </li> <li>            198. House Robber          </li> <li>            200. Number of Islands          </li> <li>            206. Reverse Linked List          </li> <li>            207. Course Schedule          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            23. Merge k Sorted Lists          </li> <li>            238. Product of Array Except Self          </li> <li>            268. Missing Number          </li> <li>            295. Find Median from Data Stream          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            39. Combination Sum          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            46. Permutations          </li> <li>            48. Rotate Image          </li> <li>            49. Group Anagrams          </li> <li>            509. Fibonacci Number          </li> <li>            53. Maximum Subarray          </li> <li>            54. Spiral Matrix          </li> <li>            55. Jump Game          </li> <li>            56. Merge Intervals          </li> <li>            62. Unique Paths          </li> <li>            647. Palindromic Substrings          </li> <li>            70. Climbing Stairs          </li> <li>            73. Set Matrix Zeroes          </li> <li>            76. Minimum Window Substring          </li> <li>            79. Word Search          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"lists/#tag:grind-169","title":"Grind 169","text":"<ul> <li>            1. Two Sum          </li> <li>            100. Same Tree          </li> <li>            101. Symmetric Tree          </li> <li>            102. Binary Tree Level Order Traversal          </li> <li>            103. Binary Tree Zigzag Level Order Traversal          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            108. Convert Sorted Array to Binary Search Tree          </li> <li>            11. Container With Most Water          </li> <li>            128. Longest Consecutive Sequence          </li> <li>            133. Clone Graph          </li> <li>            136. Single Number          </li> <li>            141. Linked List Cycle          </li> <li>            146. LRU Cache          </li> <li>            148. Sort List          </li> <li>            15. 3Sum          </li> <li>            152. Maximum Product Subarray          </li> <li>            153. Find Minimum in Rotated Sorted Array          </li> <li>            155. Min Stack          </li> <li>            16. 3Sum Closest          </li> <li>            169. Majority Element          </li> <li>            17. Letter Combinations of a Phone Number          </li> <li>            189. Rotate Array          </li> <li>            191. Number of 1 Bits          </li> <li>            198. House Robber          </li> <li>            199. Binary Tree Right Side View          </li> <li>            2. Add Two Numbers          </li> <li>            200. Number of Islands          </li> <li>            206. Reverse Linked List          </li> <li>            207. Course Schedule          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            210. Course Schedule II          </li> <li>            23. Merge k Sorted Lists          </li> <li>            232. Implement Queue using Stacks          </li> <li>            238. Product of Array Except Self          </li> <li>            25. Reverse Nodes in k-Group          </li> <li>            268. Missing Number          </li> <li>            295. Find Median from Data Stream          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            36. Valid Sudoku          </li> <li>            39. Combination Sum          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            438. Find All Anagrams in a String          </li> <li>            46. Permutations          </li> <li>            48. Rotate Image          </li> <li>            49. Group Anagrams          </li> <li>            50. Pow(x, n)          </li> <li>            509. Fibonacci Number          </li> <li>            53. Maximum Subarray          </li> <li>            54. Spiral Matrix          </li> <li>            543. Diameter of Binary Tree          </li> <li>            55. Jump Game          </li> <li>            56. Merge Intervals          </li> <li>            62. Unique Paths          </li> <li>            658. Find K Closest Elements          </li> <li>            67. Add Binary          </li> <li>            70. Climbing Stairs          </li> <li>            704. Binary Search          </li> <li>            73. Set Matrix Zeroes          </li> <li>            739. Daily Temperatures          </li> <li>            76. Minimum Window Substring          </li> <li>            78. Subsets          </li> <li>            79. Word Search          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            9. Palindrome Number          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"lists/#tag:grind-75","title":"Grind 75","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            11. Container With Most Water          </li> <li>            133. Clone Graph          </li> <li>            141. Linked List Cycle          </li> <li>            146. LRU Cache          </li> <li>            15. 3Sum          </li> <li>            152. Maximum Product Subarray          </li> <li>            155. Min Stack          </li> <li>            169. Majority Element          </li> <li>            17. Letter Combinations of a Phone Number          </li> <li>            199. Binary Tree Right Side View          </li> <li>            200. Number of Islands          </li> <li>            206. Reverse Linked List          </li> <li>            207. Course Schedule          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            23. Merge k Sorted Lists          </li> <li>            232. Implement Queue using Stacks          </li> <li>            238. Product of Array Except Self          </li> <li>            295. Find Median from Data Stream          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            39. Combination Sum          </li> <li>            438. Find All Anagrams in a String          </li> <li>            46. Permutations          </li> <li>            509. Fibonacci Number          </li> <li>            53. Maximum Subarray          </li> <li>            54. Spiral Matrix          </li> <li>            543. Diameter of Binary Tree          </li> <li>            56. Merge Intervals          </li> <li>            62. Unique Paths          </li> <li>            67. Add Binary          </li> <li>            70. Climbing Stairs          </li> <li>            704. Binary Search          </li> <li>            76. Minimum Window Substring          </li> <li>            78. Subsets          </li> <li>            79. Word Search          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"lists/#tag:interview-master-100","title":"Interview Master 100","text":"<ul> <li>            1. Two Sum          </li> <li>            101. Symmetric Tree          </li> <li>            102. Binary Tree Level Order Traversal          </li> <li>            103. Binary Tree Zigzag Level Order Traversal          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            106. Construct Binary Tree from Inorder and Postorder Traversal          </li> <li>            108. Convert Sorted Array to Binary Search Tree          </li> <li>            11. Container With Most Water          </li> <li>            112. Path Sum          </li> <li>            114. Flatten Binary Tree to Linked List          </li> <li>            118. Pascal's Triangle          </li> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            122. Best Time to Buy and Sell Stock II          </li> <li>            125. Valid Palindrome          </li> <li>            128. Longest Consecutive Sequence          </li> <li>            130. Surrounded Regions          </li> <li>            133. Clone Graph          </li> <li>            136. Single Number          </li> <li>            138. Copy List with Random Pointer          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            152. Maximum Product Subarray          </li> <li>            153. Find Minimum in Rotated Sorted Array          </li> <li>            155. Min Stack          </li> <li>            162. Find Peak Element          </li> <li>            169. Majority Element          </li> <li>            17. Letter Combinations of a Phone Number          </li> <li>            189. Rotate Array          </li> <li>            19. Remove Nth Node From End of List          </li> <li>            191. Number of 1 Bits          </li> <li>            198. House Robber          </li> <li>            199. Binary Tree Right Side View          </li> <li>            2. Add Two Numbers          </li> <li>            20. Valid Parentheses          </li> <li>            201. Bitwise AND of Numbers Range          </li> <li>            202. Happy Number          </li> <li>            206. Reverse Linked List          </li> <li>            207. Course Schedule          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            210. Course Schedule II          </li> <li>            23. Merge k Sorted Lists          </li> <li>            238. Product of Array Except Self          </li> <li>            242. Valid Anagram          </li> <li>            25. Reverse Nodes in k-Group          </li> <li>            26. Remove Duplicates from Sorted Array          </li> <li>            268. Missing Number          </li> <li>            27. Remove Element          </li> <li>            295. Find Median from Data Stream          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            36. Valid Sudoku          </li> <li>            39. Combination Sum          </li> <li>            42. Trapping Rain Water          </li> <li>            45. Jump Game II          </li> <li>            46. Permutations          </li> <li>            48. Rotate Image          </li> <li>            49. Group Anagrams          </li> <li>            496. Next Greater Element I          </li> <li>            5. Longest Palindromic Substring          </li> <li>            50. Pow(x, n)          </li> <li>            509. Fibonacci Number          </li> <li>            53. Maximum Subarray          </li> <li>            530. Minimum Absolute Difference in BST          </li> <li>            54. Spiral Matrix          </li> <li>            543. Diameter of Binary Tree          </li> <li>            55. Jump Game          </li> <li>            56. Merge Intervals          </li> <li>            62. Unique Paths          </li> <li>            64. Minimum Path Sum          </li> <li>            66. Plus One          </li> <li>            69. Sqrt(x)          </li> <li>            7. Reverse Integer          </li> <li>            70. Climbing Stairs          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            704. Binary Search          </li> <li>            73. Set Matrix Zeroes          </li> <li>            74. Search a 2D Matrix          </li> <li>            746. Min Cost Climbing Stairs          </li> <li>            76. Minimum Window Substring          </li> <li>            78. Subsets          </li> <li>            783. Minimum Distance Between BST Nodes          </li> <li>            787. Cheapest Flights Within K Stops          </li> <li>            79. Word Search          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            88. Merge Sorted Array          </li> <li>            9. Palindrome Number          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"lists/#tag:neetcode-150","title":"Neetcode 150","text":"<ul> <li>            100. Same Tree          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            1046. Last Stone Weight          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            11. Container With Most Water          </li> <li>            1143. Longest Common Subsequence          </li> <li>            128. Longest Consecutive Sequence          </li> <li>            130. Surrounded Regions          </li> <li>            133. Clone Graph          </li> <li>            136. Single Number          </li> <li>            138. Copy List with Random Pointer          </li> <li>            141. Linked List Cycle          </li> <li>            146. LRU Cache          </li> <li>            15. 3Sum          </li> <li>            152. Maximum Product Subarray          </li> <li>            153. Find Minimum in Rotated Sorted Array          </li> <li>            155. Min Stack          </li> <li>            17. Letter Combinations of a Phone Number          </li> <li>            191. Number of 1 Bits          </li> <li>            198. House Robber          </li> <li>            199. Binary Tree Right Side View          </li> <li>            200. Number of Islands          </li> <li>            202. Happy Number          </li> <li>            206. Reverse Linked List          </li> <li>            207. Course Schedule          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            210. Course Schedule II          </li> <li>            23. Merge k Sorted Lists          </li> <li>            238. Product of Array Except Self          </li> <li>            25. Reverse Nodes in k-Group          </li> <li>            268. Missing Number          </li> <li>            295. Find Median from Data Stream          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            36. Valid Sudoku          </li> <li>            39. Combination Sum          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            45. Jump Game II          </li> <li>            46. Permutations          </li> <li>            48. Rotate Image          </li> <li>            49. Group Anagrams          </li> <li>            509. Fibonacci Number          </li> <li>            53. Maximum Subarray          </li> <li>            54. Spiral Matrix          </li> <li>            543. Diameter of Binary Tree          </li> <li>            55. Jump Game          </li> <li>            56. Merge Intervals          </li> <li>            567. Permutation in String          </li> <li>            62. Unique Paths          </li> <li>            647. Palindromic Substrings          </li> <li>            66. Plus One          </li> <li>            70. Climbing Stairs          </li> <li>            704. Binary Search          </li> <li>            73. Set Matrix Zeroes          </li> <li>            739. Daily Temperatures          </li> <li>            76. Minimum Window Substring          </li> <li>            78. Subsets          </li> <li>            79. Word Search          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            853. Car Fleet          </li> <li>            875. Koko Eating Bananas          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"lists/#tag:neetcode-250","title":"Neetcode 250","text":"<ul> <li>            100. Same Tree          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            1046. Last Stone Weight          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            11. Container With Most Water          </li> <li>            1137. N-th Tribonacci Number          </li> <li>            1143. Longest Common Subsequence          </li> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            122. Best Time to Buy and Sell Stock II          </li> <li>            125. Valid Palindrome          </li> <li>            128. Longest Consecutive Sequence          </li> <li>            130. Surrounded Regions          </li> <li>            1325. Delete Leaves With a Given Value          </li> <li>            133. Clone Graph          </li> <li>            135. Candy          </li> <li>            136. Single Number          </li> <li>            138. Copy List with Random Pointer          </li> <li>            141. Linked List Cycle          </li> <li>            146. LRU Cache          </li> <li>            15. 3Sum          </li> <li>            152. Maximum Product Subarray          </li> <li>            153. Find Minimum in Rotated Sorted Array          </li> <li>            155. Min Stack          </li> <li>            169. Majority Element          </li> <li>            17. Letter Combinations of a Phone Number          </li> <li>            18. 4Sum          </li> <li>            189. Rotate Array          </li> <li>            191. Number of 1 Bits          </li> <li>            198. House Robber          </li> <li>            199. Binary Tree Right Side View          </li> <li>            200. Number of Islands          </li> <li>            201. Bitwise AND of Numbers Range          </li> <li>            202. Happy Number          </li> <li>            206. Reverse Linked List          </li> <li>            207. Course Schedule          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            209. Minimum Size Subarray Sum          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            210. Course Schedule II          </li> <li>            225. Implement Stack using Queues          </li> <li>            23. Merge k Sorted Lists          </li> <li>            232. Implement Queue using Stacks          </li> <li>            238. Product of Array Except Self          </li> <li>            25. Reverse Nodes in k-Group          </li> <li>            26. Remove Duplicates from Sorted Array          </li> <li>            268. Missing Number          </li> <li>            27. Remove Element          </li> <li>            295. Find Median from Data Stream          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            355. Design Twitter          </li> <li>            36. Valid Sudoku          </li> <li>            39. Combination Sum          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            45. Jump Game II          </li> <li>            450. Delete Node in a BST          </li> <li>            46. Permutations          </li> <li>            48. Rotate Image          </li> <li>            49. Group Anagrams          </li> <li>            509. Fibonacci Number          </li> <li>            53. Maximum Subarray          </li> <li>            54. Spiral Matrix          </li> <li>            543. Diameter of Binary Tree          </li> <li>            55. Jump Game          </li> <li>            56. Merge Intervals          </li> <li>            567. Permutation in String          </li> <li>            62. Unique Paths          </li> <li>            64. Minimum Path Sum          </li> <li>            647. Palindromic Substrings          </li> <li>            658. Find K Closest Elements          </li> <li>            66. Plus One          </li> <li>            67. Add Binary          </li> <li>            69. Sqrt(x)          </li> <li>            7. Reverse Integer          </li> <li>            70. Climbing Stairs          </li> <li>            701. Insert into a Binary Search Tree          </li> <li>            704. Binary Search          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> <li>            73. Set Matrix Zeroes          </li> <li>            739. Daily Temperatures          </li> <li>            76. Minimum Window Substring          </li> <li>            78. Subsets          </li> <li>            79. Word Search          </li> <li>            81. Search in Rotated Sorted Array II          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            853. Car Fleet          </li> <li>            875. Koko Eating Bananas          </li> <li>            88. Merge Sorted Array          </li> <li>            912. Sort an Array          </li> <li>            918. Maximum Sum Circular Subarray          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"pricing/","title":"Pricing","text":"Choose a Plan Monthly Yearly One-time Pro Plan <p>Gain access to all content!</p> <p>$9 per month</p> $6 per month        Subscribe      <ul> <li>\ud83d\udd13 Unlock over 400 solutions across \ud83d\udcda 28 problem categories</li> <li>\ud83c\udfaf Interview-focused explanations</li> <li>\ud83d\udcac Priority support</li> <li>\ud83d\udcf1 Mobile-friendly access</li> </ul> Pro Plan <p>Gain access to all content!</p> $51 per year        Subscribe      <ul> <li>\ud83d\udd13 Unlock over 400 solutions across \ud83d\udcda 28 problem categories</li> <li>\ud83c\udfaf Interview-focused explanations</li> <li>\ud83d\udcac Priority support</li> <li>\ud83d\udcf1 Mobile-friendly access</li> </ul> Pro Plan <p>Gain access to all content!</p> $251 lifetime        Buy Now      <ul> <li>\ud83d\udd13 Unlock over 400 solutions across \ud83d\udcda 28 problem categories</li> <li>\ud83c\udfaf Interview-focused explanations</li> <li>\ud83d\udcac Priority support</li> <li>\ud83d\udcf1 Mobile-friendly access</li> </ul>"},{"location":"topics/","title":"TOPICS","text":"<p>Below is the classification of problems based on topics, useful while cementing any particular data structure, algorithm or topic.</p> Akhil Singh Chauhan                          Creator"},{"location":"topics/#tag:air-transport","title":"Air Transport","text":"<ul> <li>            3. Composing flight crews          </li> </ul>"},{"location":"topics/#tag:array","title":"Array","text":"<ul> <li>            1. Two Sum          </li> <li>            1004. Max Consecutive Ones III          </li> <li>            1011. Capacity To Ship Packages Within D Days          </li> <li>            1024. Video Stitching          </li> <li>            1046. Last Stone Weight          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            106. Construct Binary Tree from Inorder and Postorder Traversal          </li> <li>            108. Convert Sorted Array to Binary Search Tree          </li> <li>            1095. Find in Mountain Array          </li> <li>            11. Container With Most Water          </li> <li>            118. Pascal's Triangle          </li> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            122. Best Time to Buy and Sell Stock II          </li> <li>            123. Best Time to Buy and Sell Stock III          </li> <li>            128. Longest Consecutive Sequence          </li> <li>            130. Surrounded Regions          </li> <li>            1326. Minimum Number of Taps to Open to Water a Garden          </li> <li>            135. Candy          </li> <li>            136. Single Number          </li> <li>            139. Word Break          </li> <li>            1493. Longest Subarray of 1's After Deleting One Element          </li> <li>            15. 3Sum          </li> <li>            152. Maximum Product Subarray          </li> <li>            153. Find Minimum in Rotated Sorted Array          </li> <li>            16. 3Sum Closest          </li> <li>            162. Find Peak Element          </li> <li>            1636. Sort Array by Increasing Frequency          </li> <li>            167. Two Sum II - Input Array Is Sorted          </li> <li>            169. Majority Element          </li> <li>            1695. Maximum Erasure Value          </li> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            18. 4Sum          </li> <li>            189. Rotate Array          </li> <li>            198. House Robber          </li> <li>            1985. Find the Kth Largest Integer in the Array          </li> <li>            199. Binary Tree Right Side View          </li> <li>            200. Number of Islands          </li> <li>            209. Minimum Size Subarray Sum          </li> <li>            212. Word Search II          </li> <li>            215. Kth Largest Element in an Array          </li> <li>            217. Contains Duplicate          </li> <li>            221. Maximal Square          </li> <li>            2226. Maximum Candies Allocated to K Children          </li> <li>            2294. Partition Array Such That Maximum Difference Is K          </li> <li>            238. Product of Array Except Self          </li> <li>            239. Sliding Window Maximum          </li> <li>            240. Search a 2D Matrix II          </li> <li>            2461. Maximum Sum of Distinct Subarrays With Length K          </li> <li>            259. 3Sum Smaller \ud83d\udd12          </li> <li>            26. Remove Duplicates from Sorted Array          </li> <li>            268. Missing Number          </li> <li>            27. Remove Element          </li> <li>            289. Game of Life          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            34. Find First and Last Position of Element in Sorted Array          </li> <li>            347. Top K Frequent Elements          </li> <li>            3477. Fruits Into Baskets II          </li> <li>            36. Valid Sudoku          </li> <li>            39. Combination Sum          </li> <li>            399. Evaluate Division          </li> <li>            4. Median of Two Sorted Arrays          </li> <li>            407. Trapping Rain Water II          </li> <li>            410. Split Array Largest Sum          </li> <li>            42. Trapping Rain Water          </li> <li>            442. Find All Duplicates in an Array          </li> <li>            45. Jump Game II          </li> <li>            46. Permutations          </li> <li>            48. Rotate Image          </li> <li>            49. Group Anagrams          </li> <li>            496. Next Greater Element I          </li> <li>            509. Fibonacci Number          </li> <li>            53. Maximum Subarray          </li> <li>            54. Spiral Matrix          </li> <li>            55. Jump Game          </li> <li>            56. Merge Intervals          </li> <li>            64. Minimum Path Sum          </li> <li>            658. Find K Closest Elements          </li> <li>            66. Plus One          </li> <li>            69. Sqrt(x)          </li> <li>            704. Binary Search          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> <li>            73. Set Matrix Zeroes          </li> <li>            739. Daily Temperatures          </li> <li>            74. Search a 2D Matrix          </li> <li>            746. Min Cost Climbing Stairs          </li> <li>            78. Subsets          </li> <li>            79. Word Search          </li> <li>            81. Search in Rotated Sorted Array II          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            853. Car Fleet          </li> <li>            875. Koko Eating Bananas          </li> <li>            88. Merge Sorted Array          </li> <li>            912. Sort an Array          </li> <li>            918. Maximum Sum Circular Subarray          </li> <li>            973. K Closest Points to Origin          </li> <li>            978. Longest Turbulent Subarray          </li> <li>            994. Rotting Oranges          </li> <li>            Maximum and Minimum Sum Subarray          </li> <li>            Maximum and Minimum Sum Subarray of Size k          </li> </ul>"},{"location":"topics/#tag:backtracking","title":"Backtracking","text":"<ul> <li>            17. Letter Combinations of a Phone Number          </li> <li>            212. Word Search II          </li> <li>            22. Generate Parentheses          </li> <li>            39. Combination Sum          </li> <li>            46. Permutations          </li> <li>            52. N-Queens II          </li> <li>            78. Subsets          </li> <li>            79. Word Search          </li> </ul>"},{"location":"topics/#tag:binary-search","title":"Binary Search","text":"<ul> <li>            1004. Max Consecutive Ones III          </li> <li>            1011. Capacity To Ship Packages Within D Days          </li> <li>            1095. Find in Mountain Array          </li> <li>            153. Find Minimum in Rotated Sorted Array          </li> <li>            162. Find Peak Element          </li> <li>            167. Two Sum II - Input Array Is Sorted          </li> <li>            209. Minimum Size Subarray Sum          </li> <li>            2226. Maximum Candies Allocated to K Children          </li> <li>            240. Search a 2D Matrix II          </li> <li>            259. 3Sum Smaller \ud83d\udd12          </li> <li>            268. Missing Number          </li> <li>            33. Search in Rotated Sorted Array          </li> <li>            34. Find First and Last Position of Element in Sorted Array          </li> <li>            3477. Fruits Into Baskets II          </li> <li>            374. Guess Number Higher or Lower          </li> <li>            4. Median of Two Sorted Arrays          </li> <li>            410. Split Array Largest Sum          </li> <li>            658. Find K Closest Elements          </li> <li>            704. Binary Search          </li> <li>            74. Search a 2D Matrix          </li> <li>            81. Search in Rotated Sorted Array II          </li> <li>            875. Koko Eating Bananas          </li> <li>            981. Time Based Key-Value Store          </li> </ul>"},{"location":"topics/#tag:binary-search-tree","title":"Binary Search Tree","text":"<ul> <li>            108. Convert Sorted Array to Binary Search Tree          </li> <li>            230. Kth Smallest Element in a BST          </li> <li>            450. Delete Node in a BST          </li> <li>            530. Minimum Absolute Difference in BST          </li> <li>            701. Insert into a Binary Search Tree          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            783. Minimum Distance Between BST Nodes          </li> <li>            787. Cheapest Flights Within K Stops          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"topics/#tag:binary-tree","title":"Binary Tree","text":"<ul> <li>            100. Same Tree          </li> <li>            101. Symmetric Tree          </li> <li>            102. Binary Tree Level Order Traversal          </li> <li>            103. Binary Tree Zigzag Level Order Traversal          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            106. Construct Binary Tree from Inorder and Postorder Traversal          </li> <li>            108. Convert Sorted Array to Binary Search Tree          </li> <li>            112. Path Sum          </li> <li>            114. Flatten Binary Tree to Linked List          </li> <li>            1325. Delete Leaves With a Given Value          </li> <li>            1448. Count Good Nodes in Binary Tree          </li> <li>            226. Invert Binary Tree          </li> <li>            230. Kth Smallest Element in a BST          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            450. Delete Node in a BST          </li> <li>            530. Minimum Absolute Difference in BST          </li> <li>            543. Diameter of Binary Tree          </li> <li>            701. Insert into a Binary Search Tree          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            783. Minimum Distance Between BST Nodes          </li> <li>            787. Cheapest Flights Within K Stops          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"topics/#tag:bit-manipulation","title":"Bit Manipulation","text":"<ul> <li>            136. Single Number          </li> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            191. Number of 1 Bits          </li> <li>            201. Bitwise AND of Numbers Range          </li> <li>            268. Missing Number          </li> <li>            29. Divide Two Integers          </li> <li>            67. Add Binary          </li> <li>            78. Subsets          </li> </ul>"},{"location":"topics/#tag:biweekly-contest-26","title":"Biweekly Contest 26","text":"<ul> <li>            1448. Count Good Nodes in Binary Tree          </li> </ul>"},{"location":"topics/#tag:breadth-first-search","title":"Breadth-First Search","text":"<ul> <li>            100. Same Tree          </li> <li>            101. Symmetric Tree          </li> <li>            102. Binary Tree Level Order Traversal          </li> <li>            103. Binary Tree Zigzag Level Order Traversal          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            112. Path Sum          </li> <li>            130. Surrounded Regions          </li> <li>            133. Clone Graph          </li> <li>            1448. Count Good Nodes in Binary Tree          </li> <li>            200. Number of Islands          </li> <li>            207. Course Schedule          </li> <li>            210. Course Schedule II          </li> <li>            226. Invert Binary Tree          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            399. Evaluate Division          </li> <li>            407. Trapping Rain Water II          </li> <li>            530. Minimum Absolute Difference in BST          </li> <li>            783. Minimum Distance Between BST Nodes          </li> <li>            787. Cheapest Flights Within K Stops          </li> <li>            994. Rotting Oranges          </li> </ul>"},{"location":"topics/#tag:bucket-sort","title":"Bucket Sort","text":"<ul> <li>            347. Top K Frequent Elements          </li> <li>            451. Sort Characters By Frequency          </li> <li>            912. Sort an Array          </li> </ul>"},{"location":"topics/#tag:combinatorics","title":"Combinatorics","text":"<ul> <li>            62. Unique Paths          </li> </ul>"},{"location":"topics/#tag:counting","title":"Counting","text":"<ul> <li>            169. Majority Element          </li> <li>            347. Top K Frequent Elements          </li> <li>            451. Sort Characters By Frequency          </li> </ul>"},{"location":"topics/#tag:counting-sort","title":"Counting Sort","text":"<ul> <li>            912. Sort an Array          </li> </ul>"},{"location":"topics/#tag:data-stream","title":"Data Stream","text":"<ul> <li>            295. Find Median from Data Stream          </li> <li>            703. Kth Largest Element in a Stream          </li> </ul>"},{"location":"topics/#tag:depth-first-search","title":"Depth-First Search","text":"<ul> <li>            100. Same Tree          </li> <li>            101. Symmetric Tree          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            112. Path Sum          </li> <li>            114. Flatten Binary Tree to Linked List          </li> <li>            130. Surrounded Regions          </li> <li>            1325. Delete Leaves With a Given Value          </li> <li>            133. Clone Graph          </li> <li>            1448. Count Good Nodes in Binary Tree          </li> <li>            200. Number of Islands          </li> <li>            207. Course Schedule          </li> <li>            210. Course Schedule II          </li> <li>            211. Design Add and Search Words Data Structure          </li> <li>            226. Invert Binary Tree          </li> <li>            230. Kth Smallest Element in a BST          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            399. Evaluate Division          </li> <li>            530. Minimum Absolute Difference in BST          </li> <li>            543. Diameter of Binary Tree          </li> <li>            783. Minimum Distance Between BST Nodes          </li> <li>            787. Cheapest Flights Within K Stops          </li> <li>            79. Word Search          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"topics/#tag:design","title":"Design","text":"<ul> <li>            146. LRU Cache          </li> <li>            155. Min Stack          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            211. Design Add and Search Words Data Structure          </li> <li>            225. Implement Stack using Queues          </li> <li>            232. Implement Queue using Stacks          </li> <li>            295. Find Median from Data Stream          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            355. Design Twitter          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> <li>            895. Maximum Frequency Stack          </li> <li>            981. Time Based Key-Value Store          </li> </ul>"},{"location":"topics/#tag:divide-and-conquer","title":"Divide and Conquer","text":"<ul> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            106. Construct Binary Tree from Inorder and Postorder Traversal          </li> <li>            108. Convert Sorted Array to Binary Search Tree          </li> <li>            148. Sort List          </li> <li>            169. Majority Element          </li> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            191. Number of 1 Bits          </li> <li>            1985. Find the Kth Largest Integer in the Array          </li> <li>            215. Kth Largest Element in an Array          </li> <li>            23. Merge k Sorted Lists          </li> <li>            240. Search a 2D Matrix II          </li> <li>            347. Top K Frequent Elements          </li> <li>            4. Median of Two Sorted Arrays          </li> <li>            53. Maximum Subarray          </li> <li>            912. Sort an Array          </li> <li>            918. Maximum Sum Circular Subarray          </li> <li>            973. K Closest Points to Origin          </li> </ul>"},{"location":"topics/#tag:doubly-linked-list","title":"Doubly-Linked List","text":"<ul> <li>            146. LRU Cache          </li> </ul>"},{"location":"topics/#tag:dynamic-programming","title":"Dynamic Programming","text":"<ul> <li>            1024. Video Stitching          </li> <li>            1137. N-th Tribonacci Number          </li> <li>            1143. Longest Common Subsequence          </li> <li>            118. Pascal's Triangle          </li> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            122. Best Time to Buy and Sell Stock II          </li> <li>            123. Best Time to Buy and Sell Stock III          </li> <li>            1326. Minimum Number of Taps to Open to Water a Garden          </li> <li>            139. Word Break          </li> <li>            1493. Longest Subarray of 1's After Deleting One Element          </li> <li>            152. Maximum Product Subarray          </li> <li>            198. House Robber          </li> <li>            22. Generate Parentheses          </li> <li>            221. Maximal Square          </li> <li>            300. Longest Increasing Subsequence          </li> <li>            322. Coin Change          </li> <li>            410. Split Array Largest Sum          </li> <li>            42. Trapping Rain Water          </li> <li>            45. Jump Game II          </li> <li>            5. Longest Palindromic Substring          </li> <li>            53. Maximum Subarray          </li> <li>            55. Jump Game          </li> <li>            62. Unique Paths          </li> <li>            64. Minimum Path Sum          </li> <li>            647. Palindromic Substrings          </li> <li>            70. Climbing Stairs          </li> <li>            746. Min Cost Climbing Stairs          </li> <li>            85. Maximal Rectangle          </li> <li>            918. Maximum Sum Circular Subarray          </li> <li>            978. Longest Turbulent Subarray          </li> </ul>"},{"location":"topics/#tag:geometry","title":"Geometry","text":"<ul> <li>            973. K Closest Points to Origin          </li> </ul>"},{"location":"topics/#tag:graph","title":"Graph","text":"<ul> <li>            133. Clone Graph          </li> <li>            207. Course Schedule          </li> <li>            2093. Minimum Cost to Reach City With Discounts \ud83d\udd12          </li> <li>            210. Course Schedule II          </li> <li>            399. Evaluate Division          </li> </ul>"},{"location":"topics/#tag:greedy","title":"Greedy","text":"<ul> <li>            1024. Video Stitching          </li> <li>            11. Container With Most Water          </li> <li>            122. Best Time to Buy and Sell Stock II          </li> <li>            1326. Minimum Number of Taps to Open to Water a Garden          </li> <li>            135. Candy          </li> <li>            2294. Partition Array Such That Maximum Difference Is K          </li> <li>            410. Split Array Largest Sum          </li> <li>            45. Jump Game II          </li> <li>            55. Jump Game          </li> </ul>"},{"location":"topics/#tag:ground-transport","title":"Ground Transport","text":"<ul> <li>            6. Depot Location          </li> </ul>"},{"location":"topics/#tag:hash-function","title":"Hash Function","text":"<ul> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> </ul>"},{"location":"topics/#tag:hash-table","title":"Hash Table","text":"<ul> <li>            1. Two Sum          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            106. Construct Binary Tree from Inorder and Postorder Traversal          </li> <li>            128. Longest Consecutive Sequence          </li> <li>            133. Clone Graph          </li> <li>            138. Copy List with Random Pointer          </li> <li>            139. Word Break          </li> <li>            141. Linked List Cycle          </li> <li>            146. LRU Cache          </li> <li>            1636. Sort Array by Increasing Frequency          </li> <li>            169. Majority Element          </li> <li>            1695. Maximum Erasure Value          </li> <li>            17. Letter Combinations of a Phone Number          </li> <li>            202. Happy Number          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            217. Contains Duplicate          </li> <li>            242. Valid Anagram          </li> <li>            2461. Maximum Sum of Distinct Subarrays With Length K          </li> <li>            268. Missing Number          </li> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            347. Top K Frequent Elements          </li> <li>            355. Design Twitter          </li> <li>            36. Valid Sudoku          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            438. Find All Anagrams in a String          </li> <li>            442. Find All Duplicates in an Array          </li> <li>            451. Sort Characters By Frequency          </li> <li>            49. Group Anagrams          </li> <li>            496. Next Greater Element I          </li> <li>            567. Permutation in String          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> <li>            73. Set Matrix Zeroes          </li> <li>            76. Minimum Window Substring          </li> <li>            895. Maximum Frequency Stack          </li> <li>            981. Time Based Key-Value Store          </li> </ul>"},{"location":"topics/#tag:heap-priority-queue","title":"Heap (Priority Queue)","text":"<ul> <li>            1046. Last Stone Weight          </li> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            1985. Find the Kth Largest Integer in the Array          </li> <li>            2093. Minimum Cost to Reach City With Discounts \ud83d\udd12          </li> <li>            215. Kth Largest Element in an Array          </li> <li>            23. Merge k Sorted Lists          </li> <li>            239. Sliding Window Maximum          </li> <li>            295. Find Median from Data Stream          </li> <li>            347. Top K Frequent Elements          </li> <li>            355. Design Twitter          </li> <li>            407. Trapping Rain Water II          </li> <li>            451. Sort Characters By Frequency          </li> <li>            658. Find K Closest Elements          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            912. Sort an Array          </li> <li>            973. K Closest Points to Origin          </li> </ul>"},{"location":"topics/#tag:interactive","title":"Interactive","text":"<ul> <li>            1095. Find in Mountain Array          </li> <li>            374. Guess Number Higher or Lower          </li> </ul>"},{"location":"topics/#tag:lp","title":"LP","text":"<ul> <li>            1. Mixed Integer Programming          </li> </ul>"},{"location":"topics/#tag:linked-list","title":"Linked List","text":"<ul> <li>            114. Flatten Binary Tree to Linked List          </li> <li>            138. Copy List with Random Pointer          </li> <li>            141. Linked List Cycle          </li> <li>            146. LRU Cache          </li> <li>            148. Sort List          </li> <li>            19. Remove Nth Node From End of List          </li> <li>            2. Add Two Numbers          </li> <li>            206. Reverse Linked List          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            23. Merge k Sorted Lists          </li> <li>            25. Reverse Nodes in k-Group          </li> <li>            355. Design Twitter          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> <li>            876. Middle of the Linked List          </li> </ul>"},{"location":"topics/#tag:mip","title":"MIP","text":"<ul> <li>            1. Mixed Integer Programming          </li> <li>            3. Composing flight crews          </li> <li>            4. N Queen          </li> <li>            6. Depot Location          </li> </ul>"},{"location":"topics/#tag:math","title":"Math","text":"<ul> <li>            1137. N-th Tribonacci Number          </li> <li>            189. Rotate Array          </li> <li>            199. Binary Tree Right Side View          </li> <li>            2. Add Two Numbers          </li> <li>            202. Happy Number          </li> <li>            224. Basic Calculator          </li> <li>            268. Missing Number          </li> <li>            29. Divide Two Integers          </li> <li>            48. Rotate Image          </li> <li>            50. Pow(x, n)          </li> <li>            62. Unique Paths          </li> <li>            66. Plus One          </li> <li>            67. Add Binary          </li> <li>            69. Sqrt(x)          </li> <li>            7. Reverse Integer          </li> <li>            70. Climbing Stairs          </li> <li>            9. Palindrome Number          </li> <li>            973. K Closest Points to Origin          </li> </ul>"},{"location":"topics/#tag:matrix","title":"Matrix","text":"<ul> <li>            130. Surrounded Regions          </li> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            200. Number of Islands          </li> <li>            212. Word Search II          </li> <li>            221. Maximal Square          </li> <li>            240. Search a 2D Matrix II          </li> <li>            289. Game of Life          </li> <li>            36. Valid Sudoku          </li> <li>            4. N Queen          </li> <li>            407. Trapping Rain Water II          </li> <li>            48. Rotate Image          </li> <li>            54. Spiral Matrix          </li> <li>            64. Minimum Path Sum          </li> <li>            73. Set Matrix Zeroes          </li> <li>            74. Search a 2D Matrix          </li> <li>            79. Word Search          </li> <li>            85. Maximal Rectangle          </li> <li>            994. Rotting Oranges          </li> </ul>"},{"location":"topics/#tag:memoization","title":"Memoization","text":"<ul> <li>            1137. N-th Tribonacci Number          </li> <li>            139. Word Break          </li> <li>            70. Climbing Stairs          </li> </ul>"},{"location":"topics/#tag:merge-sort","title":"Merge Sort","text":"<ul> <li>            148. Sort List          </li> <li>            23. Merge k Sorted Lists          </li> <li>            912. Sort an Array          </li> </ul>"},{"location":"topics/#tag:monotonic-queue","title":"Monotonic Queue","text":"<ul> <li>            239. Sliding Window Maximum          </li> <li>            918. Maximum Sum Circular Subarray          </li> </ul>"},{"location":"topics/#tag:monotonic-stack","title":"Monotonic Stack","text":"<ul> <li>            42. Trapping Rain Water          </li> <li>            496. Next Greater Element I          </li> <li>            739. Daily Temperatures          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            853. Car Fleet          </li> </ul>"},{"location":"topics/#tag:optimization","title":"Optimization","text":"<ul> <li>            3. Composing flight crews          </li> <li>            4. N Queen          </li> <li>            6. Depot Location          </li> </ul>"},{"location":"topics/#tag:ordered-set","title":"Ordered Set","text":"<ul> <li>            3477. Fruits Into Baskets II          </li> <li>            895. Maximum Frequency Stack          </li> </ul>"},{"location":"topics/#tag:prefix-sum","title":"Prefix Sum","text":"<ul> <li>            1004. Max Consecutive Ones III          </li> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            209. Minimum Size Subarray Sum          </li> <li>            238. Product of Array Except Self          </li> <li>            410. Split Array Largest Sum          </li> </ul>"},{"location":"topics/#tag:queue","title":"Queue","text":"<ul> <li>            225. Implement Stack using Queues          </li> <li>            232. Implement Queue using Stacks          </li> <li>            239. Sliding Window Maximum          </li> <li>            918. Maximum Sum Circular Subarray          </li> </ul>"},{"location":"topics/#tag:quickselect","title":"Quickselect","text":"<ul> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            1985. Find the Kth Largest Integer in the Array          </li> <li>            215. Kth Largest Element in an Array          </li> <li>            347. Top K Frequent Elements          </li> <li>            973. K Closest Points to Origin          </li> </ul>"},{"location":"topics/#tag:radix-sort","title":"Radix Sort","text":"<ul> <li>            912. Sort an Array          </li> </ul>"},{"location":"topics/#tag:recursion","title":"Recursion","text":"<ul> <li>            2. Add Two Numbers          </li> <li>            206. Reverse Linked List          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            224. Basic Calculator          </li> <li>            25. Reverse Nodes in k-Group          </li> <li>            50. Pow(x, n)          </li> </ul>"},{"location":"topics/#tag:segment-tree","title":"Segment Tree","text":"<ul> <li>            3477. Fruits Into Baskets II          </li> </ul>"},{"location":"topics/#tag:shortest-path","title":"Shortest Path","text":"<ul> <li>            2093. Minimum Cost to Reach City With Discounts \ud83d\udd12          </li> <li>            399. Evaluate Division          </li> </ul>"},{"location":"topics/#tag:simulation","title":"Simulation","text":"<ul> <li>            289. Game of Life          </li> <li>            3477. Fruits Into Baskets II          </li> <li>            54. Spiral Matrix          </li> <li>            67. Add Binary          </li> </ul>"},{"location":"topics/#tag:sliding-window","title":"Sliding Window","text":"<ul> <li>            1004. Max Consecutive Ones III          </li> <li>            1493. Longest Subarray of 1's After Deleting One Element          </li> <li>            1695. Maximum Erasure Value          </li> <li>            209. Minimum Size Subarray Sum          </li> <li>            239. Sliding Window Maximum          </li> <li>            2461. Maximum Sum of Distinct Subarrays With Length K          </li> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            438. Find All Anagrams in a String          </li> <li>            567. Permutation in String          </li> <li>            658. Find K Closest Elements          </li> <li>            76. Minimum Window Substring          </li> <li>            978. Longest Turbulent Subarray          </li> </ul>"},{"location":"topics/#tag:sorting","title":"Sorting","text":"<ul> <li>            148. Sort List          </li> <li>            15. 3Sum          </li> <li>            16. 3Sum Closest          </li> <li>            1636. Sort Array by Increasing Frequency          </li> <li>            169. Majority Element          </li> <li>            1738. Find Kth Largest XOR Coordinate Value          </li> <li>            18. 4Sum          </li> <li>            1985. Find the Kth Largest Integer in the Array          </li> <li>            215. Kth Largest Element in an Array          </li> <li>            217. Contains Duplicate          </li> <li>            2294. Partition Array Such That Maximum Difference Is K          </li> <li>            242. Valid Anagram          </li> <li>            259. 3Sum Smaller \ud83d\udd12          </li> <li>            268. Missing Number          </li> <li>            295. Find Median from Data Stream          </li> <li>            347. Top K Frequent Elements          </li> <li>            451. Sort Characters By Frequency          </li> <li>            49. Group Anagrams          </li> <li>            509. Fibonacci Number          </li> <li>            56. Merge Intervals          </li> <li>            658. Find K Closest Elements          </li> <li>            853. Car Fleet          </li> <li>            88. Merge Sorted Array          </li> <li>            912. Sort an Array          </li> <li>            973. K Closest Points to Origin          </li> </ul>"},{"location":"topics/#tag:stack","title":"Stack","text":"<ul> <li>            114. Flatten Binary Tree to Linked List          </li> <li>            155. Min Stack          </li> <li>            20. Valid Parentheses          </li> <li>            224. Basic Calculator          </li> <li>            225. Implement Stack using Queues          </li> <li>            232. Implement Queue using Stacks          </li> <li>            42. Trapping Rain Water          </li> <li>            496. Next Greater Element I          </li> <li>            739. Daily Temperatures          </li> <li>            84. Largest Rectangle in Histogram          </li> <li>            85. Maximal Rectangle          </li> <li>            853. Car Fleet          </li> <li>            895. Maximum Frequency Stack          </li> </ul>"},{"location":"topics/#tag:string","title":"String","text":"<ul> <li>            1143. Longest Common Subsequence          </li> <li>            125. Valid Palindrome          </li> <li>            139. Word Break          </li> <li>            17. Letter Combinations of a Phone Number          </li> <li>            1985. Find the Kth Largest Integer in the Array          </li> <li>            20. Valid Parentheses          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            211. Design Add and Search Words Data Structure          </li> <li>            212. Word Search II          </li> <li>            22. Generate Parentheses          </li> <li>            224. Basic Calculator          </li> <li>            242. Valid Anagram          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            344. Reverse String          </li> <li>            399. Evaluate Division          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            438. Find All Anagrams in a String          </li> <li>            451. Sort Characters By Frequency          </li> <li>            49. Group Anagrams          </li> <li>            5. Longest Palindromic Substring          </li> <li>            567. Permutation in String          </li> <li>            647. Palindromic Substrings          </li> <li>            67. Add Binary          </li> <li>            76. Minimum Window Substring          </li> <li>            79. Word Search          </li> <li>            981. Time Based Key-Value Store          </li> </ul>"},{"location":"topics/#tag:topological-sort","title":"Topological Sort","text":"<ul> <li>            207. Course Schedule          </li> <li>            210. Course Schedule II          </li> </ul>"},{"location":"topics/#tag:tree","title":"Tree","text":"<ul> <li>            100. Same Tree          </li> <li>            101. Symmetric Tree          </li> <li>            102. Binary Tree Level Order Traversal          </li> <li>            103. Binary Tree Zigzag Level Order Traversal          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            105. Construct Binary Tree from Preorder and Inorder Traversal          </li> <li>            106. Construct Binary Tree from Inorder and Postorder Traversal          </li> <li>            108. Convert Sorted Array to Binary Search Tree          </li> <li>            112. Path Sum          </li> <li>            114. Flatten Binary Tree to Linked List          </li> <li>            1325. Delete Leaves With a Given Value          </li> <li>            1448. Count Good Nodes in Binary Tree          </li> <li>            226. Invert Binary Tree          </li> <li>            230. Kth Smallest Element in a BST          </li> <li>            297. Serialize and Deserialize Binary Tree          </li> <li>            450. Delete Node in a BST          </li> <li>            530. Minimum Absolute Difference in BST          </li> <li>            543. Diameter of Binary Tree          </li> <li>            701. Insert into a Binary Search Tree          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            783. Minimum Distance Between BST Nodes          </li> <li>            787. Cheapest Flights Within K Stops          </li> <li>            98. Validate Binary Search Tree          </li> </ul>"},{"location":"topics/#tag:trie","title":"Trie","text":"<ul> <li>            139. Word Break          </li> <li>            208. Implement Trie (Prefix Tree)          </li> <li>            211. Design Add and Search Words Data Structure          </li> <li>            212. Word Search II          </li> </ul>"},{"location":"topics/#tag:two-pointers","title":"Two Pointers","text":"<ul> <li>            11. Container With Most Water          </li> <li>            125. Valid Palindrome          </li> <li>            141. Linked List Cycle          </li> <li>            148. Sort List          </li> <li>            15. 3Sum          </li> <li>            16. 3Sum Closest          </li> <li>            167. Two Sum II - Input Array Is Sorted          </li> <li>            18. 4Sum          </li> <li>            189. Rotate Array          </li> <li>            19. Remove Nth Node From End of List          </li> <li>            199. Binary Tree Right Side View          </li> <li>            202. Happy Number          </li> <li>            259. 3Sum Smaller \ud83d\udd12          </li> <li>            26. Remove Duplicates from Sorted Array          </li> <li>            27. Remove Element          </li> <li>            295. Find Median from Data Stream          </li> <li>            344. Reverse String          </li> <li>            42. Trapping Rain Water          </li> <li>            5. Longest Palindromic Substring          </li> <li>            509. Fibonacci Number          </li> <li>            567. Permutation in String          </li> <li>            647. Palindromic Substrings          </li> <li>            658. Find K Closest Elements          </li> <li>            876. Middle of the Linked List          </li> <li>            88. Merge Sorted Array          </li> </ul>"},{"location":"topics/#tag:union-find","title":"Union Find","text":"<ul> <li>            128. Longest Consecutive Sequence          </li> <li>            130. Surrounded Regions          </li> <li>            200. Number of Islands          </li> <li>            399. Evaluate Division          </li> </ul>"},{"location":"glossary/definitions/","title":"Definitions","text":"Akhil Singh Chauhan                          Creator"},{"location":"glossary/definitions/#general-algorithmstechniques","title":"General algorithms/techniques","text":""},{"location":"glossary/definitions/#recursion","title":"Recursion","text":"<ul> <li>A recursive algorithm is one that calls itself to solve smaller instances of the same problem, ultimately reaching a base case that can be solved directly.</li> <li>It breaks down a problem into subproblems until a simple, solvable case is reached, then combines the solutions to build the solution for the original problem.</li> <li>Defining a problem in terms of itself, often leading to elegant and concise solutions.</li> </ul> <pre><code>  %%{init: {\"themeVariables\": {\"fontSize\":\"18px\"}, \"flowchart\": {\"curve\": \"monotoneY\"}} }%%\n  flowchart TD\n    Start((Start)):::start e1@==&gt; CallFunc{\"Is Base Case?\"}:::decision\n    CallFunc e2@==&gt;|Yes| BaseCase([\"Return Result (Base Case)\"]):::endClass\n    CallFunc e3@==&gt;|No| Recurse[\"Call function&lt;br&gt;again with&lt;br&gt;simpler input\"]:::recurse\n    Recurse e4@==&gt;|Recursive Call| CallFunc\n    BaseCase e5@==&gt; Output[\"Result unwinds&lt;br&gt;back through calls\"]:::output\n\n    classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 10s linear infinite;\n\n    class e1,e2,e3,e4,e5 animate;\n\n    classDef start fill:#8ead52,stroke:#16634d,stroke-width:2px;\n    classDef decision fill:#ffb9009c,stroke:#b07a29,stroke-width:2px;\n    classDef recurse fill:#19f6f98f,stroke:#7fa0f77a,stroke-width:2px,font-style:italic;\n    classDef returnNode fill:#bdf7b7,stroke:#24581c,stroke-width:2px;\n    classDef output fill:#b44adc8c,stroke:#8150ae,stroke-width:2px,font-style:italic;\n\n    class Start start;\n    class CallFunc decision;\n    class ReturnNode returnNode;\n    class Recurse recurse;\n    class Output output;</code></pre>"},{"location":"glossary/definitions/#dynamic-programming","title":"Dynamic Programming","text":"<ul> <li>Breaking down a problem into overlapping subproblems and storing solutions to avoid recomputation.</li> </ul> <pre><code>%%{init: { 'securityLevel': 'loose', 'theme': 'default', 'flowchart': {'curve': 'monotoneY'}}}%%\n  flowchart TD\n      A[Original Problem] e1@==&gt; B{Is Subproblem Solved?}\n      B e2@==&gt;|No| C[Break Down into Subproblems]\n      C e3@==&gt; D[Solve Subproblem]\n      D e4@==&gt; E[Store Solution in Memory]\n      E e5@==&gt; F[Use Stored Solution]\n      B e6@==&gt;|Yes| F\n      F e7@==&gt; G[Solve Original Problem Efficiently]\n\n      classDef animate stroke-dasharray: 5,3,stroke-dashoffset: 900,animation: dash 10s linear infinite;\n\n      class e1,e2,e3,e4,e5,e6,e7 animate;\n\n      %% Animation Hints\n      click A \"javascript:void(0)\" \"Start with the main problem\"\n      click B \"javascript:void(0)\" \"Check if subproblem was solved\"\n      click C \"javascript:void(0)\" \"Divide into overlapping subproblems\"\n      click D \"javascript:void(0)\" \"Solve the required subproblem\"\n      click E \"javascript:void(0)\" \"Store the solution to avoid recomputation\"\n      click F \"javascript:void(0)\" \"Reuse stored result\"\n      click G \"javascript:void(0)\" \"Problem solved efficiently!\"</code></pre>"},{"location":"glossary/definitions/#divide-conquer","title":"Divide &amp; Conquer","text":"<ul> <li>A divide-and-conquer algorithm recursively breaks down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.</li> </ul>"},{"location":"glossary/definitions/#greedy-algorithms","title":"Greedy Algorithms","text":"<ul> <li>Making locally optimal choices at each step with the hope of finding a global optimum.</li> </ul>"},{"location":"glossary/definitions/#backtracking","title":"Backtracking","text":"<ul> <li>Incrementally building solutions, exploring all possible paths, and abandoning invalid ones.</li> </ul>"},{"location":"glossary/definitions/#arrays-strings","title":"Arrays &amp; Strings","text":""},{"location":"glossary/definitions/#subsequence","title":"Subsequence","text":"<ul> <li>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</li> </ul>"},{"location":"glossary/definitions/#substring","title":"Substring","text":"<ul> <li>A substring is a contiguous non-empty sequence of characters within a string.</li> </ul> Substring Illustration"},{"location":"glossary/definitions/#consider-a-string-of-n-characters-s_0s_1s_2s_n-1","title":"Consider a string of n characters: \"\\(s_0s_1s_2...s_{n-1}\\)\"","text":"<ul> <li>No. of <code>substring</code> = \\({C^n_2}\\) + \\({C^n_1}\\) = \\(n(n+1)/2\\)</li> <li>\\({C^n_2}\\) - because substring contains more than one character</li> <li>\\({C^n_1}\\) - because one character in itself is a substring</li> </ul>"},{"location":"glossary/definitions/#palindrome","title":"Palindrome","text":"<ul> <li>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</li> </ul>"},{"location":"glossary/definitions/#monotonic","title":"Monotonic","text":"<ul> <li>Elements are entirely non-decreasing or non-increasing</li> </ul>"},{"location":"glossary/definitions/#circular-array","title":"Circular Array","text":"<ul> <li>Array where the end connects to the beginning</li> </ul>"},{"location":"glossary/definitions/#partition","title":"Partition","text":"<ul> <li>Dividing array into parts based on specific criteria</li> </ul>"},{"location":"glossary/definitions/#subarray","title":"Subarray","text":"<ul> <li>A subarray is a contiguous non-empty sequence of elements within an array.</li> </ul>"},{"location":"glossary/definitions/#kadanes-algorithm","title":"Kadane's Algorithm","text":"<ul> <li>Technique to find maximum subarray sum subarray</li> </ul>"},{"location":"glossary/definitions/#two-pointers","title":"Two Pointers","text":"<ul> <li>Using two index pointers to solve array problems</li> </ul>"},{"location":"glossary/definitions/#sliding-window","title":"Sliding Window","text":"<ul> <li>Technique of maintaining a window that slides through an array</li> </ul>"},{"location":"glossary/definitions/#prefix-sum","title":"Prefix Sum","text":"<ul> <li>Array where each element is sum of all previous elements</li> </ul>"},{"location":"glossary/definitions/#suffix-sum","title":"Suffix Sum","text":"<ul> <li>Array where each element is sum of all elements after it</li> </ul>"},{"location":"glossary/definitions/#rotation","title":"Rotation","text":"<ul> <li>Shifting array elements by a certain offset</li> </ul>"},{"location":"glossary/definitions/#in-place","title":"In-place","text":"<ul> <li>Algorithm that transforms input without creating another data structure</li> </ul>"},{"location":"glossary/definitions/#anagram","title":"Anagram","text":"<ul> <li>An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.</li> </ul>"},{"location":"glossary/definitions/#lexicographic-order","title":"Lexicographic Order","text":"<ul> <li>Dictionary Ordering of Strings</li> </ul> Array Illustration <ul> <li> <p>Consider an array: {1,2,3,4}</p> </li> <li> <p>Subarray: contiguous non-empty sequence of an elements within an array i.e. {1,2},{1,2,3}</p> </li> <li> <p>Subsequence: Need not to be contiguous, but maintains order i.e. {1,2,4}</p> </li> <li> <p>Subset: Same as subsequence except it has empty set i.e. # {1,3},{}</p> </li> </ul>"},{"location":"glossary/definitions/#given-an-arraysequence-of-size-n-possible","title":"Given an array/sequence of size n, possible","text":"<ul> <li>Subarray = n*(n+1)/2</li> <li>Subseqeunce = (2<sup>n</sup>) - 1 (non-empty subsequences)</li> <li>Subset = 2<sup>n</sup></li> </ul>"},{"location":"glossary/definitions/#array-operations-time-complexity","title":"Array Operations Time Complexity","text":"<p>Arrays (dynamic array/list), Given n = arr.length</p> Operations Time Complexity Add or Remove element at the end \\(O(1)\\) Amortized Access or modify element at arbitrary index \\(O(1)\\) Finding the sum of a subarray given a prefix sum \\(O(1)\\) Searching Sorted Array for an Element \\(O(\\log n)\\) Binary Search Add or Remove Element from arbitrary index \\(O(n)\\) Check if element exists/Searching Array for an Element \\(O(n)\\) Copying Array \\(O(n)\\) Sliding Window \\(O(n)\\) Building a prefix sum: \\(O(n)\\) Two pointers: \\(O(n\u22c5k)\\), where \\(k\\) is the work done at each iteration, includes sliding window All Pairs of Array Elements \\(O(n^2)\\)"},{"location":"glossary/definitions/#heap-priority-queue","title":"Heap &amp; Priority Queue","text":""},{"location":"glossary/definitions/#min-heap-max-heap","title":"Min Heap / Max Heap","text":"<ul> <li>Tree-based data structure where parent is smaller/larger than children</li> </ul>"},{"location":"glossary/definitions/#heap-sort","title":"Heap Sort","text":"<ul> <li>Sorting algorithm using a heap</li> </ul>"},{"location":"glossary/definitions/#priority-queue","title":"Priority Queue","text":"<ul> <li>Abstract data type providing efficient access to the minimum/maximum element</li> </ul>"},{"location":"glossary/definitions/#heapify","title":"Heapify","text":"<ul> <li>Process of creating a heap from an array</li> </ul>"},{"location":"glossary/definitions/#k-way-merge","title":"K-Way Merge","text":"<ul> <li>Merging k sorted arrays/lists (often using heaps)</li> </ul>"},{"location":"glossary/definitions/#build-heap","title":"Build Heap","text":"<ul> <li>The process of running heapify() on the entire heap to create a valid heap</li> </ul>"},{"location":"glossary/definitions/#two-heaps","title":"Two Heaps","text":"<ul> <li>A technique used to find the median of a data stream using a max and a min heap</li> </ul>"},{"location":"glossary/definitions/#heap-operations-time-complexity","title":"Heap Operations Time Complexity","text":"Operation TC top() \\(O(1)\\) insert() \\(O(\\log n)\\) remove() \\(O(\\log n)\\) heapify() \\(O(n)\\)"},{"location":"glossary/definitions/#backtracking_1","title":"Backtracking","text":""},{"location":"glossary/definitions/#subsets","title":"Subsets","text":"<ul> <li> <p>A subset of an array is a selection of elements (possibly none) of the array.</p> </li> <li> <p>Set A is a subset to Set B if all of its elements are found in Set B</p> </li> </ul>"},{"location":"glossary/definitions/#combinations","title":"Combinations","text":"<ul> <li>Number of ways of selection and arrangement of items where order does not matter</li> </ul>"},{"location":"glossary/definitions/#permutations","title":"Permutations","text":"<ul> <li>Number of ways of selection and arrangement of items where order matters</li> </ul>"},{"location":"glossary/definitions/#pruning","title":"Pruning","text":"<ul> <li>Used to eliminate branches early on that can never lead to valid solutions</li> </ul>"},{"location":"glossary/definitions/#constraint","title":"Constraint","text":"<ul> <li>A condition that must be satisfied to reach a valid solution</li> </ul>"},{"location":"glossary/definitions/#base-case","title":"Base Case","text":"<ul> <li>Determines when a valid solution has been found</li> </ul>"},{"location":"glossary/definitions/#candidate-solution","title":"Candidate Solution","text":"<ul> <li>Start from the final problem and recursively break it into smaller subproblems</li> </ul>"},{"location":"glossary/definitions/#unique-combination","title":"Unique Combination","text":"<ul> <li>Two combinations are unique if the frequency of chosen numbers is not the same</li> </ul>"},{"location":"glossary/definitions/#dynamic-programming_1","title":"Dynamic Programming","text":""},{"location":"glossary/definitions/#memoization","title":"Memoization","text":"<ul> <li>Cache technique to avoid redundant calculations</li> </ul>"},{"location":"glossary/definitions/#tabulation","title":"Tabulation","text":"<ul> <li>Bottom-up approach using arrays to store subproblem results</li> </ul>"},{"location":"glossary/definitions/#state","title":"State","text":"<ul> <li>Snapshot of progress you've made in solving the larger problem</li> </ul>"},{"location":"glossary/definitions/#overlapping-subproblems","title":"Overlapping Subproblems","text":"<ul> <li>When the same subproblems are solved multiple times</li> </ul>"},{"location":"glossary/definitions/#1-dimensional","title":"1-Dimensional","text":"<ul> <li>The result for the current state only depends on one previous state or a linear history, e.g. Fib</li> </ul>"},{"location":"glossary/definitions/#2-dimensional","title":"2-Dimensional","text":"<ul> <li>The problem depends on two varying factors, often two strings, two sequences, or two indices</li> </ul>"},{"location":"glossary/definitions/#top-down","title":"Top Down","text":"<ul> <li>Start from the final problem and recursively break it into smaller subproblems</li> </ul>"},{"location":"glossary/definitions/#bottom-up","title":"Bottom Up","text":"<ul> <li>Build the solution from the base case all the way up to the final solution</li> </ul>"},{"location":"glossary/definitions/#longest-common-subsequence-lcs","title":"Longest Common Subsequence (LCS)","text":"<ul> <li>Finding the longest subsequence common to two sequences</li> </ul>"},{"location":"glossary/definitions/#longest-increasing-subsequence-lis","title":"Longest Increasing Subsequence (LIS)","text":"<ul> <li>Finding the longest subsequence where elements are in ascending order</li> </ul>"},{"location":"glossary/definitions/#0-1-knapsack","title":"0 / 1 Knapsack","text":"<ul> <li>Pick items such that profits associated with them are maximized.</li> <li>Each item can be picked at most once</li> </ul>"},{"location":"glossary/definitions/#unbounded-knapsack","title":"Unbounded Knapsack","text":"<ul> <li>Pick items such that profits associated with them are maximized.</li> <li>Each item can be picked unlimited times</li> </ul>"},{"location":"glossary/definitions/#tree","title":"Tree","text":""},{"location":"glossary/definitions/#binary-tree","title":"Binary Tree","text":"<ul> <li>Tree where each node has atmost two children</li> </ul>"},{"location":"glossary/definitions/#binary-search-tree-bst","title":"Binary Search Tree (BST)","text":"<ul> <li>Binary tree where left child value &lt; parent value &lt; right child value</li> </ul>"},{"location":"glossary/definitions/#complete-binary-tree","title":"Complete Binary Tree","text":"<ul> <li>Every level filled except possibly last, which is filled left to right</li> </ul>"},{"location":"glossary/definitions/#perfect-binary-tree","title":"Perfect Binary Tree","text":"<ul> <li>All internal nodes have exactly two children and all leaf nodes are at same level</li> </ul>"},{"location":"glossary/definitions/#balanced-tree","title":"Balanced Tree","text":"<ul> <li>Height difference between left and right subtrees is limited and (often \\(\\leq\\) 1)</li> </ul>"},{"location":"glossary/definitions/#height-balanced","title":"Height-Balanced","text":"<p>A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</p>"},{"location":"glossary/definitions/#self-balancing-tree","title":"Self Balancing Tree","text":"<ul> <li>Automatically maintains balance after insertions/deletions (e.g., AVL, Red-Black)</li> </ul>"},{"location":"glossary/definitions/#traversal","title":"Traversal","text":"<ul> <li>Methods to visit all nodes (preorder, inorder, postorder, level-order)</li> </ul>"},{"location":"glossary/definitions/#lowest-common-ancestor-lca","title":"Lowest Common Ancestor (LCA)","text":"<ul> <li>Deepest node that is an ancestor of two given nodes</li> </ul>"},{"location":"glossary/definitions/#serialization-deserialization","title":"Serialization/ Deserialization","text":"<ul> <li> <p>Converting a tree to/from a string representation</p> </li> <li> <p>Serialization: Converting a tree to a string.</p> </li> <li> <p>Deserialization: Converting a string back into a tree</p> </li> <li> <p>Example: \"1, 2, 4, null, null, 5, null, null, 3, null, null\", where null indicates a null node.</p> </li> </ul>"},{"location":"glossary/definitions/#diameter","title":"Diameter","text":"<ul> <li>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</li> </ul>"},{"location":"glossary/definitions/#length-of-path","title":"Length of Path","text":"<ul> <li>The length of a path between two nodes is represented by the number of edges between them.</li> </ul>"},{"location":"glossary/definitions/#depth","title":"Depth","text":"<ul> <li>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</li> </ul>"},{"location":"glossary/definitions/#level-order","title":"Level Order","text":"<ul> <li>Processing tree nodes level by level</li> </ul>"},{"location":"glossary/definitions/#segment-tree","title":"Segment Tree","text":"<ul> <li>Data structure for range queries</li> </ul>"},{"location":"glossary/definitions/#bfs-breadth-first-search-aka-level-order-traversal","title":"BFS (Breadth First Search) aka Level Order Traversal","text":"<ul> <li>Traversing the tree nodes level by level, often using a queue.</li> </ul>"},{"location":"glossary/definitions/#dfs-depth-first-search","title":"DFS (Depth First Search)","text":"<ul> <li> <p>Traversing the tree in a depth-first manner</p> </li> <li> <p>Visits nodes by exploring depth-first. Comes in three orders:</p> </li> <li> <p>Preorder: node \u2192 left \u2192 right (NLR)</p> </li> <li>Inorder: left \u2192 node \u2192 right (LNR)</li> <li>Postorder: left \u2192 right \u2192 node (LRN)</li> </ul>"},{"location":"glossary/definitions/#graphs","title":"Graphs","text":""},{"location":"glossary/definitions/#vertexvertices","title":"Vertex/Vertices","text":"<ul> <li>Represents a point(s) in a graph. This can also be referred to as a node(s). Usually contains some data or information.</li> </ul>"},{"location":"glossary/definitions/#edgeedges","title":"Edge/Edges","text":"<ul> <li>These connect the vertices together. Seen as lines going from one vertex to another.</li> </ul>"},{"location":"glossary/definitions/#in-degree","title":"In-degree","text":"<ul> <li>The number of edges that can be used to reach a node.</li> </ul>"},{"location":"glossary/definitions/#outdegree","title":"Outdegree","text":"<ul> <li>The number of edges that can be used to leave a node.</li> </ul>"},{"location":"glossary/definitions/#directed-undirected","title":"Directed / Undirected","text":"<ul> <li>Edges with/without direction</li> </ul>"},{"location":"glossary/definitions/#directed","title":"Directed","text":"<ul> <li>This is where edges have direction.</li> <li>This is denoted through arrows.</li> <li>With directed graphs, typically you can only go in one direction.</li> <li>If you are at vertex 1 and there is an edge going from 1 -&gt; 0, you can traverse to 0 but once you are at 0, you cannot go back to 1.</li> </ul>"},{"location":"glossary/definitions/#undirected","title":"Undirected","text":"<ul> <li>This is when you can traverse in both directions.</li> <li>Typically denoted using a straight line with no arrows.</li> <li>If you are at vertex 1 and there is an edge going from 1 - 0, you can move from 1-&gt;0 and from 0-&gt;1.</li> </ul>"},{"location":"glossary/definitions/#weighted-unweighted","title":"Weighted / Unweighted","text":"<ul> <li>Edges with/without values - known as weights</li> </ul>"},{"location":"glossary/definitions/#connected","title":"Connected","text":"<ul> <li>A graph is connected when there is a path connecting every single vertex.</li> </ul>"},{"location":"glossary/definitions/#disconnected","title":"Disconnected","text":"<ul> <li>A graph is disconnected when there is at least one pair of vertices that has no path that connects them together.</li> </ul>"},{"location":"glossary/definitions/#connected-component","title":"Connected Component","text":"<ul> <li>Subset of vertices where any two vertices are connected by a path</li> </ul>"},{"location":"glossary/definitions/#strongly-connected-component-scc","title":"Strongly Connected Component (SCC)","text":"<ul> <li>In a directed graph, subset where every vertex is reachable from every other</li> </ul>"},{"location":"glossary/definitions/#bipartite-graph","title":"Bipartite Graph","text":"<ul> <li>Can be divided into two sets with no edges within each set</li> </ul>"},{"location":"glossary/definitions/#dag-directed-acyclic-graph","title":"DAG (Directed Acyclic Graph)","text":"<ul> <li>Directed graph with no cycles</li> </ul>"},{"location":"glossary/definitions/#topological-sort","title":"Topological Sort","text":"<ul> <li>Linear ordering of vertices where for every edge (u,v), u comes before v. Works with DAGs</li> </ul>"},{"location":"glossary/definitions/#adjacency-list","title":"Adjacency List","text":"<ul> <li>Graph representation derived from an array of edges</li> </ul>"},{"location":"glossary/definitions/#bfsdfs","title":"BFS/DFS","text":"<ul> <li>Breadth-First Search and Depth-First Search traversal strategies</li> </ul>"},{"location":"glossary/definitions/#mst-minimum-spanning-tree","title":"MST (Minimum Spanning Tree)","text":"<ul> <li>Tree connecting all vertices with minimum total edge weight</li> </ul>"},{"location":"glossary/definitions/#bellman-ford-dijkstra-floyd-warshall","title":"Bellman-Ford / Dijkstra / Floyd-Warshall","text":"<ul> <li>Shortest path algorithms</li> </ul>"},{"location":"glossary/definitions/#union-find","title":"Union-Find","text":"<ul> <li>Data structure for disjoint sets operations</li> </ul>"},{"location":"glossary/definitions/#cycle-detection","title":"Cycle Detection","text":"<ul> <li>Algorithms to find cycles in graphs</li> </ul>"},{"location":"glossary/definitions/#a-algorithm","title":"A* Algorithm","text":"<ul> <li>Best-first search algorithm for path finding</li> </ul>"},{"location":"glossary/definitions/#miscellaneous","title":"Miscellaneous","text":""},{"location":"glossary/definitions/#amortized-analysis","title":"Amortized Analysis","text":"<ul> <li>Analyzing average performance over a sequence of operations</li> </ul>"},{"location":"glossary/definitions/#randomized-algorithm","title":"Randomized Algorithm","text":"<ul> <li>Algorithm that uses random numbers to decide next step</li> </ul>"},{"location":"glossary/definitions/#skip-list","title":"Skip List","text":"<ul> <li>Probabilistic data structure for efficient search</li> </ul>"},{"location":"glossary/definitions/#execution-time","title":"Execution Time","text":"<ul> <li>The raw time taken in seconds to execute an algorithm</li> </ul>"},{"location":"glossary/definitions/#stable-sorting-algorithm","title":"Stable Sorting Algorithm","text":"<ul> <li>A sorting algorithm that maintains the relative order of elements after sorting</li> </ul>"},{"location":"glossary/definitions/#unstable-sorting-algorithm","title":"Unstable Sorting Algorithm","text":"<ul> <li>A sorting algorithm that does not maintain the relative order of elements after sorting</li> </ul>"},{"location":"glossary/strategies/","title":"Strategies","text":"Akhil Singh Chauhan                          Creator"},{"location":"glossary/strategies/#golden-rules-for-solving-a-coding-problem-in-an-interview","title":"Golden rules for solving a Coding problem in an Interview","text":"<ol> <li> <p>If the coding problem requires performing an operation that needs faster search in O(1), try to use Set or a Map.</p> </li> <li> <p>If the coding problem requires finding/manipulating/dealing with the top, bottom, maximum, minimum, closest, and farthest \"K\" elements among given \"N\" elements, try to use a Heap.</p> </li> <li> <p>If the coding problem has input as a sorted Array, List, or Matrix, try to use Two Pointer strategy or try to use Binary Search.</p> </li> <li> <p>If the problem requires finding all Permutations or Combinations , we can use backtracking(DFS) or BFS.</p> </li> <li> <p>If the coding problem has input in the form of a Tree or Graph, then most of the time problem can be solved by applying Tree Traversals or Graph Traversals algorithms called Breadth First Search (BFS) and Depth First Search (DFS).</p> </li> <li> <p>If the coding problem is around a Singly Linked List, and If you are stuck in traversals logic, then try to use either Two Pointers or Slow/Fast Pointers.</p> </li> <li> <p>If the coding problem has a recursive solution but it's hard to visualize/code, try using a Stack data structure with a loop.</p> </li> <li> <p>If the coding problem revolves around iterating an array, and takes O(N\u00b2) time complexity, O(1) space complexity then try to use a HashMap/HashSet. It makes the algorithm faster with O(N) time complexity but takes more space with O(N) space complexity.</p> </li> <li> <p>If the coding problem revolves around iterating an array and takes O(N\u00b2) time complexity, and O(1) space complexity then try to sort the array. It makes the algorithm faster with O(N log N) time complexity and O(1) space complexity.</p> </li> <li> <p>If the coding problem requires optimization(e.g., maximization or minimization) around the recursive the solution, there could be a possibility that dynamic programming can be used.</p> </li> <li> <p>If the coding problem has a group of strings or some manipulation/find/storing needs to be done around the substring, there is a high possibility that either Tries or HashMap can be used.</p> </li> </ol> <p>Golden Rules</p> <p></p>"},{"location":"glossary/strategies/#observations","title":"Observations","text":"<ol> <li> <p>Collectively 8 and 9 suggests</p> <p>For a problem involving arrays, if there exists a solution in O(n<sup>2</sup>) time and O(1) space, there must exist two other solutions :</p> <ol> <li> <p>Using a HashMap or a Set for O(n) time and O(n) space,</p> </li> <li> <p>Using sorting for O(n log n) time and O(1) space.</p> </li> </ol> </li> <li> <p>Every recursive solution can be converted to an iterative solution using a Stack.</p> </li> <li> <p>If we need to try all combinations (or permutations) of the input, we can either use recursive Backtracking or iterative Breadth-First Search</p> </li> </ol>"},{"location":"glossary/strategies/#data-structures-use-case","title":"Data Structures Use Case","text":"<ul> <li> <p>The best data structure that comes to mind to find the smallest number among a set of \u2018K\u2019 numbers is a Heap.</p> </li> <li> <p>If we need to find some common substring among a set of strings, we will be using a HashMap or a Trie.</p> </li> <li> <p>If we need to search/manipulate a bunch of strings, Trie will be the best data structure.</p> </li> </ul>"},{"location":"glossary/strategies/#problem-solving-techniques","title":"Problem Solving Techniques","text":"<p>1.Two Pointer Technique:</p> <p>This technique is commonly applied on sorted arrays or linked lists to find pairs or reverse elements. It is an ideal strategy when managing elements with pair relationships.</p> <p>2.Prefix Sums</p> <p>A prefix sum is a technique used to calculate the running sum of the array up until a given index</p> <p>3.Sliding Window:</p> <p>This pattern is used to track a subset of data within a larger dataset. It's particularly useful in array or string problems when you need to maintain a 'window' of elements satisfying a certain condition.</p> <p>4.Fast &amp; Slow Pointer OR Floyd\u2019s Cycle Detection OR Tortoise and Hare algorithm:</p> <p>It uses two pointers - slow and fast. The fast pointer moves twice as fast as the slow pointer.</p> <p>Used in linked list or array problems, this pattern is ideal for detecting cycles or finding a midpoint.</p> <p>5.Merge Intervals:</p> <p>Use this pattern to deal with overlapping intervals, helping to create a more organized and efficient structure.</p> <p>6.Cyclic Sort:</p> <p>Employed when you need to sort numbers within a defined range, it provides a neat way to ensure ordered data.</p> <p>7.Linked List Reversal:</p> <p>If you need to reverse a linked list in-place, this is the pattern to use.</p> <p>Refers to completely reversing the pointers of the linked list.</p> <p>8.Breadth First Search:</p> <p>Perfect for traversing a tree level-by-level, providing a comprehensive overview of all nodes.</p> <p>9.Depth First Search:</p> <p>This pattern allows you to traverse a tree or graph using depth as the main factor.</p> <p>10.Two Heaps:</p> <p>Ideal when dealing with situations that require access to both the smallest and largest elements simultaneously.</p> <p>The root of the max heap will always be &lt;= than the root of the min heap.</p> <p>11.Backtracking:</p> <p>Useful in solving problems related to subsets, permutations and combinations.</p> <p>12.Modified Binary Search:</p> <p>An adaptation of the binary search for situations where a standard binary search doesn't apply.</p> <p>13.Top 'K' Elements:</p> <p>This pattern is beneficial for problems that require identifying the top or bottom 'k' elements in a set.</p> <p>14.K-way Merge:</p> <p>Employ this pattern to merge K sorted lists or arrays efficiently.</p> <p>15.0/1 Knapsack (Dynamic Programming):</p> <p>This dynamic programming pattern is often used for optimization problems.</p> <p>16.Topological Sort (Graph):</p> <p>Useful in finding a linear ordering of vertices in a directed acyclic graph (DAG).</p> <p>17.Kadane\u2019s Algorithm (Dynamic Programming):</p> <p>It's an optimal solution for the maximum subarray problem.</p> <p>18.Longest Common Subsequence/ Substring (Dynamic Programming):</p> <p>This pattern is handy when finding the longest common subsequence or substring in two strings or arrays.</p> <p>19.Union Find (Disjoint Set):</p> <p>A data structure used to maintain disjointed sets and is useful for network connectivity problems.</p> <p>20.Trie (Prefix Tree):</p> <p>Ideal for efficient retrieval of keys in a dataset of strings. It's commonly used for features like autocomplete or spell check.</p> <p>21. Monotonic Stack:</p> <p>Monotonic stack is a stack that maintains its elements in increasing or decreasing order. </p> <p>22. Memoization</p> <p>Refers to a dynamic programming technique where you start from the final problem and recursively break it into smaller subproblems (often performed with recursion).</p> <p>23. Tabulation</p> <p>It builds the solution from the base case all the way up to the final solution.</p> <p>24. Multi-Source BFS</p> <p>A variation of the classic Breadth-First Search, but instead of starting from one node, it starts from multiple sources simultaneously.</p>"},{"location":"glossary/style-guide/","title":"Style Guide","text":"Akhil Singh Chauhan                          Creator"},{"location":"glossary/style-guide/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Class: UpperCamelCase</li> <li>Function: lowerCamelCase</li> <li>Variable: lower_snake_case</li> <li>Constant: UPPER_SNAKE_CASE</li> </ul>"},{"location":"glossary/style-guide/#example","title":"Example","text":"Python <pre><code># Class\nclass YourClass:\n  pass\n\n# Function\ndef yourFunction(param: int) -&gt; None:\n  pass\n\n# Variable\nyour_variable = 0\n\n# Constant\nK_MOD = 1_000_000_009\n</code></pre>"},{"location":"optimizations/1/","title":"1. Mixed Integer Programming","text":"","tags":["MIP","LP"]},{"location":"optimizations/1/#1-mixed-integer-programming","title":"1. Mixed Integer Programming","text":"<p>Easy</p>","tags":["MIP","LP"]},{"location":"optimizations/1/#description","title":"Description","text":"<p>Formulate and solve the following simple MIP model:</p> <pre><code>Maximize\n    x + y + 2z\n\nsubject to constraints\n    x + 2y + 3z &lt;= 4\n    x +  y      &gt;= 1\n    x, y, z binary\n</code></pre>","tags":["MIP","LP"]},{"location":"optimizations/1/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","LP"]},{"location":"optimizations/1/#results","title":"Results","text":"View Result <pre><code>Objective value: 3.0\nx: 1.0\ny: 0.0\nz: 1.0\n</code></pre>","tags":["MIP","LP"]},{"location":"optimizations/1/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","LP"]},{"location":"optimizations/2/","title":"2. Mermaid Examples","text":"<pre><code>flowchart LR\n\n    classDef smallNod2 fill:#f9f,stroke:#333,stroke-width:2px,width:500px,height:500px,font-size:260pt;\n\n    A((A)):::smallNode2\n    B((B)):::smallNode2\n    C((C)):::smallNode2\n\n    A---|This is the text|B\n    A--&gt;|text1|B\n    A-- text2 --&gt;B\n    A ----|text3| B\n    A -- text4 --&gt; B -- text1 --&gt; C\n    A-- This is the text6! ---B\n    B &lt;--text2--&gt; C\n    B e1@==&gt; C\n    e1@{ animate: true, animation: slow }</code></pre> <pre><code>%%{init: { 'flowchart': { 'curve': 'linear','htmlLabels': true } } }%%\ngraph LR\n    classDef smallNode fill:#f9f,stroke:#333,stroke-width:2px;\n\n    style 1 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 2 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 3 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 4 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 5 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 6 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 7 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 8 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n\n    1((\"  1  \"))\n    2((\"  2  \"))\n    3((3))\n    4((4))\n    5((5))\n    6((6))\n    7((7))\n    8((8))\n\n    1----|30| 2\n    1---|24| 4\n    1----|25| 5\n\n    2----|27| 3\n    2---|28| 4\n    2----|27| 6\n\n    3----|30| 7\n    3-----|26| 6\n\n    4---|29| 5\n    4---|21| 6\n\n    5---|30| 6\n    5-----|30| 8\n\n    6---|28| 7\n    6---|36| 8\n\n    7-----|25| 8</code></pre> <pre><code>flowchart LR\n  A e4@==&gt; B\n  classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite;\n  class e4 animate</code></pre>"},{"location":"optimizations/2/#depot-locations","title":"Depot Locations","text":"<pre><code>flowchart LR\n    D1[\"Depot 1\"]\n    D2[\"Depot 2\"]\n    D3[\"Depot 3\"]\n    D4[\"Depot 4\"]\n    D5[\"Depot 5\"]\n    D6[\"Depot 6\"]\n    D7[\"Depot 7\"]\n    D8[\"Depot 8\"]\n    D9[\"Depot 9\"]\n    D10[\"Depot 10\"]\n    D11[\"Depot 11\"]\n    D12[\"Depot 12\"]\n    C1[\"Customer 1\"]\n    C2[\"Customer 2\"]\n    C3[\"Customer 3\"]\n    C4[\"Customer 4\"]\n    C5[\"Customer 5\"]\n    C6[\"Customer 6\"]\n    C7[\"Customer 7\"]\n    C8[\"Customer 8\"]\n    C9[\"Customer 9\"]\n    C10[\"Customer 10\"]\n    C11[\"Customer 11\"]\n    C12[\"Customer 12\"]\n    D1 ---&gt;|5.0 tons| C2\n    D1 ---&gt;|75.0 tons| C3\n    D1 ---&gt;|100.0 tons| C4\n    D1 ---&gt;|120.0 tons| C12\n    D5 ---&gt;|120.0 tons| C1\n    D5 ---&gt;|40.0 tons| C2\n    D8 ---&gt;|35.0 tons| C2\n    D8 ---&gt;|100.0 tons| C6\n    D8 ---&gt;|85.0 tons| C10\n    D9 ---&gt;|110.0 tons| C5\n    D9 ---&gt;|65.0 tons| C10\n    D9 ---&gt;|95.0 tons| C11\n    D12 ---&gt;|90.0 tons| C7\n    D12 ---&gt;|60.0 tons| C8\n    D12 ---&gt;|30.0 tons| C9</code></pre>"},{"location":"optimizations/2/#dp","title":"DP","text":"<pre><code>  %%{init: {'theme': 'default', 'flowchart': {'curve': 'monotoneY'}}}%%\n  flowchart TD\n      subgraph Step1[\"Step 1: Start with Original Problem\"]\n          A[Original Problem]\n      end\n\n      subgraph Step2[\"Step 2: Check if Subproblem is Solved\"]\n          B{Is Subproblem Solved?}\n      end\n\n      subgraph Step3[\"Step 3: If No - Break into Subproblems\"]\n          C[Break Down into Subproblems]\n          D[Solve Subproblem]\n          E[Store Solution in Memory]\n      end\n\n      subgraph Step4[\"Step 4: If Yes or After Storing - Use Stored Solution\"]\n          F[Use Stored Solution]\n      end\n\n      subgraph Step5[\"Step 5: Solve Original Problem Efficiently\"]\n          G[Solve Original Problem Efficiently]\n      end\n\n      A --&gt; B\n      B -- \"No\" --&gt; C\n      C --&gt; D\n      D --&gt; E\n      E --&gt; F\n      B -- \"Yes\" --&gt; F\n      F --&gt; G\n\n      %% Animation Hints via click\n      click A \"javascript:void(0)\" \"Start with the main problem\"\n      click B \"javascript:void(0)\" \"Check if subproblem was solved\"\n      click C \"javascript:void(0)\" \"Divide into overlapping subproblems\"\n      click D \"javascript:void(0)\" \"Solve the required subproblem\"\n      click E \"javascript:void(0)\" \"Store the solution to avoid recomputation\"\n      click F \"javascript:void(0)\" \"Reuse stored result\"\n      click G \"javascript:void(0)\" \"Problem solved efficiently!\"</code></pre>"},{"location":"optimizations/2/#recursion","title":"Recursion","text":"<pre><code>%%{init: {\"themeVariables\": {\"fontSize\":\"18px\"}, \"flowchart\": {\"curve\": \"monotoneY\", \"nodeSpacing\": 60, \"rankSpacing\": 50, \"htmlLabels\": true, \"useMaxWidth\": true, \"animate\": true}} }%%\nflowchart LR\n    Start((Start)):::start --&gt; CallFunc{\"Is Base Case?\"}:::decision\n    CallFunc -- Yes --&gt; BaseCase([\"Return Result (Base Case)\"]):::endClass\n    CallFunc -- No --&gt; Recurse[\"Call function&lt;br&gt;again with&lt;br&gt;simpler input\"]:::recurse\n    Recurse -- Recursive Call --&gt; CallFunc\n    BaseCase --&gt; Output[\"Result unwinds&lt;br&gt;back through calls\"]:::output\n\n    classDef start fill:#9eebcf,stroke:#054c38,stroke-width:2px;\n    classDef decision fill:#ffd366,stroke:#e09f3e,stroke-width:2px;\n    classDef recurse fill:#a0c4ff,stroke:#19388a,stroke-width:2px,font-style:italic;\n    classDef endClass fill:#bdf7b7,stroke:#24581c,stroke-width:2px;\n    classDef output fill:#e9b3fd,stroke:#612796,stroke-width:2px,font-style:italic;</code></pre>"},{"location":"optimizations/2/#research-learning-resources","title":"Research, Learning Resources","text":"<ul> <li>Reference 1</li> <li>Reference 2</li> </ul>"},{"location":"optimizations/3/","title":"3. Composing flight crews","text":"","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#3-composing-flight-crews","title":"3. Composing flight crews","text":"<p>Ardous</p>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#description","title":"Description","text":"<p>During the Second World War the Royal Air Force (<code>RAF</code>) had many foreign pilots speaking different languages and more or less trained on the different types of aircraft. The <code>RAF</code> had to form pilot/co-pilot pairs (<code>crews</code>) for every plane with a compatible language and a sufficiently good knowledge of the aircraft type. In our example there are eight pilots. In the following table every pilot is characterized by a mark between <code>0 (worst)</code> and <code>20 (best)</code> for his language skills (in <code>English</code>, <code>French</code>, <code>Dutch</code>, and <code>Norwegian</code>), and for his experience with different two-seater aircraft (<code>reconnaissance</code>, <code>transport</code>, <code>bomber</code>, <code>fighterbomber</code>, and <code>supply planes</code>).</p> Pilot 1 2 3 4 5 6 7 8 Language English 20 14 0 13 0 0 8 8 French 12 0 0 10 15 20 8 9 Dutch 0 20 12 0 8 11 14 12 Norwegian 0 0 0 0 17 0 0 16 Plane type Reconnaissance 1 8 12 5 0 0 8 0 Transport 10 0 9 14 15 8 12 13 Bomber 0 17 0 11 13 10 0 0 Fighter Bomber 0 0 14 0 0 12 16 0 Supply plane 0 0 0 0 12 18 0 18 <p>Table 3.1 Ratings of pilots</p> <p>A valid flight crew consists of two pilots that both have each at least <code>10/20</code> for the same language and <code>10/20</code> on the same aircraft type.</p> <p>Question 1: Is it possible to have all pilots fly?</p> <p>Subsequently, we calculate for every valid flight crew the sum of their scores for every aircraft type for which both pilots are rated at least 10/20. This allows us to define for every crew the maximum score among these marks. For example, pilots 5 and 6 have marks 13 and 10 on bombers and 12 and 18 on supply planes. The score for this crew is therefore max(13 + 10, 12 + 18) = 30.</p> <p>Question 2: Which is the set of crews with maximum total score?</p>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#results","title":"Results","text":"View Result <pre><code>Objective Value: 4\nArc (1,2): 30\nArc (3,7): 30\nArc (4,5): 29\nArc (6,8): 36\nCrew Score 125.0\n</code></pre>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#answer","title":"Answer \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/4/","title":"4. N Queen","text":"","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#4-n-queen","title":"4. N Queen","text":"<p>Ardous</p>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#description","title":"Description","text":"<p>The N-Queens problem is a classic constraint satisfaction problem in computer science and mathematics. Given an <code>N x N</code> chessboard, the challenge is to place <code>N</code> queens such that no two queens attack each other. Queens can attack horizontally, vertically, and diagonally.</p> <p></p> <p>Constraints:</p> <ul> <li><code>1 &lt;= N &lt;= 20</code></li> <li>Each queen must be placed such that no two queens can attack each other</li> </ul>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#results","title":"Results","text":"View Result <pre><code>For N = 8: 92 solutions found\nFor N = 12: 14200 solutions found\nFor N = 16: 14772512 solutions found\n\nExample solution for N = 8:\nQueen positions: [(1,1), (2,5), (3,8), (4,6), (5,3), (6,7), (7,2), (8,4)]\n</code></pre> <p>Board visualization: <pre><code>block-beta\n    columns 8\n    Q1[\"\u265b\"]:1\n    E2[\" \"]:1\n    E3[\" \"]:1\n    E4[\" \"]:1\n    E5[\" \"]:1\n    E6[\" \"]:1\n    E7[\" \"]:1\n    E8[\" \"]:1\n\n    F1[\" \"]:1\n    F2[\" \"]:1\n    F3[\" \"]:1\n    F4[\" \"]:1\n    Q2[\"\u265b\"]:1\n    F6[\" \"]:1\n    F7[\" \"]:1\n    F8[\" \"]:1\n\n    G1[\" \"]:1\n    G2[\" \"]:1\n    G3[\" \"]:1\n    G4[\" \"]:1\n    G5[\" \"]:1\n    G6[\" \"]:1\n    G7[\" \"]:1\n    Q3[\"\u265b\"]:1\n\n    H1[\" \"]:1\n    H2[\" \"]:1\n    H3[\" \"]:1\n    H4[\" \"]:1\n    H5[\" \"]:1\n    Q4[\"\u265b\"]:1\n    H7[\" \"]:1\n    H8[\" \"]:1\n\n    I1[\" \"]:1\n    I2[\" \"]:1\n    Q5[\"\u265b\"]:1\n    I4[\" \"]:1\n    I5[\" \"]:1\n    I6[\" \"]:1\n    I7[\" \"]:1\n    I8[\" \"]:1\n\n    J1[\" \"]:1\n    J2[\" \"]:1\n    J3[\" \"]:1\n    J4[\" \"]:1\n    J5[\" \"]:1\n    J6[\" \"]:1\n    Q6[\"\u265b\"]:1\n    J8[\" \"]:1\n\n    K1[\" \"]:1\n    Q7[\"\u265b\"]:1\n    K3[\" \"]:1\n    K4[\" \"]:1\n    K5[\" \"]:1\n    K6[\" \"]:1\n    K7[\" \"]:1\n    K8[\" \"]:1\n\n    L1[\" \"]:1\n    L2[\" \"]:1\n    L3[\" \"]:1\n    Q8[\"\u265b\"]:1\n    L5[\" \"]:1\n    L6[\" \"]:1\n    L7[\" \"]:1\n    L8[\" \"]:1\n\n    classDef queen fill:#ff6b6b,stroke:#333,stroke-width:2px,color:#fff\n    classDef empty fill:#f9f9f9,stroke:#ddd,stroke-width:1px\n\n    class Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8 queen</code></pre></p>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#answer","title":"Answer \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/5/","title":"5. GraphViz Examples","text":""},{"location":"optimizations/5/#example-1","title":"Example 1","text":"<ol> <li><code>splines=false</code> doesn't work well with labels - it often causes unexpected behavior</li> <li><code>splines=line</code> is better for straight edges with labels</li> <li>The layout engine (dot, neato, fdp, etc.) significantly affects how edges are drawn</li> <li>Increasing <code>nodesep</code> and <code>ranksep</code> gives more space for straight edges</li> <li>Using <code>labelfloat=true</code> can help position labels better</li> </ol> <p>G11221--2441--4551--5332--32--4662--63--6773--74--54--65--6885--86--76--87--825</p> <ul> <li><code>nodesep</code> for horizontal spacing</li> <li><code>ranksep</code> for more vertical spacing</li> <li><code>len</code> values for longer individual edges</li> </ul>"},{"location":"optimizations/5/#example-2","title":"Example 2","text":"<p>G11221--230441--424551--5252--428332--327662--6274--5294--6215--630885--8303--626773--7306--7286--8367--825</p>"},{"location":"optimizations/5/#depot-transactions","title":"Depot Transactions","text":"<p>DepotTransactionsD1Depot 1C2Customer 2D1-&gt;C25.0 tonsC3Customer 3D1-&gt;C375.0 tonsC4Customer 4D1-&gt;C4100.0 tonsC12Customer 12D1-&gt;C12120.0 tonsD2Depot 2D3Depot 3D4Depot 4D5Depot 5C1Customer 1D5-&gt;C1120.0 tonsD5-&gt;C240.0 tonsD6Depot 6D7Depot 7D8Depot 8D8-&gt;C235.0 tonsC6Customer 6D8-&gt;C6100.0 tonsC10Customer 10D8-&gt;C1085.0 tonsD9Depot 9C5Customer 5D9-&gt;C5110.0 tonsD9-&gt;C1065.0 tonsC11Customer 11D9-&gt;C1195.0 tonsD10Depot 10D11Depot 11D12Depot 12C7Customer 7D12-&gt;C790.0 tonsC8Customer 8D12-&gt;C860.0 tonsC9Customer 9D12-&gt;C930.0 tons</p>"},{"location":"optimizations/5/#research-learning-resources","title":"Research, Learning Resources","text":"<ul> <li>Reference 1</li> <li>Reference 2</li> <li>Reference 3</li> <li>Reference 4</li> <li>Reference 5</li> <li>Reference 6</li> <li>Reference 7</li> <li>Plugin Reference 1</li> <li>Plugin Reference 2</li> <li>Plugin Reference 3</li> <li>Plugin Reference 4</li> <li>Graph Reference</li> </ul>"},{"location":"optimizations/6/","title":"6. Depot Location","text":"","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#6-depot-location","title":"6. Depot Location","text":"<p>Ardous</p>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#description","title":"Description","text":"<p>A large company wishes to open new depots to deliver to its sales centers. Every new set-up of a depot has a fixed cost. Goods are delivered from a depot to the sales centers close to the site. Every delivery has a cost that depends on the distance covered. The two sorts of cost are quite different: set-up costs are capital costs which may usually be written off over several years, and transport costs are operating costs. A detailed discussion of how to combine these two costs is beyond the scope of this scenario \u2014 we assume here that they have been put on some comparable basis, perhaps by taking the costs over a year.</p> <p>There are 12 sites available for the construction of new depots and 12 sales centers need to receive deliveries from these depots.</p> <p>The following Table 6.1 gives the costs (in thousand $) of satisfying the entire demand of each customer (sales center) from a depot (not the unit costs). So, for instance, the cost per unit of supplying customer 9 (who has a total demand of 30 tonnes according to Table 6.3) from depot 1 is $60000/30t, i.e. $2000/t. Certain deliveries that are impossible are marked with the infinity symbol \\(\u221e\\).</p> <p>Table 6.1: Delivery costs for satisfying entire demand of customers</p> Customer Depot 1 2 3 4 5 6 7 8 9 10 11 12 1 100 80 50 50 60 100 120 90 60 70 65 110 2 120 90 60 70 65 110 140 110 80 80 75 130 3 140 110 80 80 75 130 160 125 100 100 80 150 4 160 125 100 100 80 150 190 150 130 \u221e \u221e \u221e 5 190 150 130 \u221e \u221e \u221e 200 180 150 \u221e \u221e \u221e 6 200 180 150 \u221e \u221e \u221e 100 80 50 50 60 100 7 100 80 50 50 60 100 120 90 60 70 65 110 8 120 90 60 70 65 110 140 110 80 80 75 130 9 140 110 80 80 75 130 160 125 100 100 80 150 10 160 125 100 100 80 150 190 150 130 \u221e \u221e \u221e 11 190 150 130 \u221e \u221e \u221e 200 180 150 \u221e \u221e \u221e 12 200 180 150 \u221e \u221e \u221e 100 80 50 50 60 100 <p>In addition, for every depot we have the following information: the fixed cost for constructing the depot that needs to be included into the objective function and its capacity limit, all listed in Table 6.2</p> <p>Table 6.2: Fix costs and capacity limits of the depot locations</p> Depot 1 2 3 4 5 6 7 8 9 10 11 12 Cost(k$) 3500 9000 10000 4000 3000 9000 9000 3000 4000 10000 9000 3500 Capacity(t) 300 250 100 180 275 300 200 220 270 250 230 180 <p>The quantities demanded by the sales centers (customers), are summarized in the following table.</p> <p>Table 6.3: Demand data</p> Customer 1 2 3 4 5 6 7 8 9 10 11 12 Demand(t) 120 80 75 100 110 100 90 60 30 150 95 120 <p>In every case, the demand of a customer needs to be satisfied but a sales center may be delivered to from several depots.</p> <p>Which depots should be opened to minimize the total cost of construction and of delivery, whilst satisfying all demands?</p>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#results","title":"Results","text":"View Result <pre><code>Total Minimum Cost = $18103\n</code></pre>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#depot-transactions","title":"Depot Transactions","text":"<pre><code>flowchart TD\n    D1[\"Depot 1\"]\n    D2[\"Depot 2\"]\n    D3[\"Depot 3\"]\n    D4[\"Depot 4\"]\n    D5[\"Depot 5\"]\n    D6[\"Depot 6\"]\n    D7[\"Depot 7\"]\n    D8[\"Depot 8\"]\n    D9[\"Depot 9\"]\n    D10[\"Depot 10\"]\n    D11[\"Depot 11\"]\n    D12[\"Depot 12\"]\n    C1[\"Customer 1\"]\n    C2[\"Customer 2\"]\n    C3[\"Customer 3\"]\n    C4[\"Customer 4\"]\n    C5[\"Customer 5\"]\n    C6[\"Customer 6\"]\n    C7[\"Customer 7\"]\n    C8[\"Customer 8\"]\n    C9[\"Customer 9\"]\n    C10[\"Customer 10\"]\n    C11[\"Customer 11\"]\n    C12[\"Customer 12\"]\n\n    D1 e1@==&gt;|5.0 tons| C2\n    e1@{ animate: true, animation: slow }\n    D1 e2@==&gt;|75.0 tons| C3\n    e2@{ animate: true, animation: slow }\n    D1 e3@==&gt;|100.0 tons| C4\n    e3@{ animate: true, animation: slow }\n    D1 e4@==&gt;|120.0 tons| C12\n    e4@{ animate: true, animation: slow }\n    D5 e5@==&gt;|120.0 tons| C1\n    e5@{ animate: true, animation: slow }\n    D5 e6@==&gt;|40.0 tons| C2\n    e6@{ animate: true, animation: slow }\n    D8 e7@==&gt;|35.0 tons| C2\n    e7@{ animate: true, animation: slow }\n    D8 e8@==&gt;|100.0 tons| C6\n    e8@{ animate: true, animation: slow }\n    D8 e9@==&gt;|85.0 tons| C10\n    e9@{ animate: true, animation: slow }\n    D9 e10@==&gt;|110.0 tons| C5\n    e10@{ animate: true, animation: slow }\n    D9 e11@==&gt;|65.0 tons| C10\n    e11@{ animate: true, animation: slow }\n    D9 e12@==&gt;|95.0 tons| C11\n    e12@{ animate: true, animation: slow }\n    D12 e13@==&gt;|90.0 tons| C7\n    e13@{ animate: true, animation: slow }\n    D12 e14@==&gt;|60.0 tons| C8\n    e14@{ animate: true, animation: slow }\n    D12 e15@==&gt;|30.0 tons| C9\n    e15@{ animate: true, animation: slow }</code></pre>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#answer","title":"Answer \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/7/","title":"More Optimization Problems Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/1/","title":"1. Two Sum","text":"","tags":["Array","Hash Table"]},{"location":"problems/1/#1-two-sum","title":"1. Two Sum","text":"<p>Easy</p>","tags":["Array","Hash Table"]},{"location":"problems/1/#description","title":"Description","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0, 1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [3,2,4], target = 6\nOutput: [1, 2]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [3,3], target = 6\nOutput: [0, 1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> <li><code>-109 &lt;= target &lt;= 109</code></li> <li><code>Only one valid answer exists.</code></li> </ul> <p>Follow-up: Can you come up with an algorithm that is less than \\(O(n^2)\\) time complexity?</p>","tags":["Array","Hash Table"]},{"location":"problems/1/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["Array","Hash Table"]},{"location":"problems/1/#approach-1-hash-table","title":"Approach 1: Hash Table","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> <p>Algorithm</p> <p>We can use a hash table <code>seen</code> to store the array values and their corresponding index.</p> <p>Traverse the array <code>nums</code>, when you find <code>target - nums[i]</code> in the hash table, it means that the target value is found, Return the index of <code>target - nums[i]</code> (\\(seen[nums[i]]\\)) and \\(i\\).</p> <p>The time complexity is \\(O(n)\\) and the space complexity is \\(O(n)\\). Where \\(n\\) is the length of the input array <code>nums</code>.</p> PythonJavaCC++GoTypeScriptRustJavaScriptC#PHPScalaSwiftRubyKotlinNimCangjie <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        seen = {} #map elements with their indices { v: i}\n        for i, v in enumerate(nums):\n            num = target - v\n            if num in seen:\n                return [seen[num], i]\n            seen[v] = i\n</code></pre> <pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        return null;\n    }\n}\n</code></pre> <pre><code>/**\n* Note: The returned array must be malloced, assume caller calls free().\n*/\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n\n}\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; indices;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            int complement = target - nums[i];\n            if (indices.count(complement)) {\n                return {indices[complement], i};\n            }\n            indices[nums[i]] = i;\n        }\n        return {};\n    }\n};\n</code></pre> <pre><code>func twoSum(nums []int, target int) []int {\n}\n</code></pre> <pre><code>function twoSum(nums: number[], target: number): number[] {\n    const seen = new Map();\n    for (let i = 0; i &lt; nums.length; i++) {\n        const diff = target - nums[i];\n        if (seen.has(diff)) {\n            return [seen.get(diff), i];\n        }\n        seen.set(nums[i], i);\n    }\n    return [];\n}\n</code></pre> <pre><code>impl Solution {\n    pub fn two_sum(nums: Vec&lt;i32&gt;, target: i32) -&gt; Vec&lt;i32&gt; {\n\n    }\n}\n</code></pre> <pre><code>/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n*/\n\nvar twoSum = function (nums, target) {\n\n}\n</code></pre> <pre><code>public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n    }\n}\n</code></pre> <pre><code>class Solution {\n    /**\n    * @param Integer[] $nums\n    * @param Integer $target\n    * @return Integer[]\n    */\n    function twoSum($nums, $target) {\n    }\n}\n</code></pre> <pre><code>object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n    }\n}\n</code></pre> <pre><code>class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] {\n\n    }\n}\n</code></pre> <pre><code># @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n\nend\n</code></pre> <pre><code>class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n\n    }\n}\n</code></pre> <pre><code>proc twoSum(nums: seq[int], target: int): seq[int] =\n</code></pre> <pre><code>class Solution {\n    func twoSum(nums: Array&lt;Int64&gt;, target: Int64): Array&lt;Int64&gt; {\n\n    }\n}\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table"]},{"location":"problems/100/","title":"100. Same Tree","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/100/#100-same-tree","title":"100. Same Tree","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/100/#description","title":"Description","text":"<p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p> <p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p> <p>Example 1:</p> <pre><code>Input: p = [1,2,3], q = [1,2,3]\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: p = [1,2], q = [1,null,2]\nOutput: false\n</code></pre> <p></p> <p>Example 3:</p> <pre><code>Input: p = [1,2,1], q = [1,1,2]\nOutput: false\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>The number of nodes in both trees is in the range [0, 100].</code></li> <li><code>-10\u2074 &lt;= Node.val &lt;= 10\u2074</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/100/#solutions","title":"Solutions \ud83d\udd13","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/100/#approach-dfs","title":"Approach: DFS","text":"<p> Time complexity: \\(O(min(m,n))\\)</p> <p> Space complexity: \\(O(min(m,n))\\)</p> <p>Algorithm</p> <p>We can use the DFS recursive method to solve this problem.</p> <ul> <li>First, determine whether the root nodes of the two binary trees are the same.</li> <li>If both root nodes are null, then the two binary trees are the same.</li> <li>If only one of the root nodes is null, then the two binary trees are definitely different.</li> <li>If both root nodes are not null, then determine whether their values are the same.</li> <li>If they are not the same, then the two binary trees are definitely different.</li> <li>If they are the same, then determine whether the left subtrees of the two binary trees are the same and whether the right subtrees are the same.</li> </ul> <p>The two binary trees are the same only when all the above conditions are met.</p> <p>The time complexity is \\(O(min(m,n))\\), and the space complexity is \\(O(min(m,n))\\). Here, \\(m\\) and \\(n\\) are the number of nodes in the two binary trees, respectively.</p> <p>The space complexity mainly depends on the number of layers of recursive calls, which will not exceed the number of nodes in the smaller binary tree.</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/100/#way-1","title":"Way 1:","text":"Python <pre><code># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -&gt; bool:\n        if p==q:                                                                        #Step 3\n            return True\n        if not p or not q or p.val!=q.val:                                              #Step 2\n            return False\n        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)      #Step 1\n</code></pre>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/100/#way-2-another-way-of-writing-dfs","title":"Way 2 : Another way of writing DFS","text":"Python <pre><code>class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -&gt; bool:\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!=q.val:\n            return False\n        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n</code></pre>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/100/#way-3-another-way-of-writing-dfs","title":"Way 3 : Another way of writing DFS","text":"Python <pre><code>class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -&gt; bool:\n        if not p or not q:\n            return p==q # covers: p=none and q!=none, q=none and p!=none, both none\n        return p.val==q.val and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n</code></pre> <p>Stick to DFS appraoch</p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/1004/","title":"1004. Max Consecutive Ones III","text":"","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/1004/#1004-max-consecutive-ones-iii","title":"1004. Max Consecutive Ones III","text":"<p>Medium</p>","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/1004/#description","title":"Description","text":"<p>Given a binary array <code>nums</code> and an integer <code>k</code>, return the maximum number of consecutive <code>1</code>'s in the array if you can flip at most <code>k</code> <code>0</code>'s.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\nOutput: 6\nExplanation: [1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\nOutput: 10\nExplanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>0 &lt;= k &lt;= nums.length</code></li> </ul>","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/1004/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/101/","title":"101. Symmetric Tree","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/101/#101-symmetric-tree","title":"101. Symmetric Tree","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/101/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).</p> <p>Example 1:</p> <pre><code>Input: root = [1,2,2,3,4,4,3]\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: root = [1,2,2,null,3,null,3]\nOutput: false\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p>Follow up: Could you solve it both recursively and iteratively?</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/101/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/1011/","title":"1011. Capacity To Ship Packages Within D Days","text":"","tags":["Array","Binary Search"]},{"location":"problems/1011/#1011-capacity-to-ship-packages-within-d-days","title":"1011. Capacity To Ship Packages Within D Days","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/1011/#description","title":"Description","text":"<p>A conveyor belt has packages that must be shipped from one port to another within <code>days</code> days.</p> <p>The i<sup>th</sup> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p> <p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>days</code> days.</p> <p>Example 1:</p> <pre><code>Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n</code></pre> <p>Example 2:</p> <pre><code>Input: weights = [3,2,2,4,1,4], days = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n</code></pre> <p>Example 3:</p> <pre><code>Input: weights = [1,2,3,1,1], days = 4\nOutput: 3\nExplanation:\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= days &lt;= weights.length &lt;= 5 * 10\u2074</code></li> <li><code>1 &lt;= weights[i] &lt;= 500</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/1011/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/102/","title":"102. Binary Tree Level Order Traversal","text":"","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/102/#102-binary-tree-level-order-traversal","title":"102. Binary Tree Level Order Traversal","text":"<p>Easy</p>","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/102/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, return (the level order traversal of its nodes' values.) (i.e., from left to right, level by level).</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [3,9,20,null,null,15,7]\nOutput: [[3], [9, 20], [15, 7]]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [1]\nOutput: [[1]]\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 2000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/102/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/1024/","title":"1024. Video Stitching","text":"","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/1024/#1024-video-stitching","title":"1024. Video Stitching","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/1024/#description","title":"Description","text":"<p>You are given a series of video clips from a sporting event that lasted <code>time</code> seconds. These video clips can be overlapping with each other and have varying lengths.</p> <p>Each video clip is described by an array <code>clips</code> where clips[i] = [start<sub>i</sub>, end<sub>i</sub>] indicates that the i<sup>th</sup> clip started at start<sub>i</sub> and ended at end<sub>i</sub>.</p> <p>We can cut these clips into segments freely.</p> <ul> <li>For example, a clip <code>[0, 7]</code> can be cut into segments <code>[0, 1] + [1, 3] + [3, 7]</code>.</li> </ul> <p>Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event <code>[0, time]</code>. If the task is impossible, return <code>-1</code>.</p> <p>Example 1:</p> <pre><code>Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\nOutput: 3\nExplanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n</code></pre> <p>Example 2:</p> <pre><code>Input: clips = [[0,1],[1,2]], time = 5\nOutput: -1\nExplanation: We cannot cover [0,5] with only [0,1] and [1,2].\n</code></pre> <p>Example 3:</p> <pre><code>Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9\nOutput: 3\nExplanation: We can take clips [0,4], [4,7], and [6,9].\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= clips.length &lt;= 100</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 100</code></li> <li><code>1 &lt;= time &lt;= 100</code></li> </ul>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/1024/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/103/","title":"103. Binary Tree Zigzag Level Order Traversal","text":"","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/103/#103-binary-tree-zigzag-level-order-traversal","title":"103. Binary Tree Zigzag Level Order Traversal","text":"<p>Easy</p>","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/103/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [3,9,20,null,null,15,7]\nOutput: [[3], [20, 9], [15, 7]]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [1]\nOutput: [[1]]\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/103/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Breadth-First Search","Binary Tree"]},{"location":"problems/104/","title":"104. Maximum Depth of Binary Tree","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/104/#104-maximum-depth-of-binary-tree","title":"104. Maximum Depth of Binary Tree","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/104/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, return its maximum depth. (1)</p> <ol> <li> <p></p> <ul> <li>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: root = [3,9,20,null,null,15,7]\nOutput: 3\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: root = [1,null,2]\nOutput: 2\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in the tree is in the range [0, 10\u2074].</code></li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/104/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/1046/","title":"1046. Last Stone Weight","text":"","tags":["Array","Heap (Priority Queue)"]},{"location":"problems/1046/#1046-last-stone-weight","title":"1046. Last Stone Weight","text":"<p>Easy</p>","tags":["Array","Heap (Priority Queue)"]},{"location":"problems/1046/#description","title":"Description","text":"<p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the i<sup>th</sup> stone.</p> <p>We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p> <ul> <li>If <code>x == y</code>, both stones are destroyed, and</li> <li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li> </ul> <p>At the end of the game, there is at most one stone left.</p> <p>Return the weight of the last remaining stone. If there are no stones left, return <code>0</code>.</p> <p>Example 1:</p> <pre><code>Input: stones = [2,7,4,1,8,1]\nOutput: 1\nExplanation:\nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.\n</code></pre> <p>Example 2:</p> <pre><code>Input: stones = [1]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= stones.length &lt;= 30</code></li> <li><code>1 &lt;= stones[i] &lt;= 1000</code></li> </ul>","tags":["Array","Heap (Priority Queue)"]},{"location":"problems/1046/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Heap (Priority Queue)"]},{"location":"problems/105/","title":"105. Construct Binary Tree from Preorder and Inorder Traversal","text":"","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/105/#105-construct-binary-tree-from-preorder-and-inorder-traversal","title":"105. Construct Binary Tree from Preorder and Inorder Traversal","text":"<p>Medium</p>","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/105/#description","title":"Description","text":"<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return the binary tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3, 9, 20, null, null, 15, 7]\n</code></pre> <p>Example 2:</p> <pre><code>Input: preorder = [-1], inorder = [-1]\nOutput: [-1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 3000</code></li> <li><code>inorder.length == preorder.length</code></li> <li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li> <li><code>preorder and inorder consist of unique values.</code></li> <li><code>Each value of inorder also appears in preorder.</code></li> <li><code>preorder is guaranteed to be the preorder traversal of the tree.</code></li> <li><code>inorder is guaranteed to be the inorder traversal of the tree.</code></li> </ul>","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/105/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/106/","title":"106. Construct Binary Tree from Inorder and Postorder Traversal","text":"","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/106/#106-construct-binary-tree-from-inorder-and-postorder-traversal","title":"106. Construct Binary Tree from Inorder and Postorder Traversal","text":"<p>Medium</p>","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/106/#description","title":"Description","text":"<p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return the binary tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3, 9, 20, null, null, 15, 7]\n</code></pre> <p>Example 2:</p> <pre><code>Input: inorder = [-1], postorder = [-1]\nOutput: [-1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= inorder.length &lt;= 3000</code></li> <li><code>postorder.length == inorder.length</code></li> <li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li> <li><code>inorder and postorder consist of unique values.</code></li> <li><code>Each value of postorder also appears in inorder.</code></li> <li><code>inorder is guaranteed to be the inorder traversal of the tree.</code></li> <li><code>postorder is guaranteed to be the postorder traversal of the tree.</code></li> </ul>","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/106/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"]},{"location":"problems/108/","title":"108. Convert Sorted Array to Binary Search Tree","text":"","tags":["Array","Divide and Conquer","Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/108/#108-convert-sorted-array-to-binary-search-tree","title":"108. Convert Sorted Array to Binary Search Tree","text":"<p>Easy</p>","tags":["Array","Divide and Conquer","Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/108/#description","title":"Description","text":"<p>Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced (1) binary search tree.</p> <ol> <li> <p></p> </li> </ol> <p>Example 1:</p> <p></p> <p></p> <pre><code>Input: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2074</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> <li><code>nums</code> is sorted in a strictly increasing order.</li> </ul>","tags":["Array","Divide and Conquer","Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/108/#height-balanced","title":"Height-Balanced","text":"<p>A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</p>","tags":["Array","Divide and Conquer","Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/108/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Divide and Conquer","Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/1095/","title":"1095. Find in Mountain Array","text":"","tags":["Array","Binary Search","Interactive"]},{"location":"problems/1095/#1095-find-in-mountain-array","title":"1095. Find in Mountain Array","text":"<p>Hard</p>","tags":["Array","Binary Search","Interactive"]},{"location":"problems/1095/#description","title":"Description","text":"<p>(This problem is an interactive problem.)</p> <p>You may recall that an array arr is a mountain array if and only if:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some i with <code>0 &lt; i &lt; arr.length - 1</code> such that:</li> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> <p>Given a mountain array <code>mountainArr</code>, return the minimum <code>index</code> such that <code>mountainArr.get(index) == target</code>. If such an <code>index</code> does not exist, return <code>-1</code>.</p> <p>You cannot access the mountain array directly. You may only access the array using a <code>MountainArray</code> interface:</p> <ul> <li><code>MountainArray.get(k)</code> returns the element of the array at index <code>k</code> (0-indexed).</li> <li><code>MountainArray.length()</code> returns the length of the array.</li> </ul> <p>Submissions making more than <code>100</code> calls to <code>MountainArray.get</code> will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.</p> <p>Example 1:</p> <pre><code>Input: mountainArr = [1,2,3,4,5,3,1], target = 3\nOutput: 2\nExplanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: mountainArr = [0,1,2,4,2,1], target = 3\nOutput: -1\nExplanation: 3 does not exist in the array, so we return -1.\n</code></pre> <p>Constraints:</p> <ul> <li><code>3 &lt;= mountainArr.length() &lt;= 104</code></li> <li><code>0 &lt;= target &lt;= 109</code></li> <li><code>0 &lt;= mountainArr.get(index) &lt;= 109</code></li> </ul>","tags":["Array","Binary Search","Interactive"]},{"location":"problems/1095/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Interactive"]},{"location":"problems/11/","title":"11. Container With Most Water","text":"","tags":["Array","Two Pointers","Greedy"]},{"location":"problems/11/#11-container-with-most-water","title":"11. Container With Most Water","text":"<p>Medium</p>","tags":["Array","Two Pointers","Greedy"]},{"location":"problems/11/#description","title":"Description","text":"<p>You are given an integer array <code>height</code> of length <code>n</code>. There are n vertical lines drawn such that the two endpoints of the i<sup>th</sup> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p> <p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p> <p>Return the maximum amount of water a container can store.</p> <p>Notice that you may not slant the container.</p> <p>Example 1:</p> <p></p> <pre><code>Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</code></pre> <p>Example 2:</p> <pre><code>Input: height = [1,1]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>2 &lt;= n &lt;= 10\u2075</code></li> <li><code>0 &lt;= height[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array","Two Pointers","Greedy"]},{"location":"problems/11/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Greedy"]},{"location":"problems/112/","title":"112. Path Sum","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/112/#112-path-sum","title":"112. Path Sum","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/112/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <code>true</code> if the tree has a root-to-leaf path such that adding up all the values along the path equals <code>targetSum</code>.</p> <p>A leaf is a node with no children.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There are two root-to-leaf paths in the tree:\n(1 --&gt; 2): The sum is 3.\n(1 --&gt; 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/112/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/1137/","title":"1137. N-th Tribonacci Number","text":"","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/1137/#1137-n-th-tribonacci-number","title":"1137. N-th Tribonacci Number","text":"<p>Easy</p>","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/1137/#description","title":"Description","text":"<p>The Tribonacci sequence Tn is defined as follows:</p> <p>T<sub>0</sub> = 0, T<sub>1</sub> = 1, T<sub>2</sub> = 1,</p> <p>and T<sub>n+3</sub> = T<sub>n</sub> + T<sub>n+1</sub> + T<sub>n+2</sub> for n &gt;= 0.</p> <p>Given <code>n</code>, return the value of T<sub>n</sub>.</p> <p>Example 1:</p> <pre><code>Input: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 25\nOutput: 1389537\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 37</code></li> <li>The answer is guaranteed to fit within a 32-bit integer, i.e. <code>answer &lt;= 2<sup>31</sup> - 1</code>.</li> </ul>","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/1137/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/114/","title":"114. Flatten Binary Tree to Linked List","text":"","tags":["Linked List","Stack","Tree","Depth-First Search","Binary Tree"]},{"location":"problems/114/#114-flatten-binary-tree-to-linked-list","title":"114. Flatten Binary Tree to Linked List","text":"<p>Medium</p>","tags":["Linked List","Stack","Tree","Depth-First Search","Binary Tree"]},{"location":"problems/114/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, flatten the tree into a \"linked list\":</p> <ul> <li> <p>The \"linked list\" should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</p> </li> <li> <p>The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.</p> </li> </ul> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,5,3,4,null,6]\nOutput: [1, null, 2, null, 3, null, 4, null, 5, null, 6]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [0]\nOutput: [0]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p>Follow up: Can you flatten the tree in-place (with <code>O(1)</code> extra space)?</p>","tags":["Linked List","Stack","Tree","Depth-First Search","Binary Tree"]},{"location":"problems/114/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Stack","Tree","Depth-First Search","Binary Tree"]},{"location":"problems/1143/","title":"1143. Longest Common Subsequence","text":"","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#1143-longest-common-subsequence","title":"1143. Longest Common Subsequence","text":"<p>Medium</p>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#description","title":"Description","text":"<p>Given two strings <code>text1</code> and <code>text2</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <p>For example, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code>.</p> <p>A common subsequence of two strings is a subsequence that is common to both strings.</p> <p>Example 1:</p> <pre><code>Input: text1 = \"abcde\", text2 = \"ace\"\nOutput: 3\nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n</code></pre> <p>Example 3:</p> <pre><code>Input: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> <li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li> </ul>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#approach-tabulation-bottom-up-dp","title":"Approach: Tabulation Bottom Up DP","text":"<p> Time complexity: \\(O(m \\cdot n)\\)</p> <p> Space complexity: \\(O(m \\cdot n)\\)</p> <p>Algorithm</p> <p>To solve this problem, we can use a bottom-up dynamic programming approach.</p> <p>We use a two-dimensional array, \\(dp\\), to store the results of subproblems.</p> <p>The value \\(dp[i][j]\\) represents the length of the LCS between the first \\(i\\) elements of <code>text1</code> and the first \\(j\\) elements of <code>text2</code>.</p> <p>We create a two-dimensional array, \\(dp\\) with dimensions \\((m + 1) \\times (n + 1)\\). The \u201c+1\u201d is added to accommodate the base cases where either of the arrays is empty.</p> <p>The nested loops iterate through the elements of <code>text1</code> and <code>text2</code>.</p> <p>For each pair of elements,</p> <ul> <li>If they are equal, we increment the LCS length by \\(1\\) and store it in \\(dp[i][j]\\).</li> <li>If they are not equal, we take the maximum LCS length obtained from the previous elements (either by excluding <code>text1[i]</code> or <code>text2[j]</code>) and store it in \\(dp[i][j]\\).</li> </ul> <p>Finally, we returns the value stored in the bottom-right corner of the \\(dp\\) array, which represents the length of the LCS.</p> <p>The time complexity is \\(O(m \\cdot n)\\), and the space complexity is \\(O(m \\cdot n)\\). Here, m and n are the lengths of text 1 and text2, respectively.</p>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#way1","title":"Way1","text":"Python <pre><code>class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m, n = len(text1), len(text2)\n\n        # dp[i][j] := the length of LCS(text1[0..i), text2[0..j))\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(m):\n            for j in range(n):\n                if text1[i] == text2[j]:\n                    dp[i + 1][j + 1] = 1 + dp[i][j]\n                else:\n                    dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n        return dp[m][n]\n</code></pre>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#way2-another-way-of-writing-if-we-handle-elements-from-right-to-left","title":"Way2 : Another way of writing , if we handle elements from right to left","text":"Python <pre><code>class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m, n = len(text1), len(text2)\n\n        # dp[i][j] := the length of LCS(text1[0..i), text2[0..j))\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if text1[i] == text2[j]:\n                    dp[i][j] = 1 + dp[i+1][j+1]\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n        return dp[0][0]\n</code></pre>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#approach-bottom-up-1d-dp-space-optimization","title":"Approach: Bottom Up 1D-DP, Space Optimization","text":"<p> Time complexity: \\(O(m \\cdot n)\\)</p> <p> Space complexity: \\(O(mn)\\)</p> <p>Optimization</p> <p>We notice that \\(dp[i][j]\\) is only dependent on \\(dp[i-1][j]\\) and \\(dp[i][j-1]\\) or \\(dp[i-1][j-1]\\),</p> <p>thus, we don\u2019t need to store entire 2D DP Matrix, instead, we can use only two single arrays, one for the previous row e.g. \\(dp[i-1]\\), and one of the current row \\(dp[i]\\).</p> <p>Then, we can optimise the DP solution to \\(O(n)\\) space where \\(n\\) is the less of \\(m\\) and \\(n\\) (the lengths for two arrays).</p> <p>The time complexity is \\(O(m \\cdot n)\\).</p> <p>Each iteration, we set the current row to previous row via Deep Copy.</p> Python <pre><code>from copy import deepcopy\n\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m, n = len(text1), len(text2)\n\n        dp = [0] * (n + 1)      # only allocate a row of n (text2 size)\n\n        dp_prev = deepcopy(dp)  # new array of (text2 size) to Reset prev for each row\n\n        for i in range(m):\n            for j in range(n):\n                if text1[i] == text2[j]:\n                    dp[j + 1] = 1 + dp_prev[j]\n                else:\n                    dp[j + 1] = max(dp[j], dp_prev[j + 1])\n\n            dp_prev = dp[:]\n\n        return dp[n]\n</code></pre> equivalency <pre><code>dp_prev = deepcopy(dp)\n        ||\n        ||\n        ||\ndp_prev = [0] * (n + 1)\n</code></pre>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#approach-no-memory-1d-dp-space-optimization","title":"Approach: No-Memory 1D - DP, Space Optimization","text":"Python <pre><code>class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m, n = len(text1), len(text2)\n\n        dp = [0] * (n + 1) # only allocate a row of n (text2 size)\n\n        for i in range(m):\n            prev = 0        # Reset prev for each row\n            for j in range(n):\n                cache = dp[j+1]  # Store current cell before overwriting\n                if text1[i] == text2[j]:\n                    dp[j + 1] = 1 + prev\n                else:\n                    dp[j + 1] = max(dp[j], cache)\n\n                prev = cache # Update prev here, after using it\n\n        return dp[n]\n</code></pre>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#approachtop-down-dp-recursion-memoization","title":"Approach:Top Down DP (Recursion +Memoization)","text":"<p>Algorithm</p> <p>We define \\(f[i][j]\\) as the length of the longest common subsequence of the first \\(i\\) characters of \\(text1\\) and the first \\(j\\) characters of \\(text2\\). Therefore, the answer is \\(f[m][n]\\), where \\(m\\) and \\(n\\) are the lengths of \\(text1\\) and \\(text2\\), respectively.</p> <p>If the \\(i\\)th character of \\(text1\\) and the \\(j\\)th character of \\(text2\\) are the same, then \\(f[i][j] = f[i - 1][j - 1] + 1\\); if the \\(i\\)th character of \\(text1\\) and the \\(j\\)th character of \\(text2\\) are different, then \\(f[i][j] = max(f[i - 1][j], f[i][j - 1])\\). The state transition equation is:</p> \\[ f[i][j] = \\begin{cases} f[i - 1][j - 1] + 1, &amp; \\textit{if } text1[i - 1] = text2[j - 1] \\\\ \\max(f[i - 1][j], f[i][j - 1]), &amp; \\textit{if } text1[i - 1] \\neq text2[j - 1] \\end{cases} \\] <p>The time complexity is \\(O(m \\cdot n)\\), and the space complexity is \\(O(m \\cdot n)\\). Here, \\(m\\) and \\(n\\) are the lengths of \\(text1\\) and \\(text2\\), respectively.</p>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#way1_1","title":"Way1","text":"Python <pre><code>from functools import cache\n\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m , n = len(text1) , len(text2)\n\n        @cache\n        def f( i , j):\n            if i &lt; 0 or j &lt; 0:\n                return 0\n            if text1[i] == text2[j]:\n                return 1 + f(i-1,j-1)\n            return max(f( i - 1,j), f( i, j - 1))\n        return f(m - 1, n - 1)\n</code></pre>","tags":["String","Dynamic Programming"]},{"location":"problems/1143/#way2-if-we-handle-the-numbers-from-left-to-the-right-we-have-a-similar-dp-approach","title":"Way2: If we handle the numbers from left to the right, we have a similar DP approach.","text":"Python <pre><code>class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -&gt; int:\n        m , n = len(text1) , len(text2)\n\n        @cache\n        def f(i,j):\n            if i&gt;m-1 or j&gt;n-1:\n                return 0\n            if text1[i]==text2[j]:\n                return 1 + f(i+1,j+1)\n            return max(f(i+1,j),f(i,j+1))\n        return f(0,0)\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["String","Dynamic Programming"]},{"location":"problems/118/","title":"118. Pascal's Triangle","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/118/#118-pascals-triangle","title":"118. Pascal's Triangle","text":"<p>Easy</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/118/#description","title":"Description","text":"<p>Given an integer <code>numRows</code>, return the first numRows of Pascal's triangle.</p> <p>In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:</p> <p></p> <p>Example 1:</p> <pre><code>Input: numRows = 5\nOutput: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> <p>Example 2:</p> <pre><code>Input: numRows = 1\nOutput: [[1]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= numRows &lt;= 30</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/118/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/121/","title":"121. Best Time to Buy and Sell Stock","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/121/#121-best-time-to-buy-and-sell-stock","title":"121. Best Time to Buy and Sell Stock","text":"<p>Easy</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/121/#description","title":"Description","text":"<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the i<sup>th</sup> day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p> <p>Example 1:</p> <pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 10\u2075</code></li> <li><code>0 &lt;= prices[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/121/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/122/","title":"122. Best Time to Buy and Sell Stock II","text":"","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/122/#122-best-time-to-buy-and-sell-stock-ii","title":"122. Best Time to Buy and Sell Stock II","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/122/#description","title":"Description","text":"<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the i<sup>th</sup> day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <p>Example 1:</p> <pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n</code></pre> <p>Example 3:</p> <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 3 * 10\u2074</code></li> <li><code>0 &lt;= prices[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/122/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/123/","title":"123. Best Time to Buy and Sell Stock III","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/123/#123-best-time-to-buy-and-sell-stock-iii","title":"123. Best Time to Buy and Sell Stock III","text":"<p>Hard</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/123/#description","title":"Description","text":"<p>You are given an array prices where prices[i] is the price of a given stock on the ith day.</p> <p>Find the maximum profit you can achieve. You may complete at most two transactions.</p> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p>Example 1:</p> <pre><code>Input: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n</code></pre> <p>Example 3:</p> <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 10\u2075</code></li> <li><code>0 &lt;= prices[i] &lt;= 10\u2075</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/123/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/125/","title":"125. Valid Palindrome","text":"","tags":["Two Pointers","String"]},{"location":"problems/125/#125-valid-palindrome","title":"125. Valid Palindrome","text":"<p>Easy</p>","tags":["Two Pointers","String"]},{"location":"problems/125/#description","title":"Description","text":"<p>Given a string <code>s</code>, return <code>true</code> if it is a palindrome (1), or <code>false</code> otherwise.</p> <ol> <li> <p></p> <ul> <li>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2 * 10\u2075</code></li> <li><code>s</code> consists only of printable ASCII characters.</li> </ul>","tags":["Two Pointers","String"]},{"location":"problems/125/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Two Pointers","String"]},{"location":"problems/128/","title":"128. Longest Consecutive Sequence","text":"","tags":["Array","Hash Table","Union Find"]},{"location":"problems/128/#128-longest-consecutive-sequence","title":"128. Longest Consecutive Sequence","text":"<p>Medium</p>","tags":["Array","Hash Table","Union Find"]},{"location":"problems/128/#description","title":"Description","text":"<p>Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.</p> <p>You must write an algorithm that runs in <code>O(n)</code> time.</p> <p>Example 1:</p> <pre><code>Input: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1,0,1,2]\nOutput: 3\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2079 &lt;= nums[i] &lt;= 10\u2079</code></li> </ul>","tags":["Array","Hash Table","Union Find"]},{"location":"problems/128/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Union Find"]},{"location":"problems/130/","title":"130. Surrounded Regions","text":"","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/130/#130-surrounded-regions","title":"130. Surrounded Regions","text":"<p>Medium</p>","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/130/#description","title":"Description","text":"<p>You are given an <code>m x n</code> matrix <code>board</code> containing letters <code>'X'</code> and <code>'O'</code>, capture regions that are surrounded:</p> <ul> <li>Connect: A cell is connected to adjacent cells horizontally or vertically.</li> <li>Region: To form a region connect every <code>'O'</code> cell.</li> <li>Surround: The region is surrounded with <code>'X'</code> cells if you can connect the region with <code>'X'</code> cells and none of the region cells are on the edge of the <code>board</code>.</li> </ul> <p>To capture a surrounded region, replace all <code>'O'</code>s with <code>'X'</code>s in-place within the original board. You do not need to return anything.</p> <p>Example 1:</p> <pre><code>Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n\nOutput:[[\"X\", \"X\", \"X\", \"X\"],[\"X\", \"X\", \"X\", \"X\"],[\"X\", \"X\", \"X\", \"X\"],[\"X\", \"O\", \"X\", \"X\"]]\n</code></pre> <p>Explanation:</p> <p></p> <p>In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.</p> <p>Example 2:</p> <pre><code>Input: board = [[\"X\"]]\n\nOutput: [[\"X\"]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>board[i][j] is 'X' or 'O'.</code></li> </ul>","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/130/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/1325/","title":"1325. Delete Leaves With a Given Value","text":"","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/1325/#1325-delete-leaves-with-a-given-value","title":"1325. Delete Leaves With a Given Value","text":"<p>Medium</p>","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/1325/#description","title":"Description","text":"<p>Given a binary tree <code>root</code> and an integer <code>target</code>, delete all the leaf nodes with value <code>target</code>.</p> <p>Note that once you delete a leaf node with value <code>target</code>, if its parent node becomes a leaf node and has the value <code>target</code>, it should also be deleted (you need to continue doing that until you cannot).</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,3,2,null,2,4], target = 2\nOutput: [1,null,3,null,4]\nExplanation: Leaf nodes in green with value (target = 2) are removed (Picture in left).\nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center).\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [1,3,3,3,2], target = 3\nOutput: [1, 3, null, null, 2]\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: root = [1,2,null,2,null,2], target = 2\nOutput: [1]\nExplanation: Leaf nodes in green with value (target = 2) are removed at each step.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li> <li><code>1 &lt;= Node.val, target &lt;= 1000</code></li> </ul>","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/1325/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/1326/","title":"1326. Minimum Number of Taps to Open to Water a Garden","text":"","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/1326/#1326-minimum-number-of-taps-to-open-to-water-a-garden","title":"1326. Minimum Number of Taps to Open to Water a Garden","text":"<p>Hard</p>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/1326/#description","title":"Description","text":"<p>There is a one-dimensional garden on the x-axis. The garden starts at the point <code>0</code> and ends at the point <code>n</code>. (i.e., the length of the garden is <code>n</code>).</p> <p>There are <code>n + 1</code> taps located at points <code>[0, 1, ..., n]</code> in the garden.</p> <p>Given an integer <code>n</code> and an integer array ranges of length <code>n + 1</code> where <code>ranges[i]</code> (0-indexed) means the <code>i-th</code> tap can water the area <code>[i - ranges[i], i + ranges[i]]</code> if it was open.</p> <p>Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1. Example 1:</p> <p></p> <pre><code>Input: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 3, ranges = [0,0,0,0]\nOutput: -1\nExplanation: Even if you activate all the four taps you cannot water the whole garden.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10\u2074</code></li> <li><code>ranges.length == n + 1</code></li> <li><code>0 &lt;= ranges[i] &lt;= 100</code></li> </ul>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/1326/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/133/","title":"133. Clone Graph","text":"","tags":["Hash Table","Depth-First Search","Breadth-First Search","Graph"]},{"location":"problems/133/#133-clone-graph","title":"133. Clone Graph","text":"<p>Medium</p>","tags":["Hash Table","Depth-First Search","Breadth-First Search","Graph"]},{"location":"problems/133/#description","title":"Description","text":"<p>Given a reference of a node in a connected undirected graph.</p> <p>Return a deep copy (clone) of the graph.</p> <p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p> <pre><code>class Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}\n</code></pre> <p>Test case format:</p> <p>For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p> <p>An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p> <p>The given node will always be the first node with <code>val = 1.</code> You must return the copy of the given node as a reference to the cloned graph.</p> <p>Example 1:</p> <p></p> <pre><code>Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n</code></pre> <p>Example 3:</p> <pre><code>Input: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> <li><code>Node.val</code> is unique for each node.</li> <li>There are no repeated edges and no self-loops in the graph.</li> <li>The Graph is connected and all nodes can be visited starting from the given node.</li> </ul>","tags":["Hash Table","Depth-First Search","Breadth-First Search","Graph"]},{"location":"problems/133/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Depth-First Search","Breadth-First Search","Graph"]},{"location":"problems/135/","title":"135. Candy","text":"","tags":["Array","Greedy"]},{"location":"problems/135/#135-candy","title":"135. Candy","text":"<p>Hard</p>","tags":["Array","Greedy"]},{"location":"problems/135/#description","title":"Description","text":"<p>There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.</p> <p>You are giving candies to these children subjected to the following requirements:</p> <ul> <li>Each child must have at least one candy.</li> <li>Children with a higher rating get more candies than their neighbors.</li> </ul> <p>Return the minimum number of candies you need to have to distribute the candies to the children.</p> <p>Example 1:</p> <pre><code>Input: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n</code></pre> <p>Example 2:</p> <pre><code>Input: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == ratings.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= ratings[i] &lt;= 2 * 104</code></li> </ul>","tags":["Array","Greedy"]},{"location":"problems/135/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Greedy"]},{"location":"problems/136/","title":"136. Single Number","text":"","tags":["Array","Bit Manipulation"]},{"location":"problems/136/#136-single-number","title":"136. Single Number","text":"<p>Easy</p>","tags":["Array","Bit Manipulation"]},{"location":"problems/136/#description","title":"Description","text":"<p>Given a non-empty array of integers <code>nums</code>, every element appears twice except for one. Find that single one.</p> <p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,2,1]\n\nOutput: 1\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [4,1,2,1,2]\n\nOutput: 4\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1]\n\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10\u2074</code></li> <li><code>-3 * 10\u2074 &lt;= nums[i] &lt;= 3 * 10\u2074</code></li> <li>Each element in the array appears twice except for one element which appears only once.</li> </ul>","tags":["Array","Bit Manipulation"]},{"location":"problems/136/#_1","title":"136. Single Number","text":"","tags":["Array","Bit Manipulation"]},{"location":"problems/136/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Bit Manipulation"]},{"location":"problems/138/","title":"138. Copy List with Random Pointer","text":"","tags":["Hash Table","Linked List"]},{"location":"problems/138/#138-copy-list-with-random-pointer","title":"138. Copy List with Random Pointer","text":"<p>Medium</p>","tags":["Hash Table","Linked List"]},{"location":"problems/138/#description","title":"Description","text":"<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p> <p>Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</p> <p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p> <p>Return the head of the copied linked list.</p> <p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p> <ul> <li><code>val</code>: an integer representing <code>Node.val</code></li> <li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li> </ul> <p>Your code will only be given the <code>head</code> of the original linked list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7, null], [13, 0], [11, 4], [10, 2], [1, 0]]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [[1,1],[2,1]]\nOutput: [[1, 1], [2, 1]]\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: head = [[3,null],[3,0],[3,null]]\nOutput: [[3, null], [3, 0], [3, null]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>-10\u2074 &lt;= Node.val &lt;= 10\u2074</code></li> <li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li> </ul>","tags":["Hash Table","Linked List"]},{"location":"problems/138/#_1","title":"138. Copy List with Random Pointer","text":"","tags":["Hash Table","Linked List"]},{"location":"problems/138/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Linked List"]},{"location":"problems/139/","title":"139. Word Break","text":"","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/139/#139-word-break","title":"139. Word Break","text":"<p>Medium</p>","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/139/#description","title":"Description","text":"<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p> <p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p> <p>Example 1:</p> <pre><code>Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li> <li><code>s and wordDict[i] consist of only lowercase English letters.</code></li> <li><code>All the strings of wordDict are unique.</code></li> </ul>","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/139/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/141/","title":"141. Linked List Cycle","text":"","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/141/#141-linked-list-cycle","title":"141. Linked List Cycle","text":"<p>Easy</p>","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/141/#description","title":"Description","text":"<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail's <code>next</code> pointer is connected to.Note that <code>pos</code> is not passed as a parameter.</p> <p>Return <code>true</code> if there is a cycle in the linked list. Otherwise, return <code>false</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of the nodes in the list is in the range</code>[0, 10<sup>4</sup>].</li> <li>-10<sup>5</sup> <code>&lt;= Node.val &lt;=</code> 10<sup>5</sup></li> <li><code>pos</code> is <code>-1</code> or a valid index in the linked-list.</li> </ul>","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/141/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/1448/","title":"1448. Count Good Nodes in Binary Tree","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree","Biweekly Contest 26"]},{"location":"problems/1448/#1448-count-good-nodes-in-binary-tree","title":"1448. Count Good Nodes in Binary Tree","text":"<p>Medium</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree","Biweekly Contest 26"]},{"location":"problems/1448/#description","title":"Description","text":"<p>Given a binary tree <code>root</code>, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.</p> <p>Return the number of good nodes in the binary tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [3,1,4,3,null,1,5]\nOutput: 4\nExplanation: Nodes in blue are good.\nRoot Node (3) is always a good node.\nNode 4 -&gt; (3,4) is the maximum value in the path starting from the root.\nNode 5 -&gt; (3,4,5) is the maximum value in the path\nNode 3 -&gt; (3,1,3) is the maximum value in the path.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [3,3,null,4,2]\nOutput: 3\nExplanation: Node 2 -&gt; (3, 3, 2) is not good, because \"3\" is higher than it.\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [1]\nOutput: 1\nExplanation: Root is considered as good.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the binary tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li>Each node's value is between <code>[-10<sup>4</sup>, 10<sup>4</sup>].</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree","Biweekly Contest 26"]},{"location":"problems/1448/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree","Biweekly Contest 26"]},{"location":"problems/146/","title":"146. LRU Cache","text":"","tags":["Hash Table","Linked List","Design","Doubly-Linked List"]},{"location":"problems/146/#146-lru-cache","title":"146. LRU Cache","text":"<p>Medium</p>","tags":["Hash Table","Linked List","Design","Doubly-Linked List"]},{"location":"problems/146/#description","title":"Description","text":"<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p> <p>Implement the <code>LRUCache</code> class:</p> <ul> <li> <p><code>LRUCache(int capacity)</code> Initialize the LRU cache with positive size <code>capacity</code>.</p> </li> <li> <p><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</p> </li> <li> <p><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the key exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, evict the least recently used key.</p> </li> </ul> <p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p> <p>Example 1:</p> <pre><code>Input\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= capacity &lt;= 3000</code>.</li> <li><code>0 &lt;= key &lt;= 10\u2074</code></li> <li><code>0 &lt;= value &lt;= 10\u2075</code></li> <li>At most <code>2 * 10\u2075</code> calls will be made to <code>get</code> and <code>put</code>.</li> </ul>","tags":["Hash Table","Linked List","Design","Doubly-Linked List"]},{"location":"problems/146/#solutions","title":"Solutions \ud83d\udd13","text":"","tags":["Hash Table","Linked List","Design","Doubly-Linked List"]},{"location":"problems/146/#approach1-hash-table-doubly-linked-list","title":"Approach1: Hash Table + Doubly Linked List","text":"<p> Time complexity: get(key: int), put(key: int, value: int): \\(O(1)\\)</p> <p> Space complexity: \\(O(capacity)\\)</p> <p>Algorithm</p> <p>We can implement an LRU (Least Recently Used) cache using a \"hash table\" and a \"doubly linked list\".</p> <ul> <li>Hash Table: Used to store cache entries for O(1) access.</li> <li>Doubly Linked List: Used to maintain the order of usage, with head being the most recently used and tail being the least recently used.</li> </ul> <p>Define helper methods to remove a node from the list and to add a node to the head of the list.</p> <ul> <li>In the get method, if the key exists, move the corresponding node to the head of the list and return its value.</li> <li>In the put method, if the key exists, remove the old node. Add the new node to the head of the list. If the cache exceeds capacity, remove the node from the tail of the list.</li> </ul> <p>The time complexity is \\(O(1)\\), and the space complexity is \\(O(\\textit{capacity})\\).</p> Python <pre><code>class Node:\n    def __init__(self,key = None, value = None):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = {}\n        self.head = Node()\n        self.tail = Node()\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def _remove(self,node):\n        prev_node = node.prev\n        next_node = node.next\n        prev_node.next = next_node\n        next_node.prev = prev_node\n\n    def _add_to_head(self,node):\n        node.prev = self.head\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n\n    def get(self, key: int) -&gt; int:\n        if key in self.cache:\n            node = self.cache[key]\n            self._remove(node)\n            self._add_to_head(node)\n            return node.value\n        return -1\n\n    def put(self, key: int, value: int) -&gt; None:\n        if key in self.cache:\n            self._remove(self.cache[key])\n        node = Node(key,value)\n        self._add_to_head(node)\n        self.cache[key] = node\n        if len(self.cache)&gt;self.capacity:\n            lru = self.tail.prev\n            self._remove(lru)\n            del self.cache[lru.key]\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)\n</code></pre>","tags":["Hash Table","Linked List","Design","Doubly-Linked List"]},{"location":"problems/146/#approach2-ordered-dictionary","title":"Approach2: Ordered Dictionary","text":"<p>Python Corner</p> <p>Python provides <code>OrderedDict</code> data structure that helps to implement LRU cache in a much more concise way.</p> <p><code>OrderedDict</code> seems to be introduced specifically to implement LRU cache.</p> <p><code>OrderedDict</code> vs <code>dict</code></p> <p>OrderedDict is not exactly the same as the dict class. dict is fully implemented on the interpreter level. It does preserve the order of inserted keys, but doesn\u2019t expose the move_to_end() method. OrderedDict is partially implemented on the Python level (as dict and a linked list), so it incurs some memory overhead.</p> <p> Time complexity: get(key: int), put(key: int, value: int): \\(O(1)\\)</p> <p> Space complexity: \\(O(capacity)\\)</p> Example <pre><code>&gt;&gt;&gt; od = collections.OrderedDict()\n&gt;&gt;&gt;\n&gt;&gt;&gt; od[1]=1\n&gt;&gt;&gt; od[2]=2\n&gt;&gt;&gt; od[3]=3\n&gt;&gt;&gt;\n&gt;&gt;&gt; od\nOrderedDict([(1, 1), (2, 2), (3, 3)])\n&gt;&gt;&gt; od.move_to_end(1)\n&gt;&gt;&gt; od\nOrderedDict([(2, 2), (3, 3), (1, 1)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; od.get(1)\n1\n&gt;&gt;&gt; od.popitem()\n(1, 1)\n&gt;&gt;&gt; od\nOrderedDict([(2, 2), (3, 3)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; od[1]=1\n&gt;&gt;&gt; od\nOrderedDict([(2, 2), (3, 3), (1, 1)])\n&gt;&gt;&gt;\n&gt;&gt;&gt; od.popitem(last=False)\n(2, 2)\n&gt;&gt;&gt; od\nOrderedDict([(3, 3), (1, 1)])\n</code></pre> Python <pre><code>from collections import *\n\nclass LRUCache:\n    def __init__(self, capacity: 'int'):\n        self.cache = OrderedDict()\n        self.remain = capacity\n\n    def get(self, key: 'int') -&gt; 'int':\n        if key not in self.cache:\n            return -1\n        self.cache.move_to_end(key) # meaning end is the most recently used\n        return self.cache.get(key)\n\n    def put(self, key: 'int', value: 'int') -&gt; 'None':\n        if key not in self.cache:\n            if self.remain &gt; 0:\n                self.remain -= 1\n            else:\n                self.cache.popitem(last=False) # pop start position\n        else:\n            self.cache.pop(key)\n        self.cache[key] = value # add to end of dict, meaning most recently used\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Linked List","Design","Doubly-Linked List"]},{"location":"problems/148/","title":"148. Sort List","text":"","tags":["Linked List","Two Pointers","Divide and Conquer","Sorting","Merge Sort"]},{"location":"problems/148/#148-sort-list","title":"148. Sort List","text":"<p>Medium</p>","tags":["Linked List","Two Pointers","Divide and Conquer","Sorting","Merge Sort"]},{"location":"problems/148/#description","title":"Description","text":"<p>Given the <code>head</code> of a linked list, return the list after sorting it in ascending order.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [4,2,1,3]\nOutput: [1, 2, 3, 4]\n</code></pre> <p>Example 1:</p> <p></p> <pre><code>Input: head = [-1,5,3,4,0]\nOutput: [-1, 0, 3, 4, 5]\n</code></pre> <p>Example 1:</p> <pre><code>Input: head = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 5 * 10\u2074]</code>.</li> <li><code>-10\u2075 &lt;= Node.val &lt;= 10\u2075</code></li> </ul>","tags":["Linked List","Two Pointers","Divide and Conquer","Sorting","Merge Sort"]},{"location":"problems/148/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Two Pointers","Divide and Conquer","Sorting","Merge Sort"]},{"location":"problems/1493/","title":"1493. Longest Subarray of 1's After Deleting One Element","text":"","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/1493/#1493-longest-subarray-of-1s-after-deleting-one-element","title":"1493. Longest Subarray of 1's After Deleting One Element","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/1493/#description","title":"Description","text":"<p>Given a binary array <code>nums</code>, you should delete one element from it.</p> <p>Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return <code>0</code> if there is no such subarray.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/1493/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/15/","title":"15. 3Sum","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#15-3sum","title":"15. 3Sum","text":"<p>Medium</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#description","title":"Description","text":"<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p> <p>Example 1:</p> <pre><code>Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation:\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [0,0,0]\nOutput: [[0, 0, 0]]\nExplanation: The only possible triplet sums up to 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 3000</code></li> <li><code>-10\u2075 &lt;= nums[i] &lt;= 10\u2075</code></li> </ul>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#solutions","title":"Solutions \ud83d\udd13","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#approach-sorting-two-pointers-using-hashset","title":"Approach: Sorting + Two Pointers (using HashSet)","text":"<p> Time complexity: \\(O(n^2)\\)</p> <p> Space complexity: \\(O(|ans|)\\) = \\(O(n)\\)</p> <p>Algorithm</p> <p>First, sort the array to make it easier to skip duplicates and use the two-pointer technique.</p> <p>Iterate through each element, treating it as the first element of the triplet.</p> <p>For each element, use two pointers (one starting just after the current element and the other at the end of the array) to find pairs that sum to the negative of the current element.</p> <p>Skip over duplicate elements to avoid duplicate triplets in the result.</p> <p>Use a set to store the triplets to automatically handle duplicates.</p> <p>Convert the set of tuples back to a list of lists before returning.</p> <p>Sorting the array takes \\(O(n \\log n)\\), and the two nested loops take \\(O(n^2)\\). Thus, the overall time complexity is dominated by the \\(O(n^2)\\) part.</p> <p>The space complexity is \\(O(n)\\) due to the storage of the result in a set, which can contain up to \\(O(n)\\) unique triplets. No additional significant space is used.</p> Python <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        ans = set()\n        n = len(nums)\n        nums = sorted(nums)\n        for i in range(n):\n            l, r = i+1, n-1\n            while l &lt; r:\n                S = nums[i]+nums[l]+nums[r]\n                if S == 0:\n                    ans.add((nums[i],nums[l],nums[r]))\n                    l+=1\n                    r-=1\n                elif S &gt; 0:\n                    r-=1\n                else:\n                    l+=1\n\n        return [list(tup) for tup in ans]\n</code></pre>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#approach-two-pointers-sorting","title":"Approach :Two Pointers +Sorting","text":"<p> Time complexity: \\(O(n^2)\\)</p> <p> Space complexity: \\(O( \\log n)\\)</p> <p>Algorithm</p> <p>We notice that the problem does not require us to return the triplet in order, so we might as well sort the array first, which makes it easy to skip duplicate elements.</p> <p>Next, we enumerate the first element of the triplet \\(nums[i]\\) , where \\(0 \u2264 i&lt; n\u22122\\).</p> <p>For each \\(i\\), we can find \\(l\\) and \\(r\\) satisfying \\(nums[i]+nums[l]+nums[r]=0\\) by maintaining two pointers \\(l=i+1\\) and \\(r=n\u22121\\).</p> <p>In the enumeration process, we need to skip duplicate elements to avoid duplicate triplets.</p> <p>The specific judgment logic is as follows:</p> <p>If \\(i&gt;0\\) and \\(nums[i]=nums[i\u22121]\\), it means that the element currently enumerated is the same as the previous element, we can skip it directly, because it will not produce new results.</p> <p>If \\(nums[i] &gt; 0\\), it means that the element currently enumerated is greater than \\(0\\), so the sum of three numbers must not be equal to \\(0\\), and the enumeration ends.</p> <p>Otherwise, we let the left pointer \\(l=i+1\\), and the right pointer \\(r=n\u22121\\).</p> <p>When \\(l &lt; r\\), the loop is executed, and the sum of three numbers \\(S = nums[i]+nums[l]+nums[r]\\) is calculated and compared with \\(0\\):</p> <ul> <li>If \\(S &lt; 0\\), it means that \\(nums[l]\\) is too small, we need to move \\(l\\) to the right.</li> <li>If \\(S &gt; 0\\), it means that \\(nums[r]\\) is too large, we need to move \\(r\\) to the left.</li> <li>Otherwise, it means that we have found a valid triplet, add it to the answer \\(ans\\), move \\(l\\) to the right, move \\(r\\) to the left, and skip all duplicate elements to continue looking for the next valid triplet.</li> </ul> <p>After the enumeration is over, we can get the answer \\(ans\\) to the triplet.</p> <p>The time complexity is \\(O(n^2)\\) and the space complexity is \\(O( \\log n)\\). The \\(n\\) is the length of the array.</p> Python <pre><code>class Solution:\n    def threeSum(self,nums:List[int])-&gt;List[List[int]]:\n        if len(nums) &lt; 3: return ans\n\n        nums = sorted(nums)\n        ans = []\n        n = len(nums)\n        for i in range(n-2):\n            if i&gt;0 and nums[i]==nums[i-1]:\n                continue\n            # Choose nums[i] as the first number in the triplet, then search the remaining numbers in [i + 1, n - 1].\n            l , r = i+1, n-1\n            while l &lt; r:\n                S = nums[i]+nums[l]+nums[r]\n\n                if S == 0:\n                    ans.append((nums[i],nums[l],nums[r]))\n                    l +=1\n                    r -=1\n                    #skip duplicates\n                    while nums[l]==nums[l-1] and l&lt;r:\n                        l+=1\n                    while nums[r]==nums[r+1] and l&lt;r:\n                        r-=1\n\n                elif S &lt; 0:\n                    l+=1\n                else:\n                    r-=1\n\n        return ans\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/152/","title":"152. Maximum Product Subarray","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/152/#152-maximum-product-subarray","title":"152. Maximum Product Subarray","text":"<p>Medium</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/152/#description","title":"Description","text":"<p>Given an integer array <code>nums</code>, find a subarray that has the largest product, and return the product.</p> <p>The test cases are generated so that the answer will fit in a 32-bit integer.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10\u2074</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li><code>The product of any subarray of nums is guaranteed to fit in a 32-bit integer.</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/152/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/153/","title":"153. Find Minimum in Rotated Sorted Array","text":"","tags":["Array","Binary Search"]},{"location":"problems/153/#153-find-minimum-in-rotated-sorted-array","title":"153. Find Minimum in Rotated Sorted Array","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/153/#description","title":"Description","text":"<p>Suppose an array of length <code>n</code> sorted in ascending order is rotated between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p> <ul> <li><code>[4,5,6,7,0,1,2]</code> if it was rotated 4 times.</li> <li><code>[0,1,2,4,5,6,7]</code> if it was rotated 7 times.</li> </ul> <p>Notice that rotating an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p> <p>Given the sorted rotated array <code>nums</code> of unique elements, return the minimum element of this array.</p> <p>You must write an algorithm that runs in <code>O(log n)</code> time.</p> <p>Example 1:</p> <pre><code>Input: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times.\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> <li><code>All the integers of nums are unique.</code></li> <li><code>nums is sorted and rotated between 1 and n times.</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/153/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/155/","title":"155. Min Stack","text":"","tags":["Stack","Design"]},{"location":"problems/155/#155-min-stack","title":"155. Min Stack","text":"<p>Medium</p>","tags":["Stack","Design"]},{"location":"problems/155/#description","title":"Description","text":"<p>Design a stack that supports <code>push</code>, <code>pop</code>, <code>top</code>, and <code>retrieving</code> the minimum element in constant time.</p> <p>Implement the <code>MinStack</code> class:</p> <ul> <li><code>MinStack()</code> initializes the stack object.</li> <li><code>void push(int val)</code> pushes the element val onto the stack.</li> <li><code>void pop()</code> removes the element on the top of the stack.</li> <li><code>int top()</code> gets the top element of the stack.</li> <li><code>int getMin()</code> retrieves the minimum element in the stack.</li> </ul> <p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p> <p>Example 1:</p> <pre><code>Input\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n</code></pre> <p>Constraints:</p> <ul> <li>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</li> <li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on non-empty stacks.</li> <li>At most <code>3 * 10\u2074</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li> </ul>","tags":["Stack","Design"]},{"location":"problems/155/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Stack","Design"]},{"location":"problems/16/","title":"16. 3Sum Closest","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/16/#16-3sum-closest","title":"16. 3Sum Closest","text":"<p>Medium</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/16/#description","title":"Description","text":"<p>Given an integer array <code>nums</code> of length n and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p> <p>Return the sum of the three integers.</p> <p>You may assume that each input would have exactly one solution.</p> <p>Example 1:</p> <pre><code>Input: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,0,0], target = 1\nOutput: 0\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n</code></pre> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 500</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>-10 &lt;= target &lt;= 10\u2074</code></li> </ul>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/16/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/162/","title":"162. Find Peak Element","text":"","tags":["Array","Binary Search"]},{"location":"problems/162/#162-find-peak-element","title":"162. Find Peak Element","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/162/#description","title":"Description","text":"<p>A peak element is an element that is strictly greater than its neighbors.</p> <p>Given a 0-indexed integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.</p> <p>You may imagine that <code>nums[-1] = nums[n] = -\u221e</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p> <p>You must write an algorithm that runs in <code>O(log n)</code> time.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/162/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/1636/","title":"1636. Sort Array by Increasing Frequency","text":"","tags":["Array","Hash Table","Sorting"]},{"location":"problems/1636/#1636-sort-array-by-increasing-frequency","title":"1636. Sort Array by Increasing Frequency","text":"<p>Easy</p>","tags":["Array","Hash Table","Sorting"]},{"location":"problems/1636/#description","title":"Description","text":"<p>Given an array of integers <code>nums</code>, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</p> <p>Return the sorted array.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,1,2,2,2,3]\nOutput: [3,1,1,2,2,2]\nExplanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [2,3,1,3,2]\nOutput: [1,3,3,2,2]\nExplanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [-1,1,-6,4,5,-6,1,4,1]\nOutput: [5, -1, 4, 4, -6, -6, 1, 1, 1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> </ul> <p>Follow Up Can you sort the array in decreasing order based on the frequency of the values? How would you modify your existing solution?</p>","tags":["Array","Hash Table","Sorting"]},{"location":"problems/1636/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Sorting"]},{"location":"problems/167/","title":"167. Two Sum II - Input Array Is Sorted","text":"","tags":["Array","Two Pointers","Binary Search"]},{"location":"problems/167/#167-two-sum-ii-input-array-is-sorted","title":"167. Two Sum II - Input Array Is Sorted","text":"<p>Medium</p>","tags":["Array","Two Pointers","Binary Search"]},{"location":"problems/167/#description","title":"Description","text":"<p>Given a 1-indexed array of integers <code>numbers</code> that is already sorted in non-decreasing order, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be numbers[index<sub>1</sub>] and numbers[index<sub>2</sub>] where 1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length.</p> <p>Return the indices of the two numbers, index<sub>1</sub> and index<sub>2</sub>, added by one as an integer array [index<sub>1</sub>, index<sub>2</sub>] of length 2.</p> <p>The tests are generated such that there is exactly one solution. You may not use the same element twice.</p> <p>Your solution must use only constant extra space.</p> <p>Example 1:</p> <pre><code>Input: numbers = [2,7,11,15], target = 9\nOutput: [1, 2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n</code></pre> <p>Example 2:</p> <pre><code>Input: numbers = [2,3,4], target = 6\nOutput: [1, 3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n</code></pre> <p>Example 3:</p> <pre><code>Input: numbers = [-1,0], target = -1\nOutput: [1, 2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= numbers.length &lt;= 3 * 10\u2074</code></li> <li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li> <li><code>numbers</code> is sorted in non-decreasing order.</li> <li><code>-1000 &lt;= target &lt;= 1000</code></li> <li>The tests are generated such that there is exactly one solution.</li> </ul>","tags":["Array","Two Pointers","Binary Search"]},{"location":"problems/167/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Binary Search"]},{"location":"problems/169/","title":"169. Majority Element","text":"","tags":["Array","Hash Table","Divide and Conquer","Sorting","Counting"]},{"location":"problems/169/#169-majority-element","title":"169. Majority Element","text":"<p>Easy</p>","tags":["Array","Hash Table","Divide and Conquer","Sorting","Counting"]},{"location":"problems/169/#description","title":"Description","text":"<p>Given an array <code>nums</code> of size <code>n</code>, return the majority element.</p> <p>The majority element is the element that appears more than <code>\u230an / 2\u230b</code> times. You may assume that the majority element always exists in the array.</p> <p>Example 1:</p> <pre><code>Input: nums = [3,2,3]\nOutput: 3\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10\u2074</code></li> <li><code>-10\u2079 &lt;= nums[i] &lt;= 10\u2079</code></li> </ul>","tags":["Array","Hash Table","Divide and Conquer","Sorting","Counting"]},{"location":"problems/169/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Divide and Conquer","Sorting","Counting"]},{"location":"problems/1695/","title":"1695. Maximum Erasure Value","text":"","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/1695/#1695-maximum-erasure-value","title":"1695. Maximum Erasure Value","text":"<p>Medium</p>","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/1695/#description","title":"Description","text":"<p>You are given an array of positive integers <code>nums</code> and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.</p> <p>Return the maximum score you can get by erasing exactly one subarray.</p> <p>An array <code>b</code> is called to be a subarray of <code>a</code> if it forms a contiguous subsequence of <code>a</code>, that is, if it is equal to <code>a[l],a[l+1],...,a[r] for some (l,r)</code>.</p> <p>Example 1:</p> <pre><code>Input: nums = [4,2,4,5,6]\nOutput: 17\nExplanation: The optimal subarray here is [2,4,5,6].\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [5,2,1,2,5,2,1,2,5]\nOutput: 8\nExplanation: The optimal subarray here is [5,2,1] or [1,2,5].\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>1 &lt;= nums[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/1695/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/17/","title":"17. Letter Combinations of a Phone Number","text":"","tags":["Hash Table","String","Backtracking"]},{"location":"problems/17/#17-letter-combinations-of-a-phone-number","title":"17. Letter Combinations of a Phone Number","text":"<p>Medium</p>","tags":["Hash Table","String","Backtracking"]},{"location":"problems/17/#description","title":"Description","text":"<p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p> <p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p> <p></p> <p>Example 1:</p> <pre><code>Input: digits = \"23\"\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]\n</code></pre> <p>Example 2:</p> <pre><code>Input: digits = \"\"\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: digits = \"2\"\nOutput: [\"a\", \"b\", \"c\"]\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= digits.length &lt;= 4</code></li> <li><code>digits[i] is a digit in the range ['2', '9'].</code></li> </ul>","tags":["Hash Table","String","Backtracking"]},{"location":"problems/17/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Backtracking"]},{"location":"problems/1738/","title":"1738. Find Kth Largest XOR Coordinate Value","text":"","tags":["Array","Divide and Conquer","Bit Manipulation","Sorting","Heap (Priority Queue)","Matrix","Prefix Sum","Quickselect"]},{"location":"problems/1738/#1738-find-kth-largest-xor-coordinate-value","title":"1738. Find Kth Largest XOR Coordinate Value","text":"<p>Medium</p>","tags":["Array","Divide and Conquer","Bit Manipulation","Sorting","Heap (Priority Queue)","Matrix","Prefix Sum","Quickselect"]},{"location":"problems/1738/#description","title":"Description","text":"<p>You are given a 2D matrix of size <code>m x n</code>, consisting of non-negative integers. You are also given an integer <code>k</code>.</p> <p>The value of coordinate <code>(a, b)</code> of the matrix is the XOR of all <code>matrix[i][j]</code> where <code>0 &lt;= i &lt;= a &lt; m</code>and <code>0 &lt;= j &lt;= b &lt; n</code> (0-indexed).</p> <p>Find the <code>kth</code> largest value (1-indexed) of all the coordinates of <code>matrix</code>.</p> <p>Example 1:</p> <pre><code>Input: matrix = [[5,2],[1,6]], k = 1\nOutput: 7\nExplanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n</code></pre> <p>Example 2:</p> <pre><code>Input: matrix = [[5,2],[1,6]], k = 2\nOutput: 5\nExplanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n</code></pre> <p>Example 3:</p> <pre><code>Input: matrix = [[5,2],[1,6]], k = 3\nOutput: 4\nExplanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>0 &lt;= matrix[i][j] &lt;= 106</code></li> <li><code>1 &lt;= k &lt;= m * n</code></li> <li></li> </ul>","tags":["Array","Divide and Conquer","Bit Manipulation","Sorting","Heap (Priority Queue)","Matrix","Prefix Sum","Quickselect"]},{"location":"problems/1738/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Divide and Conquer","Bit Manipulation","Sorting","Heap (Priority Queue)","Matrix","Prefix Sum","Quickselect"]},{"location":"problems/18/","title":"18. 4Sum","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/18/#18-4sum","title":"18. 4Sum","text":"<p>Medium</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/18/#description","title":"Description","text":"<p>Given an array <code>nums</code> of <code>n</code> integers, return an array of all the unique quadruplets <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p> <ul> <li><code>0 &lt;= a, b, c, d &lt; n</code></li> <li><code>a, b, c, and d are distinct.</code></li> <li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li> </ul> <p>You may return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [2,2,2,2,2], target = 8\nOutput: [[2, 2, 2, 2]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>-10\u2079 &lt;= nums[i] &lt;= 10\u2079</code></li> <li><code>-10\u2079 &lt;= target &lt;= 10\u2079</code></li> </ul>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/18/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/189/","title":"189. Rotate Array","text":"","tags":["Array","Math","Two Pointers"]},{"location":"problems/189/#189-rotate-array","title":"189. Rotate Array","text":"<p>Medium</p>","tags":["Array","Math","Two Pointers"]},{"location":"problems/189/#description","title":"Description","text":"<p>Given an integer array <code>nums</code>, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5, 6, 7, 1, 2, 3, 4]\nExplanation:\nrotate 1 steps to the right: [7, 1, 2, 3, 4, 5, 6]\nrotate 2 steps to the right: [6, 7, 1, 2, 3, 4, 5]\nrotate 3 steps to the right: [5, 6, 7, 1, 2, 3, 4]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1,-100,3,99], k = 2\nOutput: [3, 99, -1, -100]\nExplanation:\nrotate 1 steps to the right: [99, -1, -100, 3]\nrotate 2 steps to the right: [3, 99, -1, -100]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul> <p>Follow up:</p> <ul> <li> <p>Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.</p> </li> <li> <p>Could you do it in-place with <code>O(1)</code> extra space?</p> </li> </ul>","tags":["Array","Math","Two Pointers"]},{"location":"problems/189/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Math","Two Pointers"]},{"location":"problems/19/","title":"19. Remove Nth Node From End of List","text":"","tags":["Linked List","Two Pointers"]},{"location":"problems/19/#19-remove-nth-node-from-end-of-list","title":"19. Remove Nth Node From End of List","text":"<p>Medium</p>","tags":["Linked List","Two Pointers"]},{"location":"problems/19/#description","title":"Description","text":"<p>Given the <code>head</code> of a linked list, remove the n<sup>th</sup> node from the end of the list and return its head.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], n = 2\nOutput: [1, 2, 3, 5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: head = [1], n = 1\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: head = [1,2], n = 1\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in the list is sz.</code></li> <li><code>1 &lt;= sz &lt;= 30</code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= sz</code></li> </ul> <p>Follow up: Could you do this in one pass?</p>","tags":["Linked List","Two Pointers"]},{"location":"problems/19/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Two Pointers"]},{"location":"problems/191/","title":"191. Number of 1 Bits","text":"","tags":["Divide and Conquer","Bit Manipulation"]},{"location":"problems/191/#191-number-of-1-bits","title":"191. Number of 1 Bits","text":"<p>Easy</p>","tags":["Divide and Conquer","Bit Manipulation"]},{"location":"problems/191/#description","title":"Description","text":"<p>Given a positive integer <code>n</code>, write a function that returns the number of set bits (1) in its binary representation (also known as the Hamming weight).</p> <ol> <li> A set bit refers to a bit in the binary representation of a number that has a value of <code>1</code></li> </ol> <p>Example 1:</p> <pre><code>Input: n = 11\n\nOutput: 3\n\nExplanation:\n\nThe input binary string 1011 has a total of three set bits.\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 128\n\nOutput: 1\n\nExplanation:\n\nThe input binary string 10000000 has a total of one set bit.\n</code></pre> <p>Example 3:</p> <pre><code>Input: n = 2147483645\n\nOutput: 30\n\nExplanation:\n\nThe input binary string 1111111111111111111111111111101 has a total of thirty set bits.\n</code></pre> <p>Constraints:</p> <ul> <li>1 &lt;= n &lt;= 2<sup>31</sup> - 1</li> </ul>","tags":["Divide and Conquer","Bit Manipulation"]},{"location":"problems/191/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Divide and Conquer","Bit Manipulation"]},{"location":"problems/198/","title":"198. House Robber","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/198/#198-house-robber","title":"198. House Robber","text":"<p>Medium</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/198/#description","title":"Description","text":"<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p> <p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 400</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/198/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/1985/","title":"1985. Find the Kth Largest Integer in the Array","text":"","tags":["Array","String","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/1985/#1985-find-the-kth-largest-integer-in-the-array","title":"1985. Find the Kth Largest Integer in the Array","text":"<p>Medium</p>","tags":["Array","String","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/1985/#description","title":"Description","text":"<p>You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.</p> <p>Return the string that represents the kth largest integer in nums.</p> <p>Note: Duplicate numbers should be counted distinctly. For example, if nums is <code>[\"1\",\"2\",\"2\"]</code>, <code>\"2\"</code>is the first largest integer, <code>\"2\"</code> is the second-largest integer, and <code>\"1\"</code> is the third-largest integer.</p> <p>Example 1:</p> <pre><code>Input: nums = [\"3\",\"6\",\"7\",\"10\"], k = 4\nOutput: \"3\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].\nThe 4th largest integer in nums is \"3\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [\"2\",\"21\",\"12\",\"1\"], k = 3\nOutput: \"2\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].\nThe 3rd largest integer in nums is \"2\".\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [\"0\",\"0\"], k = 2\nOutput: \"0\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].\nThe 2nd largest integer in nums is \"0\".\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10\u2074</code></li> <li><code>1 &lt;= nums[i].length &lt;= 100</code></li> <li><code>nums[i]</code> consists of only digits.</li> <li><code>nums[i]</code> will not have any leading zeros.</li> </ul> <p>Note: This question is similar to 215. Kth Largest Element in an Array</p>","tags":["Array","String","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/1985/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","String","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/199/","title":"199. Binary Tree Right Side View","text":"","tags":["Array","Math","Two Pointers"]},{"location":"problems/199/#199-binary-tree-right-side-view","title":"199. Binary Tree Right Side View","text":"<p>Medium</p>","tags":["Array","Math","Two Pointers"]},{"location":"problems/199/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.</p> <p>Example 1:</p> <pre><code>Input: root = [1,2,3,null,5,null,4]\n\nOutput: [1, 3, 4]\n\nExplanation:\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: root = [1,2,3,4,null,null,null,5]\n\nOutput: [1, 3, 4, 5]\n\nExplanation:\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Array","Math","Two Pointers"]},{"location":"problems/199/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Math","Two Pointers"]},{"location":"problems/2/","title":"2. Add Two Numbers","text":"","tags":["Linked List","Math","Recursion"]},{"location":"problems/2/#2-add-two-numbers","title":"2. Add Two Numbers","text":"<p>Medium</p>","tags":["Linked List","Math","Recursion"]},{"location":"problems/2/#description","title":"Description","text":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p>Example 1:</p> <p></p> <pre><code>Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7, 0, 8]\nExplanation: 342 + 465 = 807.\n</code></pre> <p>Example 2:</p> <pre><code>Input: l1 = [0], l2 = [0]\nOutput: [0]\n</code></pre> <p>Example 3:</p> <pre><code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8, 9, 9, 9, 0, 0, 0, 1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in each linked list is in the range [1, 100].</code></li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li><code>It is guaranteed that the list represents a number that does not have leading zeros.</code></li> </ul>","tags":["Linked List","Math","Recursion"]},{"location":"problems/2/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Math","Recursion"]},{"location":"problems/20/","title":"20. Valid Parentheses","text":"","tags":["String","Stack"]},{"location":"problems/20/#20-valid-parentheses","title":"20. Valid Parentheses","text":"<p>Easy</p>","tags":["String","Stack"]},{"location":"problems/20/#description","title":"Description","text":"<p>Given a string s containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p> <p>An input string is valid if:</p> <ol> <li>Open brackets must be closed by the same type of brackets.</li> <li>Open brackets must be closed in the correct order.</li> <li>Every close bracket has a corresponding open bracket of the same type.</li> </ol> <p>Example 1:</p> <pre><code>Input: s = \"()\"\n\nOutput: true\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"()[]{}\"\n\nOutput: true\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"(]\"\n\nOutput: false\n</code></pre> <p>Example 4:</p> <pre><code>Input: s = \"([])\"\n\nOutput: true\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s consists of parentheses only '()[]{}'</code></li> </ul>","tags":["String","Stack"]},{"location":"problems/20/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["String","Stack"]},{"location":"problems/200/","title":"200. Number of Islands","text":"","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/200/#200-number-of-islands","title":"200. Number of Islands","text":"<p>Medium</p>","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/200/#description","title":"Description","text":"<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>'1's</code> \\((land)\\) and '<code>0's</code> \\((water)\\), return the number of islands.</p> <p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p> <p>Example 1:</p> <pre><code>Input: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n</code></pre> <p>Example 2:</p> <pre><code>Input: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>grid[i][j]</code> is '0' or '1'.</li> </ul>","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/200/#solutions","title":"Solutions \ud83d\udd13","text":"","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/200/#approach-bfs-on-gridmaze2d-matrix","title":"Approach: BFS on Grid/Maze/2D Matrix","text":"<p> Time complexity: \\(O(mn)\\), where \\(m\\) is the number of rows and \\(n\\) is the number of columns in the grid.</p> <p> Space complexity: \\(O(min(m,n))\\)</p>","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/200/#when-input-modification-is-not-allowed","title":"When Input modification is not allowed","text":"Python <pre><code>from collections import deque\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -&gt; int:\n        rows = len(grid)\n        cols = len(grid[0])\n        visited = set()\n        totalIslands = 0\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        def bfs(i, j) -&gt; None:\n            # add cell in the queue to process\n            q = deque([(i, j)])\n            # mark the cell as visited\n            visited.add((i, j))\n            while q:\n                row, col = q.popleft()\n                # explore in 4 directions\n                for di, dj in directions:\n                    nr = row + di\n                    nc = col + dj\n\n                    if 0 &lt;= nr &lt; rows and 0 &lt;= nc &lt; cols:  # within the boundaries\n                        if grid[nr][nc] == \"1\" and (nr, nc) not in visited:\n                            # check if its a land and is not visited then add it to queue and mark it as visited\n                            visited.add((nr, nc))\n                            q.append((nr, nc))\n\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == \"1\" and (r, c) not in visited:\n                    totalIslands += 1\n                    bfs(r, c)\n\n        return totalIslands\n</code></pre> Modify <p>Replace the following in above BFS algorithm, when you can modify input</p> <pre><code>- visited = set()\n\n- visited.add((i, j))\n+ grid[r][c] = \"v\"\n\n- visited.add((nr, nc))\n+ grid[nr][nc] = \"v\"\n</code></pre> <p>Quick tip</p> <ul> <li> <p>Don't go for DFS Stick to BFS</p> </li> <li> <p>Interviewers do not want you to modify the input array</p> </li> <li> <p>Stick to BFS for interviews</p> </li> </ul>","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/200/#approach-dfs-on-gridmaze2d-matrix","title":"Approach: DFS on Grid/Maze/2D Matrix","text":"<p> Time complexity: \\(O(mn)\\)</p> <p> Space complexity: \\(O(mn)\\)</p>","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/200/#when-input-modification-is-allowed","title":"When input modification is allowed","text":"<p>Algorithm</p> <p>To solve this problem, we'll use a depth-first search (DFS).</p> <p>We'll iterate through each cell in the grid.</p> <p>When we find a '1', we'll mark it as visited and explore all adjacent land cells using DFS. This process counts as one island. We'll do this for all cells in the grid.</p> <p>The time complexity of this solution is \\(O(m \\cdot n)\\), where m is the number of rows and n is the number of columns in the grid. That\u2019s because we visit each cell once.</p> Python <pre><code>class Solution:\n    def numIslands(self, grid: List[List[str]]) -&gt; int:\n        rows = len(grid)\n        cols = len(grid[0])\n        totalIslands = 0    # answer\n\n        def dfs(r, c) -&gt; None:\n            # check if current cell is out of bounds\n            if (r &lt; 0 or r &gt;= rows or c &lt; 0 or c &gt;= cols):\n                return\n\n            if grid[r][c] != \"1\":  # not land ,could be water(0) or visted land(v)\n                return\n\n            grid[r][c] = \"v\"       # mark current land as visited\n\n            # explore the neighbour\n            dfs(r + 1, c)\n            dfs(r - 1, c)\n            dfs(r, c - 1)\n            dfs(r, c + 1)\n\n        # Iterate through all cells in the grid\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == \"1\":  # found land\n                    dfs(r, c)\n                    totalIslands += 1\n\n        return totalIslands\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},{"location":"problems/201/","title":"201. Bitwise AND of Numbers Range","text":"","tags":["Bit Manipulation"]},{"location":"problems/201/#201-bitwise-and-of-numbers-range","title":"201. Bitwise AND of Numbers Range","text":"<p>Medium</p>","tags":["Bit Manipulation"]},{"location":"problems/201/#description","title":"Description","text":"<p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return the bitwise AND of all numbers in this range, inclusive.</p> <p>Example 1:</p> <pre><code>Input: left = 5, right = 7\nOutput: 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: left = 0, right = 0\nOutput: 0\n</code></pre> <p>Example 3:</p> <pre><code>Input: left = 1, right = 2147483647\nOutput: 0\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1</code></li> </ul>","tags":["Bit Manipulation"]},{"location":"problems/201/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Bit Manipulation"]},{"location":"problems/202/","title":"202. Happy Number","text":"","tags":["Hash Table","Math","Two Pointers"]},{"location":"problems/202/#202-happy-number","title":"202. Happy Number","text":"<p>Medium</p>","tags":["Hash Table","Math","Two Pointers"]},{"location":"problems/202/#description","title":"Description","text":"<p>Write an algorithm to determine if a number <code>n</code> is happy.</p> <p>A happy number is a number defined by the following process:</p> <ul> <li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> <li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li> <li>Those numbers for which this process ends in 1 are happy.</li> </ul> <p>Return <code>true</code> if <code>n</code> is a happy number, and <code>false</code> if not.</p> <p>Example 1:</p> <pre><code>Input: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 2\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>","tags":["Hash Table","Math","Two Pointers"]},{"location":"problems/202/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Math","Two Pointers"]},{"location":"problems/206/","title":"206. Reverse Linked List","text":"","tags":["Linked List","Recursion"]},{"location":"problems/206/#206-reverse-linked-list","title":"206. Reverse Linked List","text":"<p>Medium</p>","tags":["Linked List","Recursion"]},{"location":"problems/206/#description","title":"Description","text":"<p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5]\nOutput: [5, 4, 3, 2, 1]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2]\nOutput: [2, 1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: head = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in the list is the range [0, 5000].</code></li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p>Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?</p>","tags":["Linked List","Recursion"]},{"location":"problems/206/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Recursion"]},{"location":"problems/207/","title":"207. Course Schedule","text":"","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/207/#207-course-schedule","title":"207. Course Schedule","text":"<p>Medium</p>","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/207/#description","title":"Description","text":"<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a\u1d62 b\u1d62]</code> indicates that you must take course <code>b\u1d62</code> first if you want to take course <code>a\u1d62</code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p> <p>Example 1:</p> <pre><code>Input: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0. So it is possible.\n</code></pre> <p>Example 2:</p> <pre><code>Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= numCourses &lt;= 2000</code></li> <li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= ai, bi &lt; numCourses</code></li> <li>All the pairs prerequisites[i] are unique.</li> </ul>","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/207/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/207/#approachtopological-sorting-using-bfs","title":"Approach:Topological Sorting using BFS","text":"<p> Time complexity: \\(O(\u2223V\u2223+\u2223E\u2223)\\),</p> <p> Space complexity: \\(O(\u2223V\u2223+\u2223E\u2223)\\), where \\(\u2223V\u2223=numCourses\\) and \\(\u2223E\u2223=\u2223prerequisites\u2223\\)</p> Algorithm Discussion <p>Wny Topological Sort Algorithm on Directed Graphs? \u2013 via BFS</p> <ul> <li> <p>The Topological sorting gives an order that we can visit the vertices in a directed graphs where the prerequisite vertices need to be visited first.</p> </li> <li> <p>A prerequisite or dependency is a edge with direction. We can first start with all nodes that have zero indegree (meaning no edges coming to them) \u2013 and then we can decrement the indegree of all out nodes as we deque a current vertex.</p> </li> <li> <p>Once a out node has become zero indegree, we can visit it \u2013 thus pushing to the queue.</p> </li> </ul> <p>Algorithm</p> <p>Topological Sorting</p> <p>For this problem, we can consider the <code>courses</code> as \\(nodes\\) in a graph, and <code>prerequisites</code> as \\(edges\\) in the graph. Thus, we can transform this problem into determining whether there is a cycle in the directed graph.</p> <p>Specifically, we can use the idea of topological sorting. For each node with an in-degree of 0, we reduce the in-degree of its out-degree nodes by 1, until all nodes have been traversed.</p> <p>If all nodes have been traversed, it means there is no cycle in the graph, and we can complete all courses; otherwise, we cannot complete all courses.</p> <p>The time complexity is O(n+m), and the space complexity is O(n+m). Here, n and m are the number of courses and prerequisites respectively.</p> PythonPython (Condensed Way of Writing) <pre><code>class Node(object):\n    def __init__(self):\n        self.inDegrees = 0\n        self.outNodes = []\n\nclass Solution(object):\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool:\n\n        # Build the graph.\n        G = defaultdict(Node)\n        for a, b in prerequisites:  # a-start , b-end of edges aka prerequisites\n            G[a].inDegrees += 1\n            G[b].outNodes.append(a)\n\n        # Initialize queue with courses that have zero in-degrees\n        q = deque()\n        for i in range(numCourses):\n            if G[i].inDegrees == 0:\n                q.append(i)\n\n        #Perform topological sorting.\n\n        #Apply BFS on Graph\n        cnt = 0\n        while q:\n            v = q.popleft()         #v - current vertex\n            cnt+=1\n            for a in G[v].outNodes:\n                G[a].inDegrees -= 1\n                if G[a].inDegrees == 0:\n                    q.append(a)\n\n        return cnt==numCourses\n</code></pre> <pre><code>from collections import defaultdict\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool:\n        g = defaultdict(list)\n        indeg = [0] * numCourses\n        for a, b in prerequisites:\n            g[b].append(a)\n            indeg[a] += 1\n\n        cnt = 0\n        q = deque(i for i, x in enumerate(indeg) if x == 0)\n        while q:\n            i = q.popleft()             # i - current node\n            cnt += 1\n            for j in g[i]:              # j - neighbours\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return cnt == numCourses\n</code></pre> <p>Note</p> <p>When the queue is exited (the BFS terminates), if the number of indegrees we decrement is not equal to the number of edges, then there is a Cycle in the Graph \u2013 hence we cannot visit all the nodes.</p>","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/207/#approach-dfs","title":"Approach DFS","text":"<p> Time complexity: \\(O(\u2223V\u2223+\u2223E\u2223)\\),</p> <p> Space complexity: \\(O(\u2223V\u2223+\u2223E\u2223)\\), where \\(\u2223V\u2223=numCourses\\) and \\(\u2223E\u2223=\u2223prerequisites\u2223\\)</p> <p>Algorithm2</p> <p>To solve this problem, we can also use a depth-first search (DFS) approach to detect cycles in the course dependency graph.</p> <p>If there's a cycle, it means we can't finish all courses.</p> <p>We'll represent the graph using an adjacency list. Then, we'll perform DFS for each course.</p> <p>During DFS, we'll keep track of visited courses and courses in the current path. If we encounter a course that's already in the current path, we've found a cycle.</p> <p>The time complexity of this solution is \\(O(V + E)\\), where \\(V\\) is the number of courses and \\(E\\) is the number of prerequisites. That\u2019s because we visit each course once and each prerequisite once.</p> Python (Nested Code)Python (Modular Code) <pre><code>class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool:\n\n        #Create adjacency List\n        G = [[] for _ in range(numCourses)]\n        for course , prereq in prerequisites:\n            G[course].append(prereq)\n\n        # Track visited course and current path\n        vis = set()\n        path = set()\n\n        def dfs(course) -&gt; bool:\n            # If course is in path, we found a cycle\n            if course in path:\n                return False\n\n            # If course is already visited, its safe\n            if course in vis:\n                return True\n\n            # Add course to current path\n            path.add(course)\n\n            # Check all prerequisite\n            for prereq in G[course]:\n                if not dfs(prereq):\n                    return False\n\n            # Remove course from current path\n            path.remove(course)\n\n            # Mark course as visited\n            vis.add(course)\n\n            return True\n\n        #Check all courses\n        for course in range(numCourses):\n            if not dfs(course):\n                return False\n\n        return True\n</code></pre> <pre><code>class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -&gt; bool:\n        #Create adjacency List\n        G = [[] for _ in range(numCourses)]\n        for course , prereq in prerequisites:\n            G[course].append(prereq)\n\n        # Track visited course and current path\n        vis = set()\n        path = set()\n\n        #Check all courses\n        for course in range(numCourses):\n            if not self.dfs(course, vis, path, G):\n                return False\n\n        return True\n\n    def dfs(self, course: List[int], vis: {}, path: {}, G:List[List[int]]) -&gt; bool:\n        # If course is in path, we found a cycle\n        if course in path:\n            return False\n\n        # If course is already visited, its safe\n        if course in vis:\n            return True\n        # Add course to current path\n        path.add(course)\n\n        # Check all prerequisite\n        for prereq in G[course]:\n            if not self.dfs(prereq, vis, path, G):\n                return False\n\n        # Remove course from current path\n        path.remove(course)\n\n        # Mark course as visited\n        vis.add(course)\n\n        return True\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/208/","title":"208. Implement Trie (Prefix Tree)","text":"","tags":["Hash Table","String","Design","Trie"]},{"location":"problems/208/#208-implement-trie-prefix-tree","title":"208. Implement Trie (Prefix Tree)","text":"<p>Medium</p>","tags":["Hash Table","String","Design","Trie"]},{"location":"problems/208/#description","title":"Description","text":"<p>A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p> <p>Implement the Trie class:</p> <ul> <li> <p><code>Trie()</code> Initializes the trie object.</p> </li> <li> <p><code>void insert(String word)</code> Inserts the string word into the trie.</p> </li> <li> <p><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</p> </li> <li> <p><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</p> </li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> <li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li> <li>At most <code>3 * 10\u2074</code> calls in total will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li> </ul>","tags":["Hash Table","String","Design","Trie"]},{"location":"problems/208/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Design","Trie"]},{"location":"problems/209/","title":"209. Minimum Size Subarray Sum","text":"","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/209/#209-minimum-size-subarray-sum","title":"209. Minimum Size Subarray Sum","text":"<p>Medium</p>","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/209/#description","title":"Description","text":"<p>Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray (1) whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.</p> <ol> <li> <p> Subarray</p> <ul> <li>A subarray is a contiguous non-empty sequence of elements within an array.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\n</code></pre> <p>Example 2:</p> <pre><code>Input: target = 4, nums = [1,4,4]\nOutput: 1\n</code></pre> <p>Example 3:</p> <pre><code>Input: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= target &lt;= 10\u2079</code></li> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>1 &lt;= nums[i] &lt;= 10\u2074</code></li> </ul> <p>Follow up: If you have figured out the <code>O(n)</code> solution, try coding another solution of which the time complexity is <code>O(n log(n))</code>.</p>","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/209/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Sliding Window","Prefix Sum"]},{"location":"problems/2093/","title":"2093. Minimum Cost to Reach City With Discounts \ud83d\udd12","text":"","tags":["Graph","Heap (Priority Queue)","Shortest Path"]},{"location":"problems/2093/#2093-minimum-cost-to-reach-city-with-discounts","title":"2093. Minimum Cost to Reach City With Discounts \ud83d\udd12","text":"<p>Medium</p>","tags":["Graph","Heap (Priority Queue)","Shortest Path"]},{"location":"problems/2093/#description","title":"Description","text":"<p>A series of highways connect <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array highways where <code>highways[i] = [city1<sub>i</sub>, city2<sub>i</sub>, toll<sub>i</sub>]</code> indicates that there is a highway that connects city1<sub>i</sub> and city2<sub>i</sub>, allowing a car to go from city1<sub>i</sub> to city2<sub>i</sub> and vice versa for a cost of toll<sub>i</sub>.</p> <p>You are also given an integer discounts which represents the number of discounts you have. You can use a discount to travel across the ith highway for a cost of toll<sub>i</sub> / 2 (integer division). Each discount may only be used once, and you can only use at most one discount per highway.</p> <p>Return the minimum total cost to go from city <code>0</code> to city <code>n - 1</code>, or <code>-1</code> if it is not possible to go from city <code>0</code> to city <code>n - 1</code>.</p> <p>Example 1:</p> <pre><code>Input: n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], discounts = 1\nOutput: 9\nExplanation:\nGo from 0 to 1 for a cost of 4.\nGo from 1 to 4 and use a discount for a cost of 11 / 2 = 5.\nThe minimum cost to go from 0 to 4 is 4 + 5 = 9.\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 4, highways = [[1,3,17],[1,2,7],[3,2,5],[0,1,6],[3,0,20]], discounts = 20\nOutput: 8\nExplanation:\nGo from 0 to 1 and use a discount for a cost of 6 / 2 = 3.\nGo from 1 to 2 and use a discount for a cost of 7 / 2 = 3.\nGo from 2 to 3 and use a discount for a cost of 5 / 2 = 2.\nThe minimum cost to go from 0 to 3 is 3 + 3 + 2 = 8.\n</code></pre> <p>Example 3:</p> <pre><code>Input: n = 4, highways = [[0,1,3],[2,3,2]], discounts = 0\nOutput: -1\nExplanation:\nIt is impossible to go from 0 to 3 so return -1.\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= highways.length &lt;= 1000</code></li> <li><code>highways[i].length == 3</code></li> <li><code>0 &lt;= city1<sub>i</sub>, city2<sub>i</sub> &lt;= n - 1</code></li> <li><code>city1<sub>i</sub> != city2<sub>i</sub></code></li> <li><code>0 &lt;= toll<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= discounts &lt;= 500</code></li> <li><code>There are no duplicate highways.</code></li> </ul>","tags":["Graph","Heap (Priority Queue)","Shortest Path"]},{"location":"problems/2093/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Graph","Heap (Priority Queue)","Shortest Path"]},{"location":"problems/21/","title":"21. Merge Two Sorted Lists","text":"","tags":["Linked List","Recursion"]},{"location":"problems/21/#21-merge-two-sorted-lists","title":"21. Merge Two Sorted Lists","text":"<p>Easy</p>","tags":["Linked List","Recursion"]},{"location":"problems/21/#description","title":"Description","text":"<p>You are given the heads of two sorted linked lists list1 and list2.</p> <p>Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.</p> <p>Return the head of the merged linked list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1, 1, 2, 3, 4, 4]\n</code></pre> <p>Example 2:</p> <pre><code>Input: list1 = [], list2 = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: list1 = [], list2 = [0]\nOutput: [0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in both lists is in the range [0, 50].</code></li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>Both list1 and list2 are sorted in non-decreasing order.</code></li> </ul>","tags":["Linked List","Recursion"]},{"location":"problems/21/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Recursion"]},{"location":"problems/210/","title":"210. Course Schedule II","text":"","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/210/#210-course-schedule-ii","title":"210. Course Schedule II","text":"<p>Medium</p>","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/210/#description","title":"Description","text":"<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you must take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.</p> <p>Example 1:</p> <pre><code>Input: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0, 1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n</code></pre> <p>Example 2:</p> <pre><code>Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n</code></pre> <p>Example 3:</p> <pre><code>Input: numCourses = 1, prerequisites = []\nOutput: [0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= numCourses &lt;= 2000</code></li> <li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li> <li><code>a<sub>i</sub> != b<sub>~i</sub></code></li> <li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are distinct.</li> </ul>","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/210/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Depth-First Search","Breadth-First Search","Graph","Topological Sort"]},{"location":"problems/211/","title":"211. Design Add and Search Words Data Structure","text":"","tags":["String","Depth-First Search","Design","Trie"]},{"location":"problems/211/#211-design-add-and-search-words-data-structure","title":"211. Design Add and Search Words Data Structure","text":"<p>Medium</p>","tags":["String","Depth-First Search","Design","Trie"]},{"location":"problems/211/#description","title":"Description","text":"<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p> <p>Implement the <code>WordDictionary</code> class:</p> <ul> <li><code>WordDictionary()</code> Initializes the object.</li> <li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li> <li><code>bool search(word)</code> Returns <code>true</code> if there is any string in the data structure that matches <code>word</code> or <code>false</code> otherwise. <code>word</code> may contain dots <code>'.'</code> where dots can be matched with any letter.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 25</code></li> <li><code>word in addWord consists of lowercase English letters.</code></li> <li><code>word in search consist of '.' or lowercase English letters.</code></li> <li><code>There will be at most 2 dots in word for search queries.</code></li> <li><code>At most 10\u2074 calls will be made to addWord and search.</code></li> </ul>","tags":["String","Depth-First Search","Design","Trie"]},{"location":"problems/211/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["String","Depth-First Search","Design","Trie"]},{"location":"problems/212/","title":"212. Word Search II","text":"","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/212/#212-word-search-ii","title":"212. Word Search II","text":"<p>Hard</p>","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/212/#description","title":"Description","text":"<p>Given an <code>m x n</code> <code>board</code> of characters and a list of strings <code>words</code>, return all words on the board.</p> <p>Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p> <p>Example 1:</p> <pre><code>Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\", \"oath\"]\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 12</code></li> <li><code>board[i][j] is a lowercase English letter.</code></li> <li><code>1 &lt;= words.length &lt;= 3 * 104</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i] consists of lowercase English letters.</code></li> <li><code>All the strings of words are unique.</code></li> </ul>","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/212/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/2140/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/215/","title":"215. Kth Largest Element in an Array","text":"","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/215/#215-kth-largest-element-in-an-array","title":"215. Kth Largest Element in an Array","text":"<p>Medium</p>","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/215/#description","title":"Description","text":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the k<sup>th</sup> largest element in the array.</p> <p>Note that it is the k<sup>th</sup> largest element in the sorted order, not the k<sup>th</sup> distinct element.</p> <p>Can you solve it without sorting?</p> <p>Example 1:</p> <pre><code>Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/215/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/217/","title":"217. Contains Duplicate","text":"","tags":["Array","Hash Table","Sorting"]},{"location":"problems/217/#217-contains-duplicate","title":"217. Contains Duplicate","text":"<p>Easy</p>","tags":["Array","Hash Table","Sorting"]},{"location":"problems/217/#description","title":"Description","text":"<p>Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3,1]\n\nOutput: true\n\nExplanation:\n\nThe element 1 occurs at the indices 0 and 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,2,3,4]\n\nOutput: false\n\nExplanation:\n\nAll elements are distinct.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1,1,1,3,3,4,3,2,4,2]\n\nOutput: true\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2079 &lt;= nums[i] &lt;= 10\u2079</code></li> </ul>","tags":["Array","Hash Table","Sorting"]},{"location":"problems/217/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Sorting"]},{"location":"problems/22/","title":"22. Generate Parentheses","text":"","tags":["String","Dynamic Programming","Backtracking"]},{"location":"problems/22/#22-generate-parentheses","title":"22. Generate Parentheses","text":"<p>Medium</p>","tags":["String","Dynamic Programming","Backtracking"]},{"location":"problems/22/#description","title":"Description","text":"<p>Given <code>n</code> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p> <p>Example 1:</p> <pre><code>Input: n = 3\nOutput: [\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 1\nOutput: [\"()\"]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 8</code></li> </ul>","tags":["String","Dynamic Programming","Backtracking"]},{"location":"problems/22/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["String","Dynamic Programming","Backtracking"]},{"location":"problems/221/","title":"221. Maximal Square","text":"","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/221/#221-maximal-square","title":"221. Maximal Square","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/221/#description","title":"Description","text":"<p>Given an <code>m x n</code> binary matrix filled with <code>0's</code> and <code>1's</code>, find the largest square containing only <code>1's</code> and return its area.</p> <p>Example 1:</p> <p></p> <pre><code>Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n</code></pre> <p>Example 3:</p> <pre><code>Input: matrix = [[\"0\"]]\nOutput: 0\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li> </ul>","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/221/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/2226/","title":"2226. Maximum Candies Allocated to K Children","text":"","tags":["Array","Binary Search"]},{"location":"problems/2226/#2226-maximum-candies-allocated-to-k-children","title":"2226. Maximum Candies Allocated to K Children","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/2226/#description","title":"Description","text":"<p>You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.</p> <p>You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can be allocated candies from only one pile of candies and some piles of candies may go unused.</p> <p>Return the maximum number of candies each child can get.</p> <p>Example 1:</p> <pre><code>Input: candies = [5,8,6], k = 3\nOutput: 5\nExplanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.\n</code></pre> <p>Example 2:</p> <pre><code>Input: candies = [2,5], k = 11\nOutput: 0\nExplanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= candies.length &lt;= 105</code></li> <li><code>1 &lt;= candies[i] &lt;= 107</code></li> <li><code>1 &lt;= k &lt;= 1012</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/2226/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/224/","title":"224. Basic Calculator","text":"","tags":["Math","String","Stack","Recursion"]},{"location":"problems/224/#224-basic-calculator","title":"224. Basic Calculator","text":"<p>Hard</p>","tags":["Math","String","Stack","Recursion"]},{"location":"problems/224/#description","title":"Description","text":"<p>Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.</p> <p>Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().</p> <p>Example 1:</p> <pre><code>Input: s = \"1 + 1\"\nOutput: 2\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \" 2-1 + 2 \"\nOutput: 3\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3*10\u2075</code></li> <li><code>s consists of digits, '+', '-', '(', ')', and ' '.</code></li> <li><code>s represents a valid expression.</code></li> <li><code>'+' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).</code></li> <li><code>'-' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).</code></li> <li><code>There will be no two consecutive operators in the input.</code></li> <li><code>Every number and running calculation will fit in a signed 32-bit integer.</code></li> </ul>","tags":["Math","String","Stack","Recursion"]},{"location":"problems/224/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","String","Stack","Recursion"]},{"location":"problems/225/","title":"225. Implement Stack using Queues","text":"","tags":["Stack","Design","Queue"]},{"location":"problems/225/#225-implement-stack-using-queues","title":"225. Implement Stack using Queues","text":"<p>Easy</p>","tags":["Stack","Design","Queue"]},{"location":"problems/225/#description","title":"Description","text":"<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p> <p>Implement the <code>MyStack</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the top of the stack.</li> <li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li> <li><code>int top()</code> Returns the element on the top of the stack.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>top</code> are valid.</li> </ul> <p>Follow-up: Can you implement the stack using only one queue?</p>","tags":["Stack","Design","Queue"]},{"location":"problems/225/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Stack","Design","Queue"]},{"location":"problems/226/","title":"226. Invert Binary Tree","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/226/#226-invert-binary-tree","title":"226. Invert Binary Tree","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/226/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, invert the tree, and return its root.</p> <p>Example 1:</p> <pre><code>Input: root = [4, 2, 7, 1, 3, 6, 9]\nOutput: [4, 7, 2, 9, 6, 3, 1]\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: root = [2, 1, 3]\nOutput: [2, 3, 1]\n</code></pre> <p></p> <p>Example 3:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/226/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/2294/","title":"2294. Partition Array Such That Maximum Difference Is K","text":"","tags":["Array","Greedy","Sorting"]},{"location":"problems/2294/#2294-partition-array-such-that-maximum-difference-is-k","title":"2294. Partition Array Such That Maximum Difference Is K","text":"<p>Medium</p>","tags":["Array","Greedy","Sorting"]},{"location":"problems/2294/#description","title":"Description","text":"<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You may partition <code>nums</code> into one or more subsequences such that each element in <code>nums</code> appears in exactly one of the subsequences.</p> <p>Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence (1) is at most <code>k</code>.</p> <ol> <li> <p></p> <ul> <li>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: nums = [3,6,1,2,5], k = 2\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,2,3], k = 1\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [2,2,4,5], k = 0\nOutput: 3\nExplanation:\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>0 &lt;= nums[i] &lt;= 10\u2075</code></li> <li><code>0 &lt;= k &lt;= 10\u2075</code></li> </ul>","tags":["Array","Greedy","Sorting"]},{"location":"problems/2294/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Greedy","Sorting"]},{"location":"problems/23/","title":"23. Merge k Sorted Lists","text":"","tags":["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},{"location":"problems/23/#23-merge-k-sorted-lists","title":"23. Merge k Sorted Lists","text":"<p>Hard</p>","tags":["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},{"location":"problems/23/#description","title":"Description","text":"<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p> <p>Merge all the linked-lists into one sorted linked-list and return it.</p> <p>Example 1:</p> <pre><code>Input: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted linked list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre> <p>Example 2:</p> <pre><code>Input: lists = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: lists = [[]]\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li><code>k == lists.length</code></li> <li><code>0 &lt;= k &lt;= 10\u2074</code></li> <li><code>0 &lt;= lists[i].length &lt;= 500</code></li> <li><code>-10\u2074 &lt;= lists[i][j] &lt;= 10\u2074</code></li> <li><code>lists[i] is sorted in ascending order.</code></li> <li><code>The sum of lists[i].length will not exceed 104.</code></li> </ul>","tags":["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},{"location":"problems/23/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},{"location":"problems/230/","title":"230. Kth Smallest Element in a BST","text":"","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/230/#230-kth-smallest-element-in-a-bst","title":"230. Kth Smallest Element in a BST","text":"<p>Medium</p>","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/230/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return the k<sup>th</sup> smallest value (1-indexed) of all the values of the nodes in the tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [3,1,4,null,2], k = 1\nOutput: 1\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 10\u2074</code></li> <li><code>0 &lt;= Node.val &lt;= 10\u2074</code></li> </ul> <p>Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p>","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/230/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/232/","title":"232. Implement Queue using Stacks","text":"","tags":["Stack","Design","Queue"]},{"location":"problems/232/#232-implement-queue-using-stacks","title":"232. Implement Queue using Stacks","text":"<p>Easy</p>","tags":["Stack","Design","Queue"]},{"location":"problems/232/#description","title":"Description","text":"<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p> <p>Implement the <code>MyQueue</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the back of the queue.</li> <li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li> <li><code>int peek()</code> Returns the element at the front of the queue.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>top</code> are valid.</li> </ul> <p>Follow-up: Can you implement the queue such that each operation is amortized <code>O(1)</code> time complexity? In other words, performing n operations will take overall <code>O(n)</code> time even if one of those operations may take longer.</p>","tags":["Stack","Design","Queue"]},{"location":"problems/232/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Stack","Design","Queue"]},{"location":"problems/238/","title":"238. Product of Array Except Self","text":"","tags":["Array","Prefix Sum"]},{"location":"problems/238/#238-product-of-array-except-self","title":"238. Product of Array Except Self","text":"<p>Medium</p>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#description","title":"Description","text":"<p>Given an integer array <code>nums</code>, return an array <code>answer</code> such that <code>answer[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p> <p>The product of any prefix or suffix of <code>nums</code> is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3,4]\nOutput: [24, 12, 8, 6]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1,1,0,-3,3]\nOutput: [0, 0, 9, 0, 0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10\u2075</code>.</li> <li><code>-30 &lt;= nums[i] &lt;= 30</code></li> <li><code>The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.</code></li> </ul> <p>Follow up: Can you solve the problem in <code>O(1)</code> extra space complexity? (The output array does not count as extra space for space complexity analysis.)</p>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#approach-prefixsum","title":"Approach: PrefixSum","text":"Algorithm Template","tags":["Array","Prefix Sum"]},{"location":"problems/238/#build-a-prefix-sum","title":"Build a prefix sum","text":"<pre><code>def fn(arr):\n    prefix = [arr[0]]\n    for i in range(1, len(arr)):\n        prefix.append(prefix[-1] + arr[i])\n\n    return prefix\n</code></pre>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#way-1-using-two-arrays","title":"Way 1: Using Two arrays","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> <p>where \\(n\\) is the no. of elements in the input array</p> <p>Algorithm</p> <p>To solve this problem efficiently without using division, we\u2019ll use two additional arrays.</p> <p>First, we'll create a left product array \u201cfrom_left\u201d where each element at index i represents the product of all elements to the left of nums[i].</p> <p>Then, we'll create a right product array \u201cfrom_right\u201d where each element at index i represents the product of all elements to the right of nums[i].</p> <p>Finally, we'll compute the result array \u201cres\u201d by multiplying corresponding elements from \u201cfrom_left\u201d and \u201cfrom_right\u201d.</p> <p>Time complexity of this solution is O(n).</p> Python <pre><code>class Solution: # 2 extra arrays\n    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n        n = len(nums)\n\n        #Initialize left product array\n        from_left = [1]*n\n        # Product from index=0 to index=i-1\n        for i  in range(1,n):\n            from_left[i] = from_left[i-1]*nums[i-1]\n\n        #Initialize right product array\n        from_right = [1]*n\n        # Product from index=n-1 to current position\n        for i  in range(n-2,-1,-1):\n            from_right[i] =from_right[i+1]*nums[i+1]\n\n        #Compute answer\n        res = [1]*n\n        for i in range(n):\n            res[i] = from_left[i]*from_right[i]\n\n        return res\n</code></pre> quick tip <p>Use List comprehension it is efficient</p> <pre><code>res = [from_left[i]*from_right[i] for i in range(n)]\n\n        V\n      better\n        V\n\nres = [1]*n\nfor i in range(n):\n    res[i] = from_left[i]*from_right[i]\n</code></pre>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#way-2-optimized-approach-for-follow-up","title":"Way 2: Optimized Approach for Follow Up","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(1)\\)</p> <p>Algorithm</p> <p>We define two variables <code>left</code> and <code>right</code>, which represent the product of all elements to the left and right of the current element respectively.</p> <p>Initially, <code>left = 1</code>, <code>right = 1</code>. Define an answer array <code>ans</code> of length n.</p> <p>We first traverse the array from left to right, for the <code>ith</code> element we update <code>ans[i]</code> with <code>left</code>, then left multiplied by <code>nums[i]</code>.</p> <p>Then, we traverse the array from right to left, for the <code>ith</code> element, we update <code>ans[i]</code> to <code>ans[i]*right</code>, then right multiplied by <code>nums[i]</code>.</p> <p>After the traversal, the array <code>ans</code> is the answer.</p> <p>The time complexity is \\(O(n)\\), where \\(n\\) is the length of the array nums. Ignoring the space consumption of the answer array, the space complexity is O(1).</p> Python <pre><code>class Solution:\n    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n    n = len(nums)\n\n    ans = [1]*n\n\n    #traverse the array from left to right\n    left =1\n    for i in range(n):\n        ans[i]=left\n        left = left*nums[i]\n\n    #traverse the array from right to left\n    right = 1\n    for i in range(n-1, -1, -1):\n        ans[i] = ans[i]*right\n        right = right*nums[i]\n\n    return ans\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Prefix Sum"]},{"location":"problems/239/","title":"239. Sliding Window Maximum","text":"","tags":["Array","Queue","Sliding Window","Heap (Priority Queue)","Monotonic Queue"]},{"location":"problems/239/#239-sliding-window-maximum","title":"239. Sliding Window Maximum","text":"<p>Hard</p>","tags":["Array","Queue","Sliding Window","Heap (Priority Queue)","Monotonic Queue"]},{"location":"problems/239/#description","title":"Description","text":"<p>You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the max sliding window.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation:\nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1], k = 1\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>","tags":["Array","Queue","Sliding Window","Heap (Priority Queue)","Monotonic Queue"]},{"location":"problems/239/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Queue","Sliding Window","Heap (Priority Queue)","Monotonic Queue"]},{"location":"problems/240/","title":"240. Search a 2D Matrix II","text":"","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/240/#240-search-a-2d-matrix-ii","title":"240. Search a 2D Matrix II","text":"<p>Medium</p>","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/240/#description","title":"Description","text":"<p>Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:</p> <ul> <li>Integers in each row are sorted in ascending from left to right.</li> <li>Integers in each column are sorted in ascending from top to bottom.</li> </ul> <p>Example 1:</p> <pre><code>Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= n, m &lt;= 300</code></li> <li><code>-109 &lt;= matrix[i][j] &lt;= 109</code></li> <li><code>All the integers in each row are sorted in ascending order.</code></li> <li><code>All the integers in each column are sorted in ascending order.</code></li> <li><code>-109 &lt;= target &lt;= 109</code></li> </ul>","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/240/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/242/","title":"242. Valid Anagram","text":"","tags":["Hash Table","String","Sorting"]},{"location":"problems/242/#242-valid-anagram","title":"242. Valid Anagram","text":"<p>Easy</p>","tags":["Hash Table","String","Sorting"]},{"location":"problems/242/#description","title":"Description","text":"<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p> <p>Example 1:</p> <pre><code>Input: s = \"anagram\", t = \"nagaram\"\n\nOutput: true\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"rat\", t = \"car\"\n\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 5 * 10\u2074</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul>","tags":["Hash Table","String","Sorting"]},{"location":"problems/242/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sorting"]},{"location":"problems/2461/","title":"2461. Maximum Sum of Distinct Subarrays With Length K","text":"","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/2461/#2461-maximum-sum-of-distinct-subarrays-with-length-k","title":"2461. Maximum Sum of Distinct Subarrays With Length K","text":"<p>Medium</p>","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/2461/#description","title":"Description","text":"<p>You are given an integer array nums and an integer k. Find the maximum subarray sum of all the subarrays of nums that meet the following conditions:</p> <ul> <li>The length of the subarray is k, and</li> <li>All the elements of the subarray are distinct.</li> </ul> <p>Return the maximum subarray sum of all the subarrays (1) that meet the conditions. If no subarray meets the conditions, return 0.</p> <ol> <li> <p> Subarray</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> </li> </ol> <p>Example 1:</p> <pre><code>Input: nums = [1,5,4,2,9,9,9], k = 3\nOutput: 15\nExplanation: The subarrays of nums with length 3 are:\n- [1,5,4] which meets the requirements and has a sum of 10.\n- [5,4,2] which meets the requirements and has a sum of 11.\n- [4,2,9] which meets the requirements and has a sum of 15.\n- [2,9,9] which does not meet the requirements because the element 9 is repeated.\n- [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [4,4,4], k = 3\nOutput: 0\nExplanation: The subarrays of nums with length 3 are:\n- [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>1 &lt;= nums[i] &lt;= 10\u2075</code></li> </ul>","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/2461/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Sliding Window"]},{"location":"problems/25/","title":"25. Reverse Nodes in k-Group","text":"","tags":["Linked List","Recursion"]},{"location":"problems/25/#25-reverse-nodes-in-k-group","title":"25. Reverse Nodes in k-Group","text":"<p>Hard</p>","tags":["Linked List","Recursion"]},{"location":"problems/25/#description","title":"Description","text":"<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return the modified list.</p> <p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p> <p>You may not alter the values in the list's nodes, only nodes themselves may be changed.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], k = 2\nOutput: [2, 1, 4, 3, 5]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], k = 3\nOutput: [3, 2, 1, 4, 5]\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in the list is n.</code></li> <li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul> <p>Follow-up: Can you solve the problem in <code>O(1)</code> extra memory space?</p>","tags":["Linked List","Recursion"]},{"location":"problems/25/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Recursion"]},{"location":"problems/2503/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/259/","title":"259. 3Sum Smaller \ud83d\udd12","text":"","tags":["Array","Binary Search","Sorting","Two Pointers"]},{"location":"problems/259/#259-3sum-smaller","title":"259. 3Sum Smaller \ud83d\udd12","text":"<p>Medium</p>","tags":["Array","Binary Search","Sorting","Two Pointers"]},{"location":"problems/259/#description","title":"Description","text":"<p>Given an array of <code>n</code> integers <code>nums</code> and an integer <code>target</code>, find the number of index triplets <code>i</code>, <code>j</code>, <code>k</code> with <code>0 &lt;= i &lt; j &lt; k &lt; n</code> that satisfy the condition <code>nums[i] + nums[j] + nums[k] &lt; target</code>.</p> <p>Example 1:</p> <pre><code>Input: nums = [-2,0,1,3], target = 2\nOutput: 2\nExplanation: Because there are two triplets which sums are less than 2:\n[-2,0,1]\n[-2,0,3]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [], target = 0\nOutput: 0\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [0], target = 0\nOutput: 0\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>0 &lt;= n &lt;= 3500</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>-100 &lt;= target &lt;= 100</code></li> </ul>","tags":["Array","Binary Search","Sorting","Two Pointers"]},{"location":"problems/259/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Sorting","Two Pointers"]},{"location":"problems/26/","title":"26. Remove Duplicates from Sorted Array","text":"","tags":["Array","Two Pointers"]},{"location":"problems/26/#26-remove-duplicates-from-sorted-array","title":"26. Remove Duplicates from Sorted Array","text":"<p>Easy</p>","tags":["Array","Two Pointers"]},{"location":"problems/26/#description","title":"Description","text":"<p>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.</p> <p>Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:</p> <ul> <li>Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.</li> <li>Return k.</li> </ul> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre><code>int[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\nassert nums[i] == expectedNums[i];\n}\n</code></pre> <p>If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10\u2074</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul>","tags":["Array","Two Pointers"]},{"location":"problems/26/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers"]},{"location":"problems/268/","title":"268. Missing Number","text":"","tags":["Array","Hash Table","Math","Binary Search","Bit Manipulation","Sorting"]},{"location":"problems/268/#268-missing-number","title":"268. Missing Number","text":"<p>Easy</p>","tags":["Array","Hash Table","Math","Binary Search","Bit Manipulation","Sorting"]},{"location":"problems/268/#description","title":"Description","text":"<p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return the only number in the range that is missing from the array.</p> <p>Example 1:</p> <pre><code>Input: nums = [3,0,1]\n\nOutput: 2\n\nExplanation:\nn = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1]\n\nOutput: 2\n\nExplanation:\nn = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [9,6,4,2,3,5,7,0,1]\n\nOutput: 8\n\nExplanation:\nn = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 104</code></li> <li><code>0 &lt;= nums[i] &lt;= n</code></li> <li><code>All the numbers of nums are unique.</code></li> </ul> <p>Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?</p>","tags":["Array","Hash Table","Math","Binary Search","Bit Manipulation","Sorting"]},{"location":"problems/268/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Math","Binary Search","Bit Manipulation","Sorting"]},{"location":"problems/27/","title":"27. Remove Element","text":"","tags":["Array","Two Pointers"]},{"location":"problems/27/#27-remove-element","title":"27. Remove Element","text":"<p>Easy</p>","tags":["Array","Two Pointers"]},{"location":"problems/27/#description","title":"Description","text":"<p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> in-place. The order of the elements may be changed. Then return the number of elements in <code>nums</code> which are not equal to <code>val</code>.</p> <p>Consider the number of elements in <code>nums</code> which are not equal to val be <code>k</code>, to get accepted, you need to do the following things:</p> <ul> <li> <p>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</p> </li> <li> <p>Return <code>k</code>.</p> </li> </ul> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre><code>int[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</code></pre> <p>If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <pre><code>Input: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 100</code></li> </ul>","tags":["Array","Two Pointers"]},{"location":"problems/27/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers"]},{"location":"problems/289/","title":"289. Game of Life","text":"","tags":["Array","Matrix","Simulation"]},{"location":"problems/289/#289-game-of-life","title":"289. Game of Life","text":"<p>Medium</p>","tags":["Array","Matrix","Simulation"]},{"location":"problems/289/#description","title":"Description","text":"<p>According to Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"</p> <p>The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p> <ol> <li>Any live cell with fewer than two live neighbors dies as if caused by under-population.</li> <li>Any live cell with two or three live neighbors lives on to the next generation.</li> <li>Any live cell with more than three live neighbors dies, as if by over-population.</li> <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li> </ol> <p>The next state of the board is determined by applying the above rules simultaneously to every cell in the current state of the m x n grid board. In this process, births and deaths occur simultaneously.</p> <p>Given the current state of the board, update the board to reflect its next state.</p> <p>Note that you do not need to return anything.</p> <p>Example 1:</p> <p></p> <pre><code>Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\nOutput: [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: board = [[1,1],[1,0]]\nOutput: [[1, 1], [1, 1]]\n</code></pre> <p>Constraints:</p> <ul> <li>m == board.length</li> <li>n == board[i].length</li> <li>1 &lt;= m, n &lt;= 25</li> <li>board[i][j] is 0 or 1.</li> </ul>","tags":["Array","Matrix","Simulation"]},{"location":"problems/289/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Matrix","Simulation"]},{"location":"problems/29/","title":"29. Divide Two Integers","text":"","tags":["Math","Bit Manipulation"]},{"location":"problems/29/#29-divide-two-integers","title":"29. Divide Two Integers","text":"<p>Medium</p>","tags":["Math","Bit Manipulation"]},{"location":"problems/29/#description","title":"Description","text":"<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division, and mod operator.</p> <p>The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.</p> <p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p> <p>Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u22122<sup>31</sup>, 2<sup>31</sup> \u2212 1]. For this problem, if the quotient is strictly greater than 2<sup>31</sup> - 1, then return 2<sup>31</sup> - 1, and if the quotient is strictly less than -2<sup>31</sup>, then return -2<sup>31</sup>.</p> <p>Example 1:</p> <pre><code>Input: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>-2</code><sup>31</sup><code>&lt;= dividend, divisor &lt;= 2</code><sup>31</sup><code>- 1</code></li> <li><code>divisor != 0</code></li> </ul>","tags":["Math","Bit Manipulation"]},{"location":"problems/29/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Bit Manipulation"]},{"location":"problems/295/","title":"295. Find Median from Data Stream","text":"","tags":["Two Pointers","Design","Sorting","Heap (Priority Queue)","Data Stream"]},{"location":"problems/295/#295-find-median-from-data-stream","title":"295. Find Median from Data Stream","text":"<p>Hard</p>","tags":["Two Pointers","Design","Sorting","Heap (Priority Queue)","Data Stream"]},{"location":"problems/295/#description","title":"Description","text":"<p>The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p> <ul> <li> <p>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</p> </li> <li> <p>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</p> </li> </ul> <p>Implement the MedianFinder class:</p> <ul> <li> <p><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</p> </li> <li> <p><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</p> </li> <li> <p><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10\u207b\u2075</code> of the actual answer will be accepted.</p> </li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</code></pre> <p>Constraints:</p> <ul> <li><code>-10\u2075 &lt;= num &lt;= 10\u2075</code></li> <li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li> <li>At most <code>5 * 10\u2074</code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li> </ul> <p>Follow up:</p> <ul> <li> <p>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</p> </li> <li> <p>If 99% of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</p> </li> </ul>","tags":["Two Pointers","Design","Sorting","Heap (Priority Queue)","Data Stream"]},{"location":"problems/295/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Two Pointers","Design","Sorting","Heap (Priority Queue)","Data Stream"]},{"location":"problems/297/","title":"297. Serialize and Deserialize Binary Tree","text":"","tags":["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]},{"location":"problems/297/#297-serialize-and-deserialize-binary-tree","title":"297. Serialize and Deserialize Binary Tree","text":"<p>Hard</p>","tags":["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]},{"location":"problems/297/#description","title":"Description","text":"<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p> <p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p> <p>Example 1:</p> <pre><code>Input: root = [1,2,3,null,null,4,5]\nOutput: [1, 2, 3, null, null, 4, 5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10\u2074]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>","tags":["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]},{"location":"problems/297/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]},{"location":"problems/297/#approach-dfs-pre-order-traversal","title":"Approach : DFS: Pre-order traversal","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> <p>Algorithm 1</p> <p>Pre-order traversal method.</p> <p>For serialization, we start from the root node. If the node exists, store the value in the output string stream, and then recursively call the serialization function on its left and right child nodes.</p> <p>For deserialization, we first read in the first character to generate a root node, and then recursively call the deserialization function on the left and right child nodes of the root node.</p> Python <pre><code># Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n\n        if root is None:\n            return ''\n        res = []\n\n        def preorder(root):\n            if root is None:\n                res.append(\"#,\")\n                return\n            res.append(str(root.val) + \",\")\n            preorder(root.left)\n            preorder(root.right)\n\n        preorder(root)\n        return ''.join(res)\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not data:\n            return None\n        vals = data.split(',')\n\n        def preorder() -&gt; 'TreeNode':\n            s = vals.pop(0)\n            if s == '#':\n                return None\n\n            root = TreeNode(s)\n            root.left = preorder()\n            root.right = preorder()\n            return root\n\n        return preorder()\n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))\n</code></pre>","tags":["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]},{"location":"problems/297/#approach-bfs-level-order-traversal","title":"Approach: BFS (Level Order Traversal)","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> <p>Algorithm 2</p> <p>We can use level order traversal to serialize the binary tree.</p> <p>Starting from the root node, we add the nodes of the binary tree to the queue in the order from top to bottom, from left to right. Then we dequeue the nodes in the queue one by one. If the node is not null, we add its value to the serialized string; otherwise, we add a special character <code>#</code>. Finally, we return the serialized string.</p> <p>During deserialization, we split the serialized string by the delimiter to get a string array, and then add the elements in the string array to the queue in order. The elements in the queue are the nodes of the binary tree. We dequeue the elements from the queue one by one. If the element is not <code>#</code>, we convert it to an integer and use it as the value of the node, and then add the node to the queue; otherwise, we set it to <code>null</code>. Finally, we return the root node.</p> <p>The time complexity is \\(O(n)\\), and the space complexity is \\(O(n)\\). Where \\(n\\) is the number of nodes in the binary tree.</p> Python <pre><code># Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if root is None:\n            return \"\"\n        q = deque([root])\n        ans = []\n        while q:\n            node = q.popleft()\n            if node:\n                ans.append(str(node.val))\n                q.append(node.left)\n                q.append(node.right)\n            else:\n                ans.append(\"#\")\n        return \",\".join(ans)\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not data:\n            return None\n        vals = data.split(\",\")\n        root = TreeNode(int(vals[0]))\n        q = deque([root])\n        i = 1\n        while q:\n            node = q.popleft()\n            if vals[i] != \"#\":\n                node.left = TreeNode(int(vals[i]))\n                q.append(node.left)\n            i += 1\n            if vals[i] != \"#\":\n                node.right = TreeNode(int(vals[i]))\n                q.append(node.right)\n            i += 1\n        return root\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["String","Tree","Depth-First Search","Breadth-First Search","Design","Binary Tree"]},{"location":"problems/3/","title":"3. Longest Substring Without Repeating Characters","text":"","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/3/#3-longest-substring-without-repeating-characters","title":"3. Longest Substring Without Repeating Characters","text":"<p>Medium</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/3/#description","title":"Description","text":"<p>Given a string <code>s</code>, find the length of the longest substring (1) without duplicate characters.</p> <ol> <li> <p></p> <ul> <li>A substring is a contiguous non-empty sequence of characters within a string.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 5 * 104</code></li> <li><code>s consists of English letters, digits, symbols and spaces.</code></li> </ul>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/3/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/300/","title":"300. Longest Increasing Subsequence","text":"","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/300/#300-longest-increasing-subsequence","title":"300. Longest Increasing Subsequence","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/300/#description","title":"Description","text":"<p>Given an integer array nums, return the length of the longest strictly increasing subsequence (1).</p> <ol> <li> <p> Subsequence</p> <ul> <li>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1,0,3,2,3]\nOutput: 4\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [7,7,7,7,7,7,7]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2500</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> </ul> <p>Follow up: Can you come up with an algorithm that runs in <code>O(n log(n))</code> time complexity?</p>","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/300/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/322/","title":"322. Coin Change","text":"","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/322/#322-coin-change","title":"322. Coin Change","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/322/#description","title":"Description","text":"<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer amount representing a total <code>amount</code> of money.</p> <p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p>Example 1:</p> <pre><code>Input: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n</code></pre> <p>Example 2:</p> <pre><code>Input: coins = [2], amount = 3\nOutput: -1\n</code></pre> <p>Example 3:</p> <pre><code>Input: coins = [1], amount = 0\nOutput: 0\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= coins.length &lt;= 12</code></li> <li><code>1 &lt;= coins[i] &lt;= 2\u00b3\u00b9 - 1</code></li> <li><code>0 &lt;= amount &lt;= 10\u2074</code></li> </ul>","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/322/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Breadth-First Search"]},{"location":"problems/33/","title":"33. Search in Rotated Sorted Array","text":"","tags":["Array","Binary Search"]},{"location":"problems/33/#33-search-in-rotated-sorted-array","title":"33. Search in Rotated Sorted Array","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/33/#description","title":"Description","text":"<p>There is an integer array <code>nums</code> sorted in ascending order (with distinct values).</p> <p>Prior to being passed to your function, <code>nums</code> is possibly rotated at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is [<code>nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]</code>] (0-indexed). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p> <p>Given the array <code>nums</code> after the possible rotation and an integer <code>target</code>, return the index of <code>target</code> if it is in <code>nums</code>, or <code>-1</code> if it is not in <code>nums</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1], target = 0\nOutput: -1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> <li><code>All values of nums are unique.</code></li> <li><code>nums</code> is an ascending array that is possibly rotated.</li> <li><code>-10\u2074 &lt;= target &lt;= 10\u2074</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/33/#solutions","title":"Solutions","text":"<p>Video Solution Coming Soon</p>","tags":["Array","Binary Search"]},{"location":"problems/33/#approach-binary-search","title":"Approach: Binary Search","text":"<p> Time complexity: \\(O(\\log n)\\)</p> <p> Space complexity: \\(O(1)\\)</p> Algorithm Template <p>Tip</p> <p>Learn this , this is the Binary Search in a Rotated array containing duplicates and write this in interviews</p> Python <pre><code>class Solution:\n    def search(self, nums: List[int], target: int) -&gt; int:\n        n=len(nums)\n        l, r = 0, n-1\n\n        while l&lt;=r:\n            mid=(l+r)//2\n\n            if nums[mid] ==target: #pitfall see nums[mid]==target not mid ==target , mid is the index value\n                return mid\n\n            #condition to check for duplicates , you can remove this `if` condition if you want then change below `elif` to `if`\n            if nums[l] == nums[mid] == nums[r]: #to skip the same elements/or identical values/duplicates\n                l += 1\n                r -= 1\n\n            elif nums[mid]&gt;=nums[l]:  # left half array nums[l..m] are sorted\n                if nums[l]&lt;=target&lt;nums[mid]:\n                    r=mid-1\n                else:\n                    l=mid+1\n            else: #nums[l]&gt;nums[mid]  #right half array nums[m..n - 1] are sorted\n                if nums[mid]&lt;target&lt;=nums[r]:\n                    l=mid+1\n                else:\n                    r=mid-1\n\n        return -1\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/33/#binary-search-template","title":"Binary Search - Template","text":"<pre><code>def fn(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:  # found the target\n            # do something\n            return\n        if arr[mid] &gt; target:\n        #update right pointer because target lies in left half\n            right = mid - 1\n        else:\n        #update left pointer because target lies in right half\n            left = mid + 1\n\n    # left is the insertion point\n    return left\n</code></pre>","tags":["Array","Binary Search"]},{"location":"problems/34/","title":"34. Find First and Last Position of Element in Sorted Array","text":"","tags":["Array","Binary Search"]},{"location":"problems/34/#34-find-first-and-last-position-of-element-in-sorted-array","title":"34. Find First and Last Position of Element in Sorted Array","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/34/#description","title":"Description","text":"<p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p> <p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3, 4]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1, -1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [], target = 0\nOutput: [-1, -1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2079 &lt;= nums[i] &lt;= 10\u2079</code></li> <li><code>nums</code> is a non-decreasing array.</li> <li><code>-10\u2079 &lt;= target &lt;= 10\u2079</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/34/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/344/","title":"344. Reverse String","text":"","tags":["Two Pointers","String"]},{"location":"problems/344/#344-reverse-string","title":"344. Reverse String","text":"<p>Easy</p>","tags":["Two Pointers","String"]},{"location":"problems/344/#description","title":"Description","text":"<p>Write a function that reverses a string. The input string is given as an array of characters s.</p> <p>You must do this by modifying the input array in-place with <code>O(1)</code> extra memory.</p> <p>Example 1:</p> <pre><code>Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\", \"l\", \"l\", \"e\", \"h\"]\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\", \"a\", \"n\", \"n\", \"a\", \"H\"]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 105</code></li> <li><code>s[i]</code> is a printable ascii character.</li> </ul>","tags":["Two Pointers","String"]},{"location":"problems/344/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Two Pointers","String"]},{"location":"problems/347/","title":"347. Top K Frequent Elements","text":"","tags":["Array","Hash Table","Divide and Conquer","Sorting","Heap (Priority Queue)","Bucket Sort","Counting","Quickselect"]},{"location":"problems/347/#347-top-k-frequent-elements","title":"347. Top K Frequent Elements","text":"<p>Easy</p>","tags":["Array","Hash Table","Divide and Conquer","Sorting","Heap (Priority Queue)","Bucket Sort","Counting","Quickselect"]},{"location":"problems/347/#description","title":"Description","text":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>k</code> most frequent elements. You may return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1, 2]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1], k = 1\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> <li><code>k is in the range [1, the number of unique elements in the array].</code></li> <li><code>It is guaranteed that the answer is unique.</code></li> </ul> <p>Follow up: Your algorithm's time complexity must be better than <code>O(n log n)</code>, where <code>n</code> is the array's size.</p>","tags":["Array","Hash Table","Divide and Conquer","Sorting","Heap (Priority Queue)","Bucket Sort","Counting","Quickselect"]},{"location":"problems/347/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Divide and Conquer","Sorting","Heap (Priority Queue)","Bucket Sort","Counting","Quickselect"]},{"location":"problems/3477/","title":"3477. Fruits Into Baskets II","text":"","tags":["Array","Binary Search","Segment Tree","Simulation","Ordered Set"]},{"location":"problems/3477/#3477-fruits-into-baskets-ii","title":"3477. Fruits Into Baskets II","text":"<p>Easy</p>","tags":["Array","Binary Search","Segment Tree","Simulation","Ordered Set"]},{"location":"problems/3477/#description","title":"Description","text":"<p>You are given two arrays of integers, <code>fruits</code> and <code>baskets</code>, each of length <code>n</code>, where <code>fruits[i]</code> represents the quantity of the i^{th} type of fruit, and <code>baskets[j]</code> represents the capacity of the j^{th} basket.</p> <p>From left to right, place the fruits according to these rules:</p> <ul> <li>Each fruit type must be placed in the leftmost available basket with a capacity greater than or equal to the quantity of that fruit type.</li> <li>Each basket can hold only one type of fruit.</li> <li>If a fruit type cannot be placed in any basket, it remains unplaced.</li> </ul> <p>Return the number of fruit types that remain unplaced after all possible allocations are made.</p> <p>Example 1:</p> <pre><code>Input: fruits = [4,2,5], baskets = [3,5,4]\n\nOutput: 1\n\nExplanation:\n\nfruits[0] = 4 is placed in baskets[1] = 5.\nfruits[1] = 2 is placed in baskets[0] = 3.\nfruits[2] = 5 cannot be placed in baskets[2] = 4.\nSince one fruit type remains unplaced, we return 1.\n</code></pre> <p>Example 2:</p> <pre><code>Input: fruits = [3,6,1], baskets = [6,4,7]\n\nOutput: 0\n\nExplanation:\n\nfruits[0] = 3 is placed in baskets[0] = 6.\nfruits[1] = 6 cannot be placed in baskets[1] = 4 (insufficient capacity) but can be placed in the next available basket, baskets[2] = 7.\nfruits[2] = 1 is placed in baskets[1] = 4.\nSince all fruits are successfully placed, we return 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == fruits.length == baskets.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= fruits[i], baskets[i] &lt;= 1000</code></li> </ul>","tags":["Array","Binary Search","Segment Tree","Simulation","Ordered Set"]},{"location":"problems/3477/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Segment Tree","Simulation","Ordered Set"]},{"location":"problems/355/","title":"355. Design Twitter","text":"","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/355/#355-design-twitter","title":"355. Design Twitter","text":"<p>Hard</p>","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/355/#description","title":"Description","text":"<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.</p> <p>Implement the <code>Twitter</code> class:</p> <ol> <li> <p><code>Twitter()</code></p> <p>Initializes your twitter object.</p> </li> <li> <p><code>void postTweet(int userId, int tweetId)</code></p> <p>Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.</p> </li> <li> <p><code>List&lt;Integer&gt; getNewsFeed(int userId)</code></p> <p>Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.</p> </li> <li> <p><code>void follow(int followerId, int followeeId)</code></p> <p>The user with ID followerId started following the user with ID followeeId.</p> </li> <li> <p><code>void unfollow(int followerId, int followeeId)</code></p> <p>The user with ID followerId started unfollowing the user with ID followeeId.</p> </li> </ol> <p>Example 1:</p> <pre><code>Input\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\n\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li> <li><code>0 &lt;= tweetId &lt;= 10\u2074</code></li> <li><code>All the tweets have unique IDs.</code></li> <li><code>At most 3 * 10\u2074 calls will be made to postTweet, getNewsFeed, follow, and unfollow.</code></li> <li><code>A user cannot follow himself.</code></li> </ul>","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/355/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/355/#approach-heap-priority-queue","title":"Approach : Heap (Priority Queue)","text":"<p> Time complexity: \\(O(n \\log k)\\), where \\(n =|\\text tweets\u2223\\) and \\(k = (min(10,\u2223\\text tweets\u2223))\\)</p> <p> Space complexity: \\(O(n + m)\\)</p> <p>Algorithm</p> <ul> <li>The Twitter class needs to handle posting tweets, following/unfollowing users, and retrieving the 10 most recent tweets in a user's news feed.</li> <li>We use a counter to assign a unique, decrementing timestamp to each tweet, which helps in sorting tweets by recency.</li> <li>Tweets are stored in a deque for each user, allowing efficient addition to the front and removal from the back when more than 10 tweets are present.</li> <li>Follow relationships are managed using sets to ensure that each user follows another user uniquely and efficiently check follow status.</li> <li>To retrieve the news feed, we gather all tweets from the user and their followees, merge these sorted lists using a heap, and then extract the top 10 tweets.</li> </ul> Python <pre><code>import itertools\nimport collections\nimport heapq\n\nclass Twitter:\n    def __init__(self):\n        self.timer = itertools.count(step=-1)                       # Initialize a counter that starts at 0 and increments by -1 each time (to simulate time)\n        self.tweets = collections.defaultdict(deque)                # Store tweets in a deque to maintain order and limit to 10 tweets per user\n        self.followees = collections.defaultdict(set)               # Store follow relationships in a set for each user\n\n    def postTweet(self, userId: int, tweetId: int) -&gt; None:\n        self.tweets[userId].appendleft((next(self.timer), tweetId)) # Record the tweet with a timestamp and tweetId\n        if len(self.tweets[userId]) &gt; 10:                           # Ensure only the last 10 tweets are kept\n            self.tweets[userId].pop()\n\n    def getNewsFeed(self, userId: int) -&gt; list[int]:\n        tweets = []                                                 # Collect all tweets from the user and their followees\n        for followee in self.followees[userId] | {userId}:\n            tweets.append(self.tweets[followee])\n        merged*tweets = heapq.merge(*tweets)                        # Merge the sorted deques into a single sorted iterator\n        return [tweetId for *, tweetId in list(merged_tweets)[:10]] # Return the last 10 tweetIds from the merged sorted iterator\n\n    def follow(self, followerId: int, followeeId: int) -&gt; None:\n        self.followees[followerId].add(followeeId)                  # Add followeeId to the set of users that followerId is following\n\n    def unfollow(self, followerId: int, followeeId: int) -&gt; None:\n        self.followees[followerId].discard(followeeId)              # Remove followeeId from the set of users that followerId is following\n\n# Your Twitter object will be instantiated and called as such:\n# obj = Twitter()\n# obj.postTweet(userId,tweetId)\n# param_2 = obj.getNewsFeed(userId)\n# obj.follow(followerId,followeeId)\n# obj.unfollow(followerId,followeeId)\n</code></pre> equivalency <pre><code>def getNewsFeed(self, userId: int) -&gt; list[int]:\n    tweets = []\n    for followee in self.followees[userId] | {userId}:\n        tweets.append(self.tweets[followee])\n    merged_tweets = heapq.merge(*tweets)\n    return [tweetId for _ , tweetId in list(merged_tweets)[:10]]\n\n                ||\n                ||\n                ||\n\ndef getNewsFeed(self, userId: int) -&gt; list[int]:\n    tweets = [self.tweets[followee] for followee in self.followees[userId] | {userId}]\n    merged_tweets = heapq.merge(*tweets)\n    return [tweetId for _ , tweetId in list(merged_tweets)[:10]]\n\n                ||\n                ||\n                ||\n\ndef getNewsFeed(self, userId: int) -&gt; list[int]:\n    tweets = list(heapq.merge(*(self.tweets[followee] for followee in self.followees[userId] | {userId})))\n    return [tweetId for _ , tweetId in tweets[:10]]\n</code></pre> <p>Complexity Discussion</p> <ul> <li> <p>Time: The time complexity for each operation is as follows:</p> <ul> <li>postTweet: O(1) because appending to the front of a deque and potentially removing an element from the back are both O(1) operations.</li> <li>getNewsFeed: O(n log k) where n is the total number of tweets from the user and their followees, and k is the number of users being followed plus one (the user themselves).This is because merging k sorted lists takes O(n log k) time using a min-heap.</li> <li>follow: O(1) because adding an element to a set is an average O(1) operation.</li> <li>unfollow: O(1) because removing an element from a set is an average O(1) operation.</li> </ul> </li> <li> <p>Space: The space complexity is O(n + m) where n is the total number of tweets stored across all users (each user stores up to 10 tweets) and m is the total number of follow relationships stored (each relationship is stored once in the appropriate set).</p> <ul> <li>O(n) for storing tweets, with each user having a deque that holds up to 10 tweets.</li> <li>O(m) for storing follow relationships, with each user having a set of followees.</li> </ul> </li> </ul> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/36/","title":"36. Valid Sudoku","text":"","tags":["Array","Hash Table","Matrix"]},{"location":"problems/36/#36-valid-sudoku","title":"36. Valid Sudoku","text":"<p>Medium</p>","tags":["Array","Hash Table","Matrix"]},{"location":"problems/36/#description","title":"Description","text":"<p>Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</p> <ol> <li>Each row must contain the digits 1-9 without repetition.</li> <li>Each column must contain the digits 1-9 without repetition.</li> <li>Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.</li> </ol> <p>Note:</p> <ul> <li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li> <li>Only the filled cells need to be validated according to the mentioned rules.</li> </ul> <p>Example 1:</p> <p></p> <pre><code>Input: board =\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\n</code></pre> <p>Example 2:</p> <pre><code>Input: board =\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n</code></pre> <p>Constraints:</p> <ul> <li>board.length == 9</li> <li>board[i].length == 9</li> <li>board[i][j] is a digit 1-9 or '.'.</li> </ul>","tags":["Array","Hash Table","Matrix"]},{"location":"problems/36/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Matrix"]},{"location":"problems/374/","title":"374. Guess Number Higher or Lower","text":"","tags":["Binary Search","Interactive"]},{"location":"problems/374/#374-guess-number-higher-or-lower","title":"374. Guess Number Higher or Lower","text":"<p>Easy</p>","tags":["Binary Search","Interactive"]},{"location":"problems/374/#description","title":"Description","text":"<p>We are playing the Guess Game. The game is as follows:</p> <p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p> <p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p> <p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p> <ul> <li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li> <li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li> <li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li> </ul> <p>Return the number that I picked.</p> <p>Example 1:</p> <pre><code>Input: n = 10, pick = 6\nOutput: 6\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 1, pick = 1\nOutput: 1\n</code></pre> <p>Example 3:</p> <pre><code>Input: n = 2, pick = 1\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 231 - 1</code></li> <li><code>1 &lt;= pick &lt;= n</code></li> </ul>","tags":["Binary Search","Interactive"]},{"location":"problems/374/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Binary Search","Interactive"]},{"location":"problems/39/","title":"39. Combination Sum","text":"","tags":["Array","Backtracking"]},{"location":"problems/39/#39-combination-sum","title":"39. Combination Sum","text":"<p>Medium</p>","tags":["Array","Backtracking"]},{"location":"problems/39/#description","title":"Description","text":"<p>Given an array of distinct integers <code>candidates</code> and a target integer <code>target</code>, return a list of all unique combinations of <code>candidates</code> where the chosen numbers sum to <code>target</code>. You may return the combinations in any order.</p> <p>The same number may be chosen from <code>candidates</code> an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p> <p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p> <p>Example 1:</p> <pre><code>Input: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</code></pre> <p>Example 2:</p> <pre><code>Input: candidates = [2,3,5], target = 8\nOutput: [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n</code></pre> <p>Example 3:</p> <pre><code>Input: candidates = [2], target = 1\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= candidates.length &lt;= 30</code></li> <li><code>2 &lt;= candidates[i] &lt;= 40</code></li> <li><code>All elements of candidates are distinct.</code></li> <li><code>1 &lt;= target &lt;= 40</code></li> </ul>","tags":["Array","Backtracking"]},{"location":"problems/39/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["Array","Backtracking"]},{"location":"problems/39/#approach-1-recursive-backtracking-pick-skip","title":"Approach 1: Recursive Backtracking (Pick, Skip)","text":"<p> Time complexity: \\(O(2^n \\times n)\\)</p> <p> Space complexity: \\(O(n)\\), where \\(n\\) is the length of the array \\(candidates\\).</p> <pre><code>  candidates[i]\n   /      \\\n  pick      skip\n</code></pre> <p>Algorithm</p> <ol> <li>For every position in candidate we will either <code>pick</code> the element or <code>skip</code> the element in current list <code>cur</code></li> <li>While picking the element recursively we can pick the same element multiple times</li> <li>Terminate the function on various conditions</li> </ol> Python <pre><code>class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n    ans = []\n    n = len(candidates)\n\n    def backtrack(cur: List[int] , i: int) -&gt; None:\n        if sum(cur) == target:\n            ans.append(copy.deepcopy(cur))\n            return                              #Dont Forget to return\n\n        if i == n or sum(cur) &gt; target:\n            return\n\n        #pick the element at position i, given we can pick the same element multiple times to reach to target\n        backtrack(cur + [candidates[i]] , i) # Here when we are picking we can pick the same element multiple times to reach to target sum i.e why in function backtrack argument i is `i` and not `i+1`\n\n        #skip the element at position i and move ahead\n        backtrack(cur, i + 1)\n\n    backtrack([], 0)\n    return ans\n</code></pre> equivalency <pre><code>copy.deepcopy(cur)  # deepcopy\n\n# shallow copy\ncopy.copy(cur)\n  ||\n  ||\n  ||\ncur[::]     #slice notation\n  ||\n  ||\n  ||\ncur[:]      #slice notation\n  ||\n  ||\n  ||\ncur.clone()\n</code></pre>","tags":["Array","Backtracking"]},{"location":"problems/39/#approach-2-recursive-backtracking-loop","title":"Approach 2 : Recursive Backtracking (Loop)","text":"<p> I prefer this</p> <p> Time complexity: \\(O(\u2223candidates\u2223^{target})\\)</p> <p> Space complexity: \\(O(target)\\)</p> <p>Algorithm</p> <ol> <li>Make the recursive decision tree, then we will realize it is a backtracking</li> <li>Start the dfs with empty path list and the current level i.e 0</li> <li> <p>The tree branches are seen through for loop , the for loop starts from the current level</p> <p>We can pick the same element multiple times from the candidate list in the path list when we are backtracking</p> </li> <li> <p>Prune the tree meaning return if the sum(path) becomes more than the target</p> </li> <li>Store/Save the path if sum(path) reaches target</li> <li>Upon returning from a level pop out the last added elemet in the past list</li> </ol> Python <pre><code>class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n    ans = []\n    n = len(candidates)\n\n    def dfs(path: List[int], s: int) -&gt; None:\n        if sum(path)==target:\n            ans.append(path[::])\n            return\n\n        if sum(path) &gt; target:\n            return\n\n        for i in range(s,n):    # s --&gt; start index\n            path.append(candidates[i])\n            dfs(path,i)\n            path.pop()\n\n    dfs([],0)\n    return ans\n</code></pre> equivalency <pre><code>path.append(candidates[i])\ndfs(path, i+1)\npath.pop()\n\n    ||\nequivalent\n    ||\n\ndfs(path + [candidates[i]], i)\n</code></pre>","tags":["Array","Backtracking"]},{"location":"problems/39/#approach-3-sorting-pruning-backtracking","title":"Approach 3 : Sorting + Pruning + Backtracking","text":"<p>Algorithm</p> <p>To solve this problem, we'll use a backtracking approach.</p> <p>Backtracking is a technique that tries to build an answer step by step. If it realizes that the current path won't work, it goes back and tries a different path.</p> <p>In this case, we'll use a recursive function called <code>dfs</code> that explores all possible combinations of candidates that sum up to the target. We'll start by sorting the candidates to help with avoiding duplicate combinations and to optimize the backtracking process.</p> <p>The key idea is to:</p> <ol> <li> <p>Sort the candidates array</p> </li> <li> <p>Use a recursive function that tries including or excluding each candidate</p> </li> <li> <p>Keep track of the current combination and current sum</p> </li> <li> <p>Add a combination to the result when the sum equals the target</p> </li> </ol> <p>Time complexity is \\(O(2^n)\\), where \\(n\\) is the number of candidates. That\u2019s because we're essentially exploring all possible combinations and there are a total of 2<sup>n</sup> such combinations.</p> Python <pre><code>class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -&gt; List[List[int]]:\n    \"\"\"Intialization\"\"\"\n    ans = []            # answer list to store valid combinations\n    n = len(candidates)\n\n    def dfs(s: int, target: int, path: List[int]) -&gt; None:\n        \"\"\"Base Cases\"\"\"\n        if target &lt; 0:          # If target becomes &lt; 0, stop (prune)\n            return\n\n        if target == 0:         # If target become 0, we found a valid combination, store it\n            ans.append(path.clone())\n            return\n\n         \"\"\"Recursive Cases\"\"\"\n        #S3: Try each candidate starting for start index `s`\n        for i in range(s, n):\n            path.append(candidates[i])              # Include current candidate in the combination\n            dfs(i, target - candidates[i], path)    # Recursively explore with the same start index (allows reusing the same number)\n            path.pop()                              # Backtrack by removing the last added candidate\n\n        candidates.sort()       # S1: Sort candidates to help with backtracking\n        dfs(0, target, [])      # S2: Start backtracking from index 0\n    return ans\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Backtracking"]},{"location":"problems/399/","title":"399. Evaluate Division","text":"","tags":["Array","String","Depth-First Search","Breadth-First Search","Union Find","Graph","Shortest Path"]},{"location":"problems/399/#399-evaluate-division","title":"399. Evaluate Division","text":"<p>Medium</p>","tags":["Array","String","Depth-First Search","Breadth-First Search","Union Find","Graph","Shortest Path"]},{"location":"problems/399/#description","title":"Description","text":"<p>You are given an array of variable pairs <code>equations</code> and an array of real numbers <code>values</code>, where <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> and <code>values[i]</code> represent the equation <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code>. Each <code>A<sub>i</sub></code> or <code>B<sub>i</sub></code> is a string that represents a single variable.</p> <p>You are also given some queries, where <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> represents the <code>j<sup>th</sup></code> query where you must find the answer for <code>C<sub>j</sub> / D<sub>j</sub> = ?</code>.</p> <p>Return the answers to all queries. If a single answer cannot be determined, return <code>-1.0</code>.</p> <p>Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p> <p>Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.</p> <p>Example 1:</p> <pre><code>Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\nOutput: [6.00000, 0.50000, -1.00000, 1.00000, -1.00000]\nExplanation:\nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0]\nnote: x is undefined =&gt; -1.0\n</code></pre> <p>Example 2:</p> <pre><code>Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\nOutput: [3.75000, 0.40000, 5.00000, 0.20000]\n</code></pre> <p>Example 3:</p> <pre><code>Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\nOutput: [0.50000, 2.00000, -1.00000, -1.00000]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= equations.length &lt;= 20</code></li> <li><code>equations[i].length == 2</code></li> <li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li> <li><code>values.length == equations.length</code></li> <li><code>0.0 &lt; values[i] &lt;= 20.0</code></li> <li><code>1 &lt;= queries.length &lt;= 20</code></li> <li><code>queries[i].length == 2</code></li> <li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li> <li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub> consist of lower case English letters and digits.</code></li> </ul>","tags":["Array","String","Depth-First Search","Breadth-First Search","Union Find","Graph","Shortest Path"]},{"location":"problems/399/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","String","Depth-First Search","Breadth-First Search","Union Find","Graph","Shortest Path"]},{"location":"problems/4/","title":"4. Median of Two Sorted Arrays","text":"","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/4/#4-median-of-two-sorted-arrays","title":"4. Median of Two Sorted Arrays","text":"<p>Hard</p>","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/4/#description","title":"Description","text":"<p>Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.</p> <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p> <p>Example 1:</p> <pre><code>Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</code></pre> <p>Constraints:</p> <ul> <li><code>nums1.length == m</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m &lt;= 1000</code></li> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= m + n &lt;= 2000</code></li> <li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li> </ul>","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/4/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/40/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/407/","title":"407. Trapping Rain Water II","text":"","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/407/#407-trapping-rain-water-ii","title":"407. Trapping Rain Water II","text":"<p>Hard</p>","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/407/#description","title":"Description","text":"<p>Given an <code>m x n</code> integer matrix <code>heightMap</code> representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.</p> <p>Example 1:</p> <p></p> <pre><code>Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\nOutput: 4\nExplanation: After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\nOutput: 10\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == heightMap.length</code></li> <li><code>n == heightMap[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 104</code></li> </ul>","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/407/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/410/","title":"410. Split Array Largest Sum","text":"","tags":["Array","Binary Search","Dynamic Programming","Greedy","Prefix Sum"]},{"location":"problems/410/#410-split-array-largest-sum","title":"410. Split Array Largest Sum","text":"<p>Hard</p>","tags":["Array","Binary Search","Dynamic Programming","Greedy","Prefix Sum"]},{"location":"problems/410/#description","title":"Description","text":"<p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is minimized.</p> <p>Return the minimized largest sum of the split.</p> <p>A subarray is a contiguous part of the array.</p> <p>Example 1:</p> <pre><code>Input: nums = [7,2,5,10,8], k = 2\nOutput: 18\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,2,3,4,5], k = 2\nOutput: 9\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 10\u2076</code></li> <li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li> </ul>","tags":["Array","Binary Search","Dynamic Programming","Greedy","Prefix Sum"]},{"location":"problems/410/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Dynamic Programming","Greedy","Prefix Sum"]},{"location":"problems/42/","title":"42. Trapping Rain Water","text":"","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/42/#42-trapping-rain-water","title":"42. Trapping Rain Water","text":"<p>Hard</p>","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/42/#description","title":"Description","text":"<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p> <p>Example 1:</p> <p></p> <pre><code>Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</code></pre> <p>Example 2:</p> <pre><code>Input: height = [4,2,0,3,2,5]\nOutput: 9\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= height[i] &lt;= 105</code></li> </ul> <p>Hint : Remember Array Operations (1)</p> <ol> <li>--8\u2190 \"docs/glossary/definitions.md:array-operations\"</li> </ol>","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/42/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/424/","title":"424. Longest Repeating Character Replacement","text":"","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#424-longest-repeating-character-replacement","title":"424. Longest Repeating Character Replacement","text":"<p>Hard</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#description","title":"Description","text":"<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p> <p>Return the length of the longest substring containing the same letter you can get after performing the above operations.</p> <p>Example 1:</p> <pre><code>Input: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10\u2075</code></li> <li><code>s</code> consists of only uppercase English letters.</li> <li><code>0 &lt;= k &lt;= s.length</code></li> </ul>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#solutions","title":"Solutions \ud83d\udd13","text":"Algorithm Discussion","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#sliding-window","title":"Sliding Window","text":"<ol> <li> <p>We can keep tracking a current window, and use two pointer to apply the sliding window algorithms.</p> </li> <li> <p>We can expand the window to the right greedily as long as the character is not existent in the current window.</p> </li> <li> <p>Otherwise, we need to move the left pointer and erase the corresponding characters at left pointer out of the window until the current character at the right pointer is no longer in the window.</p> </li> <li> <p>If we don\u2019t move the left pointer (shrink the window), the window is not valid no matter how we move the right pointer.</p> </li> </ol> <p>The time complexity is \\(O(n)\\) as the left and right pointers both move towards the right and the space complexity is \\(O(n)\\) as we need a hash-set or dictionary to store the elements in the current window.</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#procedure-sliding_window_flexible_longest","title":"Procedure Sliding_Window_Flexible_Longest","text":"<pre><code>def slidingWindowFlexibleLongest(input):\n\n    initialize window, ans\n    left = 0\n\n    for right in range(len(input)):\n        append input[right] to window\n\n        while invalid(window):        # update left until window is valid again\n            remove input[left] from window\n            left += 1\n\n        ans = max(ans, window)        # window is guaranteed to be valid here\n    return ans\n</code></pre>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#approach-hashtable-slidingwindow","title":"Approach: HashTable + SlidingWindow","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(1)\\)</p> <p>Algorithm</p> <p>The problem can be efficiently solved using the sliding window technique.</p> <p>We maintain a window that contains the maximum number of repeating characters possible with at most k replacements.</p> <p>Counter() <code>count</code> is used to keep track of the frequency of characters within the current window.</p> <p><code>maxCount</code> keeps track of the highest frequency of any single character within the current window, which helps us determine how many replacements we can afford.</p> <p>If the current window size minus <code>maxCount</code> exceeds <code>k</code>, it indicates that we need more than <code>k</code> replacements to make all characters in the window the same, thus we shrink the window from the left.</p> <p>We continuously update the answer with the maximum valid window size encountered during the process.</p> <p>The time complexity is \\(O(n)\\), where n is the length of the string s. This is because each character in the string is processed at most twice, once when expanding the window and once when shrinking it.</p> <p>The space complexity \\(O(1)\\), despite using a Counter, the space complexity is constant because the input string consists of only uppercase English letters, limiting the number of unique keys in the Counter to 26.</p> Python <pre><code>from collections import Counter\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -&gt; int:\n        ans = 0\n        count = Counter()                   #window, a hashtable to store the frequencies of characters like this {A:1,B:1,....}\n        maxCount = 0                        # to store the frequncy of maximum character count\n        l = 0\n\n        for r in range(len(s)):\n            count[s[r]]+=1                  #expand the window i.e add the count of incoming character in window\n            maxCount = max(maxCount,count[s[r]])\n\n            while (r-l+1) - maxCount &gt; k:   #window condition broken or invalid window condition , when length of window (r-l+1) minus maxCharacterCount becomes more than the k (the character can be replaced) meaning we can only expand the window until we consume the provided characters count\n                count[s[l]]-=1              #shrink the window\n                l+=1                        #slide the window\n\n            ans = max(ans,r-l+1)\n\n        return ans\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/438/","title":"438. Find All Anagrams in a String","text":"","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/438/#438-find-all-anagrams-in-a-string","title":"438. Find All Anagrams in a String","text":"<p>Medium</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/438/#description","title":"Description","text":"<p>Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, p.length &lt;= 3 * 10\u2074</code></li> <li><code>s and p consist of lowercase English letters</code>.</li> </ul>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/438/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/442/","title":"442. Find All Duplicates in an Array","text":"","tags":["Array","Hash Table"]},{"location":"problems/442/#442-find-all-duplicates-in-an-array","title":"442. Find All Duplicates in an Array","text":"<p>Medium</p>","tags":["Array","Hash Table"]},{"location":"problems/442/#description","title":"Description","text":"<p>Given an integer array <code>nums</code> of length n where all the integers of <code>nums</code> are in the range <code>[1, n]</code> and each integer appears at most twice, return an array of all the integers that appears twice.</p> <p>You must write an algorithm that runs in <code>O(n)</code> time and uses only constant auxiliary space, excluding the space needed to store the output.</p> <p>Example 1:</p> <pre><code>Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [2, 3]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,1,2]\nOutput: [1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1]\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10\u2075</code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> <li><code>Each element in nums appears once or twice.</code></li> </ul>","tags":["Array","Hash Table"]},{"location":"problems/442/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table"]},{"location":"problems/45/","title":"45. Jump Game II","text":"","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/45/#45-jump-game-ii","title":"45. Jump Game II","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/45/#description","title":"Description","text":"<p>You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].</p> <p>Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:</p> <ul> <li><code>0 &lt;= j &lt;= nums[i]</code> and</li> <li><code>i + j &lt; n</code></li> </ul> <p>Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].</p> <p>Example 1:</p> <pre><code>Input: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [2,3,0,1,4]\nOutput: 2\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2074</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li><code>It's guaranteed that you can reach nums[n - 1].</code></li> </ul>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/45/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/450/","title":"450. Delete Node in a BST","text":"","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/450/#450-delete-node-in-a-bst","title":"450. Delete Node in a BST","text":"<p>Medium</p>","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/450/#description","title":"Description","text":"<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p> <p>Basically, the deletion can be divided into two stages:</p> <ol> <li>Search for a node to remove.</li> <li>If the node is found, delete the node.</li> </ol> <p>Example 1:</p> <p></p> <pre><code>Input: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: nums = [1,1,2]\nOutput: [1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1]\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10\u2074]</code>.</li> <li><code>-10\u2075 &lt;= Node.val &lt;= 10\u2075</code></li> <li>Each node has a unique value.</li> <li>root is a valid binary search tree.</li> <li><code>-10\u2075 &lt;= key &lt;= 10\u2075</code></li> </ul>","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/450/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/451/","title":"451. Sort Characters By Frequency","text":"","tags":["Hash Table","String","Sorting","Heap (Priority Queue)","Bucket Sort","Counting"]},{"location":"problems/451/#451-sort-characters-by-frequency","title":"451. Sort Characters By Frequency","text":"<p>Medium</p>","tags":["Hash Table","String","Sorting","Heap (Priority Queue)","Bucket Sort","Counting"]},{"location":"problems/451/#description","title":"Description","text":"<p>Given a string <code>s</code>, sort it in decreasing order based on the frequency (1) of the characters.</p> <ol> <li> The frequency of a character is the number of times it appears in the string.</li> </ol> <p>Return the sorted string. If there are multiple answers, return any of them.</p> <p>Example 1:</p> <pre><code>Input: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10\u2075</code></li> <li><code>s</code> consists of uppercase and lowercase English letters and digits.</li> </ul>","tags":["Hash Table","String","Sorting","Heap (Priority Queue)","Bucket Sort","Counting"]},{"location":"problems/451/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sorting","Heap (Priority Queue)","Bucket Sort","Counting"]},{"location":"problems/46/","title":"46. Permutations","text":"","tags":["Array","Backtracking"]},{"location":"problems/46/#46-permutations","title":"46. Permutations","text":"<p>Medium</p>","tags":["Array","Backtracking"]},{"location":"problems/46/#description","title":"Description","text":"<p>Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3]\nOutput: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1]\nOutput: [[0, 1], [1, 0]]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1]\nOutput: [[1]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 6</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li><code>All the integers of nums are unique.</code></li> </ul>","tags":["Array","Backtracking"]},{"location":"problems/46/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Backtracking"]},{"location":"problems/48/","title":"48. Rotate Image","text":"","tags":["Array","Math","Matrix"]},{"location":"problems/48/#48-rotate-image","title":"48. Rotate Image","text":"<p>Medium</p>","tags":["Array","Math","Matrix"]},{"location":"problems/48/#description","title":"Description","text":"<p>You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).</p> <p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p> <p>Example 1:</p> <p></p> <pre><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li> </ul>","tags":["Array","Math","Matrix"]},{"location":"problems/48/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Math","Matrix"]},{"location":"problems/49/","title":"49. Group Anagrams","text":"","tags":["Array","Hash Table","String","Sorting"]},{"location":"problems/49/#49-group-anagrams","title":"49. Group Anagrams","text":"<p>Medium</p>","tags":["Array","Hash Table","String","Sorting"]},{"location":"problems/49/#description","title":"Description","text":"<p>Given an array of strings <code>strs</code>, group  the anagrams (1) together. You can return the answer in any order.</p> <ol> <li> <p> Anagram</p> <ul> <li>An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n\nExplanation:\n\nThere is no string in strs that can be rearranged to form \"bat\".\nThe strings \"nat\" and \"tan\" are anagrams as they can be rearranged to form each other.\nThe strings \"ate\", \"eat\", and \"tea\" are anagrams as they can be rearranged to form each other.\n</code></pre> <p>Example 2:</p> <pre><code>Input: strs = [\"\"]\n\nOutput: [[\"\"]]\n</code></pre> <p>Example 3:</p> <pre><code>Input: strs = [\"a\"]\n\nOutput: [[\"a\"]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 10\u2074</code></li> <li><code>0 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i] consists of lowercase English letters.</code></li> </ul>","tags":["Array","Hash Table","String","Sorting"]},{"location":"problems/49/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","String","Sorting"]},{"location":"problems/496/","title":"496. Next Greater Element I","text":"","tags":["Array","Hash Table","Stack","Monotonic Stack"]},{"location":"problems/496/#496-next-greater-element-i","title":"496. Next Greater Element I","text":"<p>Easy</p>","tags":["Array","Hash Table","Stack","Monotonic Stack"]},{"location":"problems/496/#description","title":"Description","text":"<p>The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.</p> <p>You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.</p> <p>For each 0 &lt;= i &lt; nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.</p> <p>Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.</p> <p>Example 1:</p> <pre><code>Input: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10\u2074</code></li> <li>All integers in <code>nums1</code> and <code>nums2</code> are unique.</li> <li>All the integers of nums1 also appear in nums2.</li> </ul> <p>Follow up: Could you find an <code>O(nums1.length + nums2.length)</code> solution?</p>","tags":["Array","Hash Table","Stack","Monotonic Stack"]},{"location":"problems/496/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Stack","Monotonic Stack"]},{"location":"problems/5/","title":"5. Longest Palindromic Substring","text":"","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/5/#5-longest-palindromic-substring","title":"5. Longest Palindromic Substring","text":"<p>Medium</p>","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/5/#description","title":"Description","text":"<p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p> <p>Example 1:</p> <pre><code>Input: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"cbbd\"\nOutput: \"bb\"\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consist of only digits and English letters.</li> </ul>","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/5/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/50/","title":"50. Pow(x, n)","text":"","tags":["Math","Recursion"]},{"location":"problems/50/#50-powx-n","title":"50. Pow(x, n)","text":"<p>Medium</p>","tags":["Math","Recursion"]},{"location":"problems/50/#description","title":"Description","text":"<p>Implement pow(x, n), which calculates <code>x</code> raised to the power <code>n</code> (i.e., x<sup>n</sup>).</p> <p>Example 1:</p> <p></p> <pre><code>Input: x = 2.00000, n = 10\nOutput: 1024.00000\n</code></pre> <p>Example 2:</p> <pre><code>Input: x = 2.10000, n = 3\nOutput: 9.26100\n</code></pre> <p>Example 3:</p> <pre><code>Input: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2\u207b\u00b2 = 1/2\u00b2 = 1/4 = 0.25\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= height[i] &lt;= 105</code></li> </ul>","tags":["Math","Recursion"]},{"location":"problems/50/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Recursion"]},{"location":"problems/509/","title":"509. Fibonacci Number","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#509-fibonacci-number","title":"509. Fibonacci Number","text":"<p>Medium</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#description","title":"Description","text":"<p>The Fibonacci numbers, commonly denoted <code>F(n)</code> form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p> <p>F(0) = 0, F(1) = 1</p> <p>F(n) = F(n - 1) + F(n - 2), for n &gt; 1.</p> <p>Given <code>n</code>, calculate <code>F(n)</code>.</p> <p>Example 1:</p> <pre><code>Input: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n</code></pre> <p>Example 3:</p> <pre><code>Input: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 30</code></li> </ul>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#appraoch-dynamic-programming","title":"Appraoch : Dynamic Programming","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> Python <pre><code>class Solution:\n    def fib(self, n: int) -&gt; int:\n        def f(i,nb={}):\n            if i==0:\n                return 0\n            if i==1:\n                return 1\n            if i in nb:\n                return nb[i]\n            nb[i] = f(i-1)+f(i-2)\n            return nb[i]\n        return f(n)\n</code></pre> <p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> Python <pre><code>class Solution:\n    def fib(self, n: int) -&gt; int:\n        dp = [0,1] +[0]*(n-1)\n\n        for i in range(2,n+1):\n            dp[i] = dp[i-1]+dp[i-2]\n\n        return dp[n]\n</code></pre> Question <p>Q) How [0]*(n-1)?</p> <ul> <li> Because total no of elements in the list are  <code>n+1</code>, out of <code>n+1</code> we have already defined two <code>[0,1]</code> so the remaining are (n+1-2) = n-1</li> </ul> <p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(1)\\)</p> <p> We don't need to store all the Fibonacci numbers up to <code>n</code>, as we only need two previous numbers to calculate the next Fibonacci number.</p> Python <pre><code>class Solution:\n    def fib(self, n: int) -&gt; int:\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n\n        f0,f1 = 0,1   #initial states to compute the next states\n        for i in range(2,n+1):\n            fi = f1+f0\n            f0,f1 = f1,fi\n        return fi\n</code></pre>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#way-1-recursion-memoization-top-down-dp","title":"Way 1: Recursion + Memoization (Top-Down DP)","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#way-2-tabulation-bottom-up-dp","title":"Way 2: Tabulation (Bottom Up DP)","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#way-3-no-memory-dp","title":"Way 3: No Memory DP","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/509/#approach-greedy","title":"Approach : Greedy","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(1)\\)</p> Python <pre><code>class Solution:\n    def fib(self, n: int) -&gt; int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n</code></pre> Analysis of Greedy Python <pre><code>class Solution:\n    def fib(self, n: int) -&gt; int:\n        prev , curr = 0, 1\n        for _ in range(n):\n            prev , curr = curr , prev + curr\n        return prev\n</code></pre> <pre><code>                1               1              2               3                   5               8\n\ni = 0       prev = 0        curr = 1\ni = 1                       prev = 1    curr = 1 + 1\ni = 2                                   prev = 2        curr = 1 + 2\ni = 3                                                   prev = 3          curr = 2 + 3\ni = 4                                                                     prev = 5          curr = 3 + 5\n</code></pre> Do not do this Python <pre><code>class Solution:\n    def fib(self, n: int) -&gt; int:\n        prev , curr = 0, 1\n        for _ in range(n):\n            prev = curr\n            curr = prev + curr\n        return prev\n</code></pre> <p>  Here we are using <code>new prev</code> &amp; <code>previous curr</code> to compute the <code>new curr</code> but we need <code>previous prev</code> &amp; <code>previous curr</code> to compute the <code>new curr</code></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/52/","title":"52. N-Queens II","text":"","tags":["Backtracking"]},{"location":"problems/52/#52-n-queens-ii","title":"52. N-Queens II","text":"<p>Hard</p>","tags":["Backtracking"]},{"location":"problems/52/#description","title":"Description","text":"<p>The n-queens puzzle is the problem of placing \\(n\\) queens on an \\(n \\times n\\) chessboard such that no two queens attack each other.</p> <p>Given an integer \\(n\\), return the number of distinct solutions to the n-queens puzzle.</p> <p>Example 1:</p> <pre><code>Input: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown below\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: n = 1\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 9</code></li> </ul>","tags":["Backtracking"]},{"location":"problems/52/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Backtracking"]},{"location":"problems/53/","title":"53. Maximum Subarray","text":"","tags":["Array","Divide and Conquer","Dynamic Programming"]},{"location":"problems/53/#53-maximum-subarray","title":"53. Maximum Subarray","text":"<p>Medium</p>","tags":["Array","Divide and Conquer","Dynamic Programming"]},{"location":"problems/53/#description","title":"Description","text":"<p>Given an integer array <code>nums</code>, find the subarray (1) with the largest sum, and return its sum.</p> <ol> <li> <p></p> <ul> <li>A subarray is a contiguous non-empty sequence of elements within an array.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> </ul> <p>Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>","tags":["Array","Divide and Conquer","Dynamic Programming"]},{"location":"problems/53/#solutions","title":"Solutions","text":"","tags":["Array","Divide and Conquer","Dynamic Programming"]},{"location":"problems/53/#variations","title":"Variations","text":"<ul> <li> Maximum and Minimum Sum Subarray</li> <li> Maximum and Minimum Sum Subarray of Size k</li> </ul> <p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Divide and Conquer","Dynamic Programming"]},{"location":"problems/530/","title":"530. Minimum Absolute Difference in BST","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/530/#530-minimum-absolute-difference-in-bst","title":"530. Minimum Absolute Difference in BST","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/530/#description","title":"Description","text":"<p>Given the <code>root</code> of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [4,2,6,1,3]\nOutput: 1\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [1,0,48,null,null,12,49]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 10\u2074]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10\u2075</code></li> </ul> <p>Note: This question is the same as 783. Minimum Distance Between BST Nodes</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/530/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/53_V1/","title":"Maximum and Minimum Sum Subarray","text":"","tags":["Array"]},{"location":"problems/53_V1/#maximum-and-minimum-sum-subarray","title":"Maximum and Minimum Sum Subarray","text":"<p>Medium</p>","tags":["Array"]},{"location":"problems/53_V1/#description","title":"Description","text":"<p>Find the maximum and minimum sum subarray in an array <code>arr</code> without sorting.</p> <p>Example 1:</p> <pre><code>Input: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nOutput: [6, -5]\nExplanation: The subarray [4,-1,2,1] has the largest sum 6 and The subarray [-2, 1, -3, 4, -1, 2, 1, -5] has the smallest sum -5\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array"]},{"location":"problems/53_V1/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array"]},{"location":"problems/53_V2/","title":"Maximum and Minimum Sum Subarray of Size k","text":"","tags":["Array"]},{"location":"problems/53_V2/#maximum-and-minimum-sum-subarray-of-size-k","title":"Maximum and Minimum Sum Subarray of Size k","text":"<p>Medium</p>","tags":["Array"]},{"location":"problems/53_V2/#description","title":"Description","text":"<p>Find the maximum and minimum sum subarray of fixed size <code>k</code> in an array <code>arr</code> without sorting.</p> <p>Example 1:</p> <pre><code>Input: arr = [-2,1,-3,4,-1,2,1,-5,4], k = 2\nOutput: [3, -4]\nExplanation: The subarray [2,1] has the largest sum 3 and The subarray [1,-5] has the smallest sum -4 for fixed size of 2\n</code></pre> <p>Example 2:</p> <pre><code>Input: arr = arr = [7,5,6], k = 1\nOutput: [7, 5]\nExplanation: The subarray [7] has the largest sum 7 and The subarray [5] has the smallest sum 5 for fixed size of 1.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array"]},{"location":"problems/53_V2/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array"]},{"location":"problems/54/","title":"54. Spiral Matrix","text":"","tags":["Array","Matrix","Simulation"]},{"location":"problems/54/#54-spiral-matrix","title":"54. Spiral Matrix","text":"<p>Medium</p>","tags":["Array","Matrix","Simulation"]},{"location":"problems/54/#description","title":"Description","text":"<p>Given an <code>m x n</code> <code>matrix</code>, return all elements of the <code>matrix</code> in spiral order.</p> <p>Example 1:</p> <p></p> <pre><code>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1, 2, 3, 6, 9, 8, 7, 4, 5]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> </ul>","tags":["Array","Matrix","Simulation"]},{"location":"problems/54/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Matrix","Simulation"]},{"location":"problems/543/","title":"543. Diameter of Binary Tree","text":"","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/543/#543-diameter-of-binary-tree","title":"543. Diameter of Binary Tree","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/543/#description","title":"Description","text":"<p>Given the root of a binary tree, return the length of the diameter (1) of the tree.</p> <ol> <li> <p></p> </li> </ol> <p>Example 1:</p> <p></p> <pre><code>Input: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [1,2]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10\u2074]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/543/#diameter","title":"Diameter","text":"<ul> <li>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</li> </ul>","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/543/#length-of-path","title":"Length of Path","text":"<ul> <li>The length of a path between two nodes is represented by the number of edges between them.</li> </ul>","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/543/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Binary Tree"]},{"location":"problems/55/","title":"55. Jump Game","text":"","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/55/#55-jump-game","title":"55. Jump Game","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/55/#description","title":"Description","text":"<p>You are given an integer array <code>nums</code>. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return <code>true</code> if you can reach the last index, or <code>false</code> otherwise.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2074</code></li> <li><code>0 &lt;= nums[i] &lt;= 10\u2075</code></li> </ul>","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/55/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Greedy"]},{"location":"problems/56/","title":"56. Merge Intervals","text":"","tags":["Array","Sorting"]},{"location":"problems/56/#56-merge-intervals","title":"56. Merge Intervals","text":"<p>Medium</p>","tags":["Array","Sorting"]},{"location":"problems/56/#description","title":"Description","text":"<p>Given an array of <code>intervals</code> where intervals[i] = [start<sub>i</sub>, end<sub>i</sub>], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p> <p>Example 1:</p> <pre><code>Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1, 6], [8, 10], [15, 18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n</code></pre> <p>Example 2:</p> <pre><code>Input: intervals = [[1,4],[4,5]]\nOutput: [[1, 5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n</code></pre> <p>Constraints:</p> <ul> <li>1 &lt;= intervals.length &lt;= 10<sup>4</sup></li> <li>intervals[i].length == 2</li> <li>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></li> </ul>","tags":["Array","Sorting"]},{"location":"problems/56/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Sorting"]},{"location":"problems/567/","title":"567. Permutation in String","text":"","tags":["Hash Table","Two Pointers","String","Sliding Window"]},{"location":"problems/567/#567-permutation-in-string","title":"567. Permutation in String","text":"<p>Medium</p>","tags":["Hash Table","Two Pointers","String","Sliding Window"]},{"location":"problems/567/#description","title":"Description","text":"<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code> if <code>s2</code> contains a permutation (1) of <code>s1</code>, or <code>false</code> otherwise.</p> <ol> <li> <p> Permutation</p> <p>A permutation is a rearrangement of all the characters of a string.</p> </li> </ol> <p>In other words, return true if one of <code>s1's</code> permutations is the substring of <code>s2</code>.</p> <p>Example 1:</p> <pre><code>Input: s1 = \"ab\", s2 = \"eidbaooo\"\nOutput: true\nExplanation: s2 contains one permutation of s1 (\"ba\").\n</code></pre> <p>Example 2:</p> <pre><code>Input: s1 = \"ab\", s2 = \"eidboaoo\"\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 10\u2074</code></li> <li><code>s1 and s2 consist of lowercase English letters.</code></li> </ul>","tags":["Hash Table","Two Pointers","String","Sliding Window"]},{"location":"problems/567/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Two Pointers","String","Sliding Window"]},{"location":"problems/6/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/62/","title":"62. Unique Paths","text":"","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/62/#62-unique-paths","title":"62. Unique Paths","text":"<p>Medium</p>","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/62/#description","title":"Description","text":"<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>Given the two integers <code>m</code> and <code>n</code>, return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The test cases are generated so that the answer will be less than or equal to 2 * 10<sup>9</sup>.</p> <p>Example 1:</p> <pre><code>Input: m = 3, n = 7\nOutput: 28\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 100</code></li> </ul>","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/62/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/64/","title":"64. Minimum Path Sum","text":"","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/64/#64-minimum-path-sum","title":"64. Minimum Path Sum","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/64/#description","title":"Description","text":"<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p> <p>Note: You can only move either down or right at any point in time.</p> <p>Example 1:</p> <p></p> <pre><code>Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n</code></pre> <p>Example 2:</p> <pre><code>Input: grid = [[1,2,3],[4,5,6]]\nOutput: 12\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 200</code></li> </ul>","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/64/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Matrix"]},{"location":"problems/647/","title":"647. Palindromic Substrings","text":"","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/647/#647-palindromic-substrings","title":"647. Palindromic Substrings","text":"<p>Medium</p>","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/647/#description","title":"Description","text":"<p>Given a string s, return the number of palindromic substrings in it.</p> <p>A string is a palindrome when it reads the same backward as forward.</p> <p>A substring is a contiguous sequence of characters within the string.</p> <p>Example 1:</p> <pre><code>Input: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/647/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/658/","title":"658. Find K Closest Elements","text":"","tags":["Array","Two Pointers","Binary Search","Sliding Window","Sorting","Heap (Priority Queue)"]},{"location":"problems/658/#658-find-k-closest-elements","title":"658. Find K Closest Elements","text":"<p>Medium</p>","tags":["Array","Two Pointers","Binary Search","Sliding Window","Sorting","Heap (Priority Queue)"]},{"location":"problems/658/#description","title":"Description","text":"<p>Given a sorted integer array <code>arr</code>, two integers <code>k</code> and <code>x</code>, return the <code>k</code> closest integers to <code>x</code> in the array. The result should also be sorted in ascending order.</p> <p>An integer <code>a</code> is closer to <code>x</code> than an integer <code>b</code> if:</p> <ul> <li><code>|a - x| &lt; |b - x|</code>, or</li> <li><code>|a - x| == |b - x|</code> and <code>a &lt; b</code></li> </ul> <p>Example 1:</p> <pre><code>Input: arr = [1,2,3,4,5], k = 4, x = 3\n\nOutput: [1, 2, 3, 4]\n</code></pre> <p>Example 2:</p> <pre><code>Input: arr = [1,1,2,3,4,5], k = 4, x = -1\n\nOutput: [1, 1, 2, 3]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= arr.length</code></li> <li><code>1 &lt;= arr.length &lt;= 10\u2074</code></li> <li><code>arr is sorted in ascending order.</code></li> <li><code>-10\u2074 &lt;= arr[i], x &lt;= 10\u2074</code></li> </ul>","tags":["Array","Two Pointers","Binary Search","Sliding Window","Sorting","Heap (Priority Queue)"]},{"location":"problems/658/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Binary Search","Sliding Window","Sorting","Heap (Priority Queue)"]},{"location":"problems/66/","title":"66. Plus One","text":"","tags":["Array","Math"]},{"location":"problems/66/#66-plus-one","title":"66. Plus One","text":"<p>Easy</p>","tags":["Array","Math"]},{"location":"problems/66/#description","title":"Description","text":"<p>You are given a large integer represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>i<sup>th</sup></code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0's</code>.</p> <p>Increment the large integer by one and return the resulting array of digits.</p> <p>Example 1:</p> <pre><code>Input: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n</code></pre> <p>Example 2:</p> <pre><code>Input: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n</code></pre> <p>Example 3:</p> <pre><code>Input: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= digits.length &lt;= 100</code></li> <li><code>0 &lt;= digits[i] &lt;= 9</code></li> <li><code>digits</code> does not contain any leading <code>0</code>'s.</li> </ul>","tags":["Array","Math"]},{"location":"problems/66/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Math"]},{"location":"problems/67/","title":"67. Add Binary","text":"","tags":["Math","String","Bit Manipulation","Simulation"]},{"location":"problems/67/#67-add-binary","title":"67. Add Binary","text":"<p>Easy</p>","tags":["Math","String","Bit Manipulation","Simulation"]},{"location":"problems/67/#description","title":"Description","text":"<p>Given two binary strings <code>a</code> and <code>b</code>, return their sum as a binary string.</p> <p>Example 1:</p> <pre><code>Input: a = \"11\", b = \"1\"\nOutput: \"100\"\n</code></pre> <p>Example 2:</p> <pre><code>Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length &lt;= 104</code></li> <li><code>a</code> and <code>b</code> consist only of <code>'0'</code> or <code>'1'</code> characters.</li> <li>Each string does not contain leading zeros except for the zero itself.</li> </ul>","tags":["Math","String","Bit Manipulation","Simulation"]},{"location":"problems/67/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","String","Bit Manipulation","Simulation"]},{"location":"problems/69/","title":"69. Sqrt(x)","text":"","tags":["Array","Math"]},{"location":"problems/69/#69-sqrtx","title":"69. Sqrt(x)","text":"<p>Easy</p>","tags":["Array","Math"]},{"location":"problems/69/#description","title":"Description","text":"<p>Given a non-negative integer <code>x</code>, return the square root of <code>x</code> rounded down to the nearest integer. The returned integer should be non-negative as well.</p> <p>You must not use any built-in exponent function or operator.</p> <p>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</p> <p>Example 1:</p> <pre><code>Input: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> </ul>","tags":["Array","Math"]},{"location":"problems/69/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Math"]},{"location":"problems/7/","title":"7. Reverse Integer","text":"","tags":["Math"]},{"location":"problems/7/#7-reverse-integer","title":"7. Reverse Integer","text":"<p>Medium</p>","tags":["Math"]},{"location":"problems/7/#description","title":"Description","text":"<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range [-2<sup>31</sup>, 2<sup>31</sup> - 1], then return <code>0</code>.</p> <p>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</p> <p>Example 1:</p> <pre><code>Input: x = 123\nOutput: 321\n</code></pre> <p>Example 2:</p> <pre><code>Input: x = -123\nOutput: -321\n</code></pre> <p>Example 3:</p> <pre><code>Input: x = 120\nOutput: 21\n</code></pre> <p>Constraints:</p> <ul> <li>-\\(2^{31}\\) &lt;= x &lt;= 2<sup>31</sup> - 1</li> </ul>","tags":["Math"]},{"location":"problems/7/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math"]},{"location":"problems/70/","title":"70. Climbing Stairs","text":"","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/70/#70-climbing-stairs","title":"70. Climbing Stairs","text":"<p>Medium</p>","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/70/#description","title":"Description","text":"<p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p> <p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p> <p>Example 1:</p> <pre><code>Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 45</code></li> </ul>","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/70/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Dynamic Programming","Memoization"]},{"location":"problems/701/","title":"701. Insert into a Binary Search Tree","text":"","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/701/#701-insert-into-a-binary-search-tree","title":"701. Insert into a Binary Search Tree","text":"<p>Medium</p>","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/701/#description","title":"Description","text":"<p>You are given the root node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p> <p>Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p> <p>Example 1:</p> <pre><code>Input: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\nExplanation: Another accepted tree is:\n</code></pre> <p>Example 2:</p> <pre><code>Input: root = [40,20,60,10,30,50,70], val = 25\nOutput: [40, 20, 60, 10, 30, 50, 70, null, null, 25]\n</code></pre> <p>Example 3:</p> <pre><code>Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\nOutput: [4, 2, 7, 1, 3, 5]\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree will be in the range <code>[0, 10\u2074]</code>.</li> <li><code>-10\u2078 &lt;= Node.val &lt;= 10\u2078</code></li> <li>All the values <code>Node.val</code> are unique.</li> <li><code>-10\u2078 &lt;= val &lt;= 10\u2078</code></li> <li>It's guaranteed that <code>val</code> does not exist in the original BST.</li> </ul>","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/701/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Binary Search Tree","Binary Tree"]},{"location":"problems/703/","title":"703. Kth Largest Element in a Stream","text":"","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/703/#703-kth-largest-element-in-a-stream","title":"703. Kth Largest Element in a Stream","text":"<p>Easy</p>","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/703/#description","title":"Description","text":"<p>You are part of a university admissions office and need to keep track of the kth highest test score from applicants in real-time. This helps to determine cut-off marks for interviews and admissions dynamically as new applicants submit their scores.</p> <p>You are tasked to implement a class which, for a given integer k, maintains a stream of test scores and continuously returns the kth highest test score after a new score has been submitted. More specifically, we are looking for the kth highest score in the sorted list of all scores.</p> <p>Implement the <code>KthLargest</code> class:</p> <p><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer k and the stream of test scores <code>nums</code>. <code>int add(int val)</code> Adds a new test score val to the stream and returns the element representing the \\(k^{th}\\) largest element in the pool of test scores so far.</p> <p>Example 1:</p> <pre><code>Input:\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n\nOutput: [null, 4, 5, 5, 8, 8]\n\nExplanation:\n\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3); // return 4\nkthLargest.add(5); // return 5\nkthLargest.add(10); // return 5\nkthLargest.add(9); // return 8\nkthLargest.add(4); // return 8\n</code></pre> <p>Example 2:</p> <pre><code>Input:\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\"]\n[[4, [7, 7, 7, 7, 8, 3]], [2], [10], [9], [9]]\n\nOutput: [null, 7, 7, 7, 8]\n\nExplanation:\n\nKthLargest kthLargest = new KthLargest(4, [7, 7, 7, 7, 8, 3]);\nkthLargest.add(2); // return 7\nkthLargest.add(10); // return 7\nkthLargest.add(9); // return 7\nkthLargest.add(9); // return 8\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 104</code></li> <li><code>1 &lt;= k &lt;= nums.length + 1</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>-104 &lt;= val &lt;= 104</code></li> <li><code>At most 104 calls will be made to add.</code></li> </ul>","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/703/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/704/","title":"704. Binary Search","text":"","tags":["Array","Binary Search"]},{"location":"problems/704/#704-binary-search","title":"704. Binary Search","text":"<p>Easy</p>","tags":["Array","Binary Search"]},{"location":"problems/704/#description","title":"Description","text":"<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-104 &lt; nums[i], target &lt; 104</code></li> <li><code>All the integers in nums are unique.</code></li> <li><code>nums is sorted in ascending order.</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/704/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/705/","title":"705. Design HashSet","text":"","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/705/#705-design-hashset","title":"705. Design HashSet","text":"<p>Easy</p>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/705/#description","title":"Description","text":"<p>Design a HashSet without using any built-in hash table libraries.</p> <p>Implement <code>MyHashSet</code> class:</p> <ul> <li> <p><code>void add(key)</code> Inserts the value <code>key</code> into the HashSet.</p> </li> <li> <p><code>bool contains(key)</code> Returns whether the value <code>key</code> exists in the HashSet or not.</p> </li> <li> <p><code>void remove(key)</code> Removes the value <code>key</code> in the HashSet. If <code>key</code> does not exist in the HashSet, do nothing.</p> </li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\n\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= key, value &lt;= 10\u2076</code></li> <li>At most 10<sup>4</sup> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li> </ul>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/705/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/","title":"706. Design HashMap","text":"","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/#706-design-hashmap","title":"706. Design HashMap","text":"<p>Easy</p>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/#description","title":"Description","text":"<p>Design a HashMap without using any built-in hash table libraries.</p> <p>Implement the <code>MyHashMap</code> class:</p> <ul> <li> <p><code>MyHashMap()</code> initializes the object with an empty map.</p> </li> <li> <p><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the key already exists in the map, update the corresponding <code>value</code>.</p> </li> <li> <p><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</p> </li> <li> <p><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</p> </li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\nOutput\n[null, null, null, 1, -1, null, 1, null, -1]\n\nExplanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= key, value &lt;= 10\u2076</code></li> <li>At most 10<sup>4</sup> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li> </ul>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/73/","title":"73. Set Matrix Zeroes","text":"","tags":["Array","Hash Table","Matrix"]},{"location":"problems/73/#73-set-matrix-zeroes","title":"73. Set Matrix Zeroes","text":"<p>Medium</p>","tags":["Array","Hash Table","Matrix"]},{"location":"problems/73/#description","title":"Description","text":"<p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0's</code>.</p> <p>You must do it in place.</p> <p>Example 1:</p> <p></p> <pre><code>Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1, 0, 1], [0, 0, 0], [1, 0, 1]]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0, 0, 0, 0], [0, 4, 5, 0], [0, 3, 1, 0]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[0].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li>-2<sup>31</sup> <code>&lt;= matrix[i][j] &lt;=</code> 2<sup>31</sup> - 1</li> </ul> <p>Follow up:</p> <ul> <li> <p>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</p> </li> <li> <p>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</p> </li> <li> <p>Could you devise a constant space solution?</p> </li> </ul>","tags":["Array","Hash Table","Matrix"]},{"location":"problems/73/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Matrix"]},{"location":"problems/739/","title":"739. Daily Temperatures","text":"","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#739-daily-temperatures","title":"739. Daily Temperatures","text":"<p>Medium</p>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#description","title":"Description","text":"<p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return an array <code>answer</code> such that <code>answer[i]</code> is the number of days you have to wait after the <code>ith</code> day to get a warmer temperature. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p> <p>Example 1:</p> <pre><code>Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1, 1, 4, 2, 1, 1, 0, 0]\n</code></pre> <p>Example 2:</p> <pre><code>Input: temperatures = [30,40,50,60]\nOutput: [1, 1, 1, 0]\n</code></pre> <p>Example 3:</p> <pre><code>Input: temperatures = [30,60,90]\nOutput: [1, 1, 0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= temperatures.length &lt;= 10\u2075</code></li> <li><code>30 &lt;= temperatures[i] &lt;= 100</code></li> </ul>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#solutions","title":"Solutions \ud83d\udd13","text":"<p>Video Solution Coming Soon</p> Algorithm Discussion","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#general-procedure-of-monotonic-stack","title":"General Procedure of monotonic stack:","text":"<p>To find the nearest number to the left/right of each number that is larger/smaller than it.</p> <pre><code>stk = []\nfor i in range(n):\n    while stk and check(stk[-1], i):\n        stk.pop()\n    stk.append(i)\n</code></pre>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#approachmonotonic-stack-decreasing","title":"Approach:Monotonic Stack (Decreasing)","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> Monotonic Stack Decreasing template","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#template-mono_stack-decreasing","title":"Template - mono_stack decreasing","text":"<pre><code>def mono_stack(insert_entries):\n    stack = []\n    for entry in insert_entries:\n        while stack and stack[-1] &lt;= entry:\n            stack.pop()\n            # Do something with the popped item here\n        stack.append(entry)\n</code></pre>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#way-1-traversing-from-end-to-start","title":"Way 1 : Traversing from end to start","text":"<p>Algorithm 1</p> <p>This problem requires us to find the position of the first element greater than each element to its right, which is a typical application scenario for a monotonic stack.</p> <p>We traverse the array temperatures from right to left, maintaining a stack stk that is monotonically increasing from top to bottom in terms of temperature. The stack stores the indices of the array elements.</p> <p>For each element <code>temperatures[i]</code>, we continuously compare it with the top element of the stack.</p> <p>If the temperature corresponding to the top element of the stack is less than or equal to <code>temperatures[i]</code>, we pop the top element of the stack in a loop until the stack is empty or the temperature corresponding to the top element of the stack is greater than <code>temperatures[i]</code>.</p> <p>At this point, the top element of the stack is the first element greater than <code>temperatures[i]</code> to its right, and the distance is <code>stk.top() \u2212 i</code>.</p> <p>We update the answer array accordingly. Then we push <code>temperatures[i]</code> onto the stack and continue traversing.</p> <p>After the traversal, we return the answer array.</p> <p>The time complexity is O(n), and the space complexity is O(n). Here, n is the length of the array temperatures.</p> Python (Traversing from right to left) <pre><code>class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -&gt; List[int]:\n        n = len(temperatures)\n        stk = []                                                  # Initialize an empty stack to store indices of temperatures.\n        ans = [0]*n                                               # Initialize a result list with zeros.\n\n        for i in range(n-1,-1,-1):\n            while stk and temperatures[stk[-1]]&lt;=temperatures[i]: #while the stack is not empty and the current temperature is greater than the temperature at the index on the top of the stack,\n                stk.pop()                                         #Pop the stack.\n            if stk:\n                ans[i] = stk[-1]-i                                #Set the value in the result array at the top index of the stack to the difference between the current index and the top index of the stack\n            stk.append(i)                                         #Push the current index onto the stack\n        return ans                                                #Return the result array.\n</code></pre>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#way-2-traversing-from-start-to-end","title":"Way 2 : Traversing from start to end","text":"<p>Algorithm 2</p> <p>We can also use a monotonically decreasing stack to find the next higher temperature.</p> <p>We will use a stack to store the indices of the temperatures array.</p> <p>We iterate over the array, and for each temperature, we check whether the current temperature is greater than the temperature at the index on the top of the stack.</p> <p>If it is, we update the corresponding position in the result array and pop the index from the stack.</p> Python (Algorithmic)Python (Pythonic) <pre><code>class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -&gt; List[int]:\n        n = len(temperatures)\n        stk = []\n        ans = [0] * n\n        for i in range(n):\n            while len(stk) &gt; 0 and temperatures[stk[-1]] &lt; temperatures[i]:\n                poped_idx = stk.pop(-1)\n                ans[poped_idx] = i - poped_idx\n            stk.append(i)\n        return ans\n</code></pre> <pre><code>class Solution:\n    def dailyTemperatures(self, temperatures: List[int]) -&gt; List[int]:\n        n = len(temperatures)\n        stk = []                # a decreasing stack\n        ans = [0]*n\n\n        for i, v in enumerate(temperatures):\n            while stk and temperatures[stk[-1]] &lt; v:\n                idx = stk.pop()\n                ans[idx] = i-idx\n            stk.append(i)\n        return ans\n</code></pre> equivalency <pre><code>stk.pop(-1)\n    ||\n    ||\n    ||\nstk.pop()\n</code></pre> Algo dry run Corner <pre><code>i = 0 , v = 73\nstk = [0]\nans = [0,0,0,0,0,0,0,0]\n\ni = 1 , v =74\nidx = 0\nans[idx] = i -idx\nans[0] = 1-0 = 1\nstk = [1]\n\ni = 2 , v = 75\nidx = 1\nans[idx] = i - idx\nans[1] = 2-1 = 1\nstk = [2]\n\ni = 3 , v= 71\n</code></pre>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#approachmonotonic-stack-increasing","title":"Approach:Monotonic Stack (Increasing)","text":"<p>Question</p> <p>Follow up: Is it possible to solve this problem using increasing stack?</p> <p>Answer: No. This problem cannot be solved by increasing stack from either direction. If increasing stack is used, then when a smaller element is met, the last element in the stack will be popped. Then the reference for the popped element is missed. Never will we know which element is its larger element.</p> Monotonic Stack Increasing template Akhil Singh Chauhan                          Creator","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/739/#monotonic-increasing-stack","title":"Monotonic increasing stack","text":"<p>The same logic can be applied to maintain a monotonic queue.</p> <pre><code>def fn(arr):\n    stack = []\n    ans = 0\n\n    for num in arr:\n        # for monotonic decreasing, just flip the &gt; to &lt;\n        while stack and stack[-1] &gt; num:\n            # do logic\n            stack.pop()\n        stack.append(num)\n\n    return ans\n</code></pre>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/74/","title":"74. Search a 2D Matrix","text":"","tags":["Array","Binary Search","Matrix"]},{"location":"problems/74/#74-search-a-2d-matrix","title":"74. Search a 2D Matrix","text":"<p>Medium</p>","tags":["Array","Binary Search","Matrix"]},{"location":"problems/74/#description","title":"Description","text":"<p>You are given an m x n integer matrix matrix with the following two properties:</p> <ul> <li>Each row is sorted in non-decreasing order.</li> <li>The first integer of each row is greater than the last integer of the previous row.</li> <li>Given an integer target, return true if target is in matrix or false otherwise.</li> </ul> <p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p> <p>Example 1:</p> <pre><code>Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-104 &lt;= matrix[i][j], target &lt;= 104</code></li> </ul>","tags":["Array","Binary Search","Matrix"]},{"location":"problems/74/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Matrix"]},{"location":"problems/746/","title":"746. Min Cost Climbing Stairs","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/746/#746-min-cost-climbing-stairs","title":"746. Min Cost Climbing Stairs","text":"<p>Easy</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/746/#description","title":"Description","text":"<p>You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.</p> <p>You can either start from the step with index 0, or the step with index 1.</p> <p>Return the minimum cost to reach the top of the floor.</p> <p>Example 1:</p> <pre><code>Input: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n</code></pre> <p>Example 2:</p> <pre><code>Input: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= cost.length &lt;= 1000</code></li> <li><code>0 &lt;= cost[i] &lt;= 999</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/746/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/76/","title":"76. Minimum Window Substring","text":"","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/76/#76-minimum-window-substring","title":"76. Minimum Window Substring","text":"<p>Hard</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/76/#description","title":"Description","text":"<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".</p> <p>The testcases will be generated such that the answer is unique.</p> <p>Example 1:</p> <pre><code>Input: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == s.length</code></li> <li><code>n == t.length</code></li> <li><code>1 &lt;= m, n &lt;= 10\u2075</code></li> <li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li> </ul> <p>Follow up: Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/76/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/78/","title":"78. Subsets","text":"","tags":["Array","Backtracking","Bit Manipulation"]},{"location":"problems/78/#78-subsets","title":"78. Subsets","text":"<p>Medium</p>","tags":["Array","Backtracking","Bit Manipulation"]},{"location":"problems/78/#description","title":"Description","text":"<p>Given an integer array nums of unique elements, return all possible subsets (1) (the power set).</p> <ol> <li> <p> Subset</p> <ul> <li>A subset of an array is a selection of elements (possibly none) of the array.</li> </ul> </li> </ol> <p>The solution set must not contain duplicate subsets. Return the solution in any order.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3]\nOutput: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0]\nOutput: [[], [0]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li><code>All the numbers of nums are unique.</code></li> </ul>","tags":["Array","Backtracking","Bit Manipulation"]},{"location":"problems/78/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Backtracking","Bit Manipulation"]},{"location":"problems/783/","title":"783. Minimum Distance Between BST Nodes","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/783/#783-minimum-distance-between-bst-nodes","title":"783. Minimum Distance Between BST Nodes","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/783/#description","title":"Description","text":"<p>Given the <code>root</code> of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [4,2,6,1,3]\nOutput: 1\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [1,0,48,null,null,12,49]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10\u2075</code></li> </ul> <p>Note: This question is the same as 530. Minimum Absolute Difference in BST</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/783/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/787/","title":"787. Cheapest Flights Within K Stops","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/787/#787-cheapest-flights-within-k-stops","title":"787. Cheapest Flights Within K Stops","text":"<p>Medium</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/787/#description","title":"Description","text":"<p>There are <code>n</code> cities connected by some number of flights. You are given an array flights where flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>] indicates that there is a flight from city fromi to city toi with cost price<sub>i</sub>.</p> <p>You are also given three integers <code>src</code>, <code>dst</code>, and <code>k</code>, return the cheapest price from <code>src</code> to <code>dst</code> with at most <code>k</code> stops. If there is no such route, return <code>-1</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation:\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li> <li><code>flights[i].length == 3</code></li> <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li> <li><code>from<sub>i</sub> != to<sub>i</sub> </code></li> <li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>There will not be any multiple flights between two cities.</li> <li><code>0 &lt;= src, dst, k &lt; n</code></li> <li><code>src != dst</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/787/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/79/","title":"79. Word Search","text":"","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"problems/79/#79-word-search","title":"79. Word Search","text":"<p>Medium</p>","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"problems/79/#description","title":"Description","text":"<p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> if <code>word</code> exists in the grid.</p> <p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p> <p>Example 1:</p> <pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n</code></pre> <p></p> <p>Example 3:</p> <pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n = board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 6</code></li> <li><code>1 &lt;= word.length &lt;= 15</code></li> <li><code>board and word consists of only lowercase and uppercase English letters.</code></li> </ul> <p>Follow up: Could you use search pruning to make your solution faster with a larger <code>board</code>?</p>","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"problems/79/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"problems/81/","title":"81. Search in Rotated Sorted Array II","text":"","tags":["Array","Binary Search"]},{"location":"problems/81/#81-search-in-rotated-sorted-array-ii","title":"81. Search in Rotated Sorted Array II","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/81/#description","title":"Description","text":"<p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with distinct values).</p> <p>Before being passed to your function, <code>nums</code> is rotated at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p> <p>Given the array <code>nums</code> after the rotation and an integer <code>target</code>, return <code>true</code> if <code>target</code> is in <code>nums</code>, or <code>false</code> if it is not in <code>nums</code>.</p> <p>You must decrease the overall operation steps as much as possible.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-10\u2074 &lt;= nums[i] &lt;= 10\u2074</code></li> <li><code>nums</code> is guaranteed to be rotated at some pivot.</li> <li><code>-10\u2074 &lt;= target &lt;= 10\u2074</code></li> </ul> <p>Follow up: This problem is similar to 33. Search in Rotated Sorted Array, but <code>nums</code> may contain duplicates. Would this affect the runtime complexity? How and why?</p>","tags":["Array","Binary Search"]},{"location":"problems/81/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/84/","title":"84. Largest Rectangle in Histogram","text":"","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/84/#84-largest-rectangle-in-histogram","title":"84. Largest Rectangle in Histogram","text":"<p>Hard</p>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/84/#description","title":"Description","text":"<p>Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.</p> <p>Example 1:</p> <p></p> <pre><code>Input: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: heights = [2,4]\nOutput: 4\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= heights.length &lt;= 10\u2075</code></li> <li><code>0 &lt;= heights[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/84/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Stack","Monotonic Stack"]},{"location":"problems/85/","title":"85. Maximal Rectangle","text":"","tags":["Array","Dynamic Programming","Stack","Matrix","Monotonic Stack"]},{"location":"problems/85/#85-maximal-rectangle","title":"85. Maximal Rectangle","text":"<p>Hard</p>","tags":["Array","Dynamic Programming","Stack","Matrix","Monotonic Stack"]},{"location":"problems/85/#description","title":"Description","text":"<p>Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.</p> <p>Example 1:</p> <p></p> <pre><code>Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n</code></pre> <p>Example 2:</p> <pre><code>Input: matrix = [[\"0\"]]\nOutput: 0\n</code></pre> <p>Example 3:</p> <pre><code>Input: matrix = [[\"1\"]]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>rows == matrix.length</code></li> <li><code>cols == matrix[i].length</code></li> <li><code>1 &lt;= row, cols &lt;= 200</code></li> <li><code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li> </ul>","tags":["Array","Dynamic Programming","Stack","Matrix","Monotonic Stack"]},{"location":"problems/85/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Stack","Matrix","Monotonic Stack"]},{"location":"problems/853/","title":"853. Car Fleet","text":"","tags":["Array","Stack","Sorting","Monotonic Stack"]},{"location":"problems/853/#853-car-fleet","title":"853. Car Fleet","text":"<p>Medium</p>","tags":["Array","Stack","Sorting","Monotonic Stack"]},{"location":"problems/853/#description","title":"Description","text":"<p>There are <code>n</code> cars at given miles away from the starting mile 0, traveling to reach the mile <code>target</code>.</p> <p>You are given two integer arrays <code>position</code> and <code>speed</code>, both of length <code>n</code>, where <code>position[i]</code> is the starting mile of the i^{th} car and <code>speed[i]</code> is the speed of the i^{th} car in miles per hour.</p> <p>A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.</p> <p>A car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.</p> <p>If a car catches up to a car fleet at the mile <code>target</code>, it will still be considered as part of the car fleet.</p> <p>Return the number of car fleets that will arrive at the destination.</p> <p>Example 1:</p> <pre><code>Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n\nOutput: 3\n</code></pre> <p>Explanation:</p> <ul> <li>The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at <code>target</code>.</li> <li>The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself.</li> <li>The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches <code>target</code>.</li> </ul> <p>Example 2:</p> <pre><code>Input: target = 10, position = [3], speed = [3]\n\nOutput: 1\n</code></pre> <p>Explanation:</p> <ul> <li>There is only one car, hence there is only one fleet.</li> </ul> <p>Example 3:</p> <pre><code>Input: target = 100, position = [0,2,4], speed = [4,2,1]\n\nOutput: 1\n</code></pre> <p>Explanation:</p> <ul> <li>The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5.</li> <li>Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches <code>target</code>.</li> </ul> <p>Constraints:</p> <ul> <li><code>n == position.length == speed.length</code></li> <li><code>1 &lt;= n &lt;= 10\u2075</code></li> <li><code>0 &lt; target &lt;= 10\u2076</code></li> <li><code>0 &lt;= position[i] &lt; target</code></li> <li>All the values of <code>position</code> are unique.</li> <li><code>0 &lt; speed[i] &lt;= 10\u2076</code></li> </ul>","tags":["Array","Stack","Sorting","Monotonic Stack"]},{"location":"problems/853/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Stack","Sorting","Monotonic Stack"]},{"location":"problems/875/","title":"875. Koko Eating Bananas","text":"","tags":["Array","Binary Search"]},{"location":"problems/875/#875-koko-eating-bananas","title":"875. Koko Eating Bananas","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/875/#description","title":"Description","text":"<p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the i<sup>th</sup> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p> <p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p> <p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p> <p>Return the minimum integer <code>k</code> such that she can eat all the bananas within <code>h</code> hours.</p> <p>Example 1:</p> <pre><code>Input: piles = [3,6,7,11], h = 8\nOutput: 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: piles = [30,11,23,4,20], h = 5\nOutput: 30\n</code></pre> <p>Example 3:</p> <pre><code>Input: piles = [30,11,23,4,20], h = 6\nOutput: 23\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= piles.length &lt;= 10\u2074</code></li> <li><code>piles.length &lt;= h &lt;= 10\u2079</code></li> <li><code>1 &lt;= piles[i] &lt;= 10\u2079</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/875/#solutions","title":"Solutions \ud83d\udd13","text":"","tags":["Array","Binary Search"]},{"location":"problems/875/#approach-modified-binary-search","title":"Approach: Modified Binary Search","text":"<p> Time complexity: \\(O(n \\log M)\\)</p> <p> Space complexity: \\(O(1)\\)</p> Algorithm Template","tags":["Array","Binary Search"]},{"location":"problems/875/#modified-binary-search-for-greedy-problems","title":"Modified Binary search: For greedy problems","text":"","tags":["Array","Binary Search"]},{"location":"problems/875/#case-problem-function-is-monotonically-decreasing","title":"Case: Problem Function is monotonically decreasing","text":"<ul> <li>If looking for a minimum</li> </ul> <pre><code>  def fn(arr):\n\n    def check(x): # this function is implemented depending on the problem\n        return BOOLEAN\n\n    left = MINIMUM_POSSIBLE_ANSWER\n    right = MAXIMUM_POSSIBLE_ANSWER\n\n    while left &lt;= right:\n        mid = (left + right) // 2\n\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left\n</code></pre>","tags":["Array","Binary Search"]},{"location":"problems/875/#way-1-algorithmic","title":"Way 1: Algorithmic","text":"<p>Algorithm</p> <p>We notice that if Koko can eat all the bananas at a speed of <code>k</code> within <code>h</code> hours, then she can also eat all the bananas at a speed of <code>k1 &gt; k</code> within <code>h</code> hours. This shows monotonicity, so we can use binary search to find the smallest <code>k</code> that satisfies the condition.</p> <p>We define the left boundary of the binary search as \\(L=1\\) and the right boundary as \\(R=max(piles)\\).</p> <p>For each binary search, we take the middle value \\(mid= (L+R)//2\\), and then calculate the time <code>t</code> required to eat bananas at a speed of \\(mid\\).</p> <p>If \\(t\u2264h\\), it means that the speed of \\(mid\\) can meet the condition, and we update the right boundary \\(R\\) to \\(mid\\);</p> <p>otherwise, we update the left boundary \\(L\\) to \\(mid+1\\).</p> <p>Finally, when \\(L==R\\), we find the smallest <code>k</code> that satisfies the condition.</p> <p>The time complexity is \\(O(n \\log M)\\), where \\(n\\) and \\(M\\) are the length and maximum value of the array piles respectively. The space complexity is \\(O(1)\\).</p> Python <pre><code>from math import ceil\n\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -&gt; int:\n\n        L , R = 1 , max(piles)                      # L &amp; R are the min &amp; max speed (numbers , not indices) to finish/eat array piles\n        ans = R                                     # We are trying to minimize ans (rate of eating)\n\n        while L &lt; R:\n            mid = (L+R)//2                          # mid, average speed of koko eating\n\n            t = sum(ceil(x/mid) for x in piles)     # total time to eat each pile at speed mid at loose bound\n\n            if t&lt;=h:                                # when the total time `t` approaches `h` we are sure we found a minimum speed `mid` and store it.\n                ans = min(ans,mid)\n                R = mid\n            else:\n                L = mid+1\n\n        return ans # L\n</code></pre> equivalency <pre><code>t = sum(ceil(x/mid) for x in piles)\n            ||\n        equivalent\n            ||\nt = sum((x + mid - 1) // mid for x in piles)\n</code></pre> <p>Note</p> <p>We are applying Binary search on speed array <code>K = [1......max(piles)]</code> i.e <code>K= [1,2,3,4,5,6,7,8,9,10,11]</code> when <code>piles = [3,6,7,11]</code></p> <p>\\(Speed = Banana/Time\\)</p> <p>\\(F(Speed)\\) is monotonically decresing so update \\(R\\) towards \\(mid\\) when LESS THAN CONDITION</p>","tags":["Array","Binary Search"]},{"location":"problems/875/#way-2-pythonic","title":"Way 2: Pythonic","text":"Python <pre><code>class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -&gt; int:\n        def check(k: int) -&gt; bool:\n            return sum((x + k - 1) // k for x in piles) &lt;= h\n\n        return 1 + bisect_left(range(1, max(piles) + 1), True, key=check)\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/876/","title":"876. Middle of the Linked List","text":"","tags":["Linked List","Two Pointers"]},{"location":"problems/876/#876-middle-of-the-linked-list","title":"876. Middle of the Linked List","text":"<p>Easy</p>","tags":["Linked List","Two Pointers"]},{"location":"problems/876/#description","title":"Description","text":"<p>Given the <code>head</code> of a singly linked list, return the middle node of the linked list.</p> <p>If there are two middle nodes, return the second middle node.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5]\nOutput: [3, 4, 5]\nExplanation: The middle node of the list is node 3.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5,6]\nOutput: [4, 5, 6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Linked List","Two Pointers"]},{"location":"problems/876/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Two Pointers"]},{"location":"problems/88/","title":"88. Merge Sorted Array","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/88/#88-merge-sorted-array","title":"88. Merge Sorted Array","text":"<p>Easy</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/88/#description","title":"Description","text":"<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p> <p>Merge <code>nums1</code> and <code>nums2</code> into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p> <p>Example 1:</p> <pre><code>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</code></pre> <p>Constraints:</p> <ul> <li><code>nums1.length == m + n</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m, n &lt;= 200</code></li> <li><code>1 &lt;= m + n &lt;= 200</code></li> <li><code>-10\u2079 &lt;= nums1[i], nums2[j] &lt;= 10\u2079</code></li> </ul> <p>Follow up: Can you come up with an algorithm that runs in O(m + n) time?</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/88/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/895/","title":"895. Maximum Frequency Stack","text":"","tags":["Hash Table","Stack","Design","Ordered Set"]},{"location":"problems/895/#895-maximum-frequency-stack","title":"895. Maximum Frequency Stack","text":"<p>Hard</p>","tags":["Hash Table","Stack","Design","Ordered Set"]},{"location":"problems/895/#description","title":"Description","text":"<p>Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.</p> <p>Implement the <code>FreqStack</code> class:</p> <ul> <li><code>FreqStack()</code> constructs an empty frequency stack.</li> <li><code>void push(int val)</code> pushes an integer val onto the top of the stack.</li> <li> <p><code>int pop()</code> removes and returns the most frequent element in the stack.</p> </li> <li> <p>If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.</p> </li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\nOutput\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\nExplanation\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= val &lt;= 10\u2079</code></li> <li>At most <code>2 * 10\u2074</code> calls will be made to <code>push</code> and <code>pop</code>.</li> <li>It is guaranteed that there will be at least one element in the stack before calling <code>pop</code>.</li> </ul>","tags":["Hash Table","Stack","Design","Ordered Set"]},{"location":"problems/895/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Stack","Design","Ordered Set"]},{"location":"problems/9/","title":"9. Palindrome Number","text":"","tags":["Math"]},{"location":"problems/9/#9-palindrome-number","title":"9. Palindrome Number","text":"<p>Easy</p>","tags":["Math"]},{"location":"problems/9/#description","title":"Description","text":"<p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is a palindrome (1), and <code>false</code> otherwise.</p> <ol> <li> <p> Palindrome</p> <p>An integer is a palindrome when it reads the same forward and backward.</p> <p>For example, <code>121</code> is a palindrome while <code>123</code> is not.</p> </li> </ol> <p>Example 1:</p> <pre><code>Input: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n</code></pre> <p>Example 2:</p> <pre><code>Input: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</code></pre> <p>Example 3:</p> <pre><code>Input: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n</code></pre> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup>$ &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p>Follow up: Could you solve it without converting the integer to a string?</p>","tags":["Math"]},{"location":"problems/9/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math"]},{"location":"problems/912/","title":"912. Sort an Array","text":"","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Merge Sort","Bucket Sort","Radix Sort","Counting Sort"]},{"location":"problems/912/#912-sort-an-array","title":"912. Sort an Array","text":"<p>Medium</p>","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Merge Sort","Bucket Sort","Radix Sort","Counting Sort"]},{"location":"problems/912/#description","title":"Description","text":"<p>Given an array of integers <code>nums</code>, sort the array in ascending order and return it.</p> <p>You must solve the problem without using any built-in functions in <code>O(nlog(n))</code> time complexity and with the smallest space complexity possible.</p> <p>Example 1:</p> <pre><code>Input: nums = [5,2,3,1]\nOutput: [1, 2, 3, 5]\nExplanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [5,1,1,2,0,0]\nOutput: [0, 0, 1, 1, 2, 5]\nExplanation: Note that the values of nums are not necessarily unique.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10\u2074</code></li> <li><code>-5 * 10\u2074 &lt;= nums[i] &lt;= 5 * 10\u2074</code></li> </ul>","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Merge Sort","Bucket Sort","Radix Sort","Counting Sort"]},{"location":"problems/912/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Divide and Conquer","Sorting","Heap (Priority Queue)","Merge Sort","Bucket Sort","Radix Sort","Counting Sort"]},{"location":"problems/918/","title":"918. Maximum Sum Circular Subarray","text":"","tags":["Array","Divide and Conquer","Dynamic Programming","Queue","Monotonic Queue"]},{"location":"problems/918/#918-maximum-sum-circular-subarray","title":"918. Maximum Sum Circular Subarray","text":"<p>Medium</p>","tags":["Array","Divide and Conquer","Dynamic Programming","Queue","Monotonic Queue"]},{"location":"problems/918/#description","title":"Description","text":"<p>Given a circular integer array <code>nums</code> of length <code>n</code>, return the maximum possible sum of a non-empty subarray of nums.</p> <p>A circular array means the end of the array connects to the beginning of the array. Formally, the next element of <code>nums[i]</code> is <code>nums[(i + 1) % n]</code> and the previous element of <code>nums[i]</code> is <code>nums[(i - 1 + n) % n]</code>.</p> <p>A subarray may only include each element of the fixed buffer <code>nums</code> at most once. Formally, for a subarray <code>nums[i], nums[i + 1], ..., nums[j]</code>, there does not exist <code>i &lt;= k1</code>, <code>k2 &lt;= j</code> with <code>k1 % n == k2 % n</code>.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [5,-3,5]\nOutput: 10\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [-3,-2,-3]\nOutput: -2\nExplanation: Subarray [-2] has maximum sum -2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 3 * 10\u2074</code></li> <li><code>-3 * 10\u2074 &lt;= nums[i] &lt;= 3 * 10\u2074</code></li> </ul>","tags":["Array","Divide and Conquer","Dynamic Programming","Queue","Monotonic Queue"]},{"location":"problems/918/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Divide and Conquer","Dynamic Programming","Queue","Monotonic Queue"]},{"location":"problems/973/","title":"973. K Closest Points to Origin","text":"","tags":["Array","Math","Divide and Conquer","Geometry","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/973/#973-k-closest-points-to-origin","title":"973. K Closest Points to Origin","text":"<p>Medium</p>","tags":["Array","Math","Divide and Conquer","Geometry","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/973/#description","title":"Description","text":"<p>Given an array of <code>points</code> where <code>points[i] = [x\u1d62, y\u1d62]</code> represents a point on the X-Y plane and an integer <code>k</code>, return the <code>k</code> closest points to the origin <code>(0, 0)</code>.</p> <p>The distance between two points on the X-Y plane is the Euclidean distance (i.e., <code>\u221a(x1 - x2)\u00b2 + (y1 - y2)\u00b2</code>).</p> <p>You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).</p> <p>Example 1:</p> <p></p> <pre><code>Input: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].\n</code></pre> <p>Example 2:</p> <pre><code>Input: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3, 3], [-2, 4]]\nExplanation: The answer [[-2,4],[3,3]] would also be accepted.\n</code></pre> <p>Example 3:</p> <pre><code>Input: arr = [100]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= points.length &lt;= 10\u2074</code></li> <li><code>-10\u2074 &lt;= x\u1d62, y\u1d62 &lt;= 10\u2074</code></li> </ul>","tags":["Array","Math","Divide and Conquer","Geometry","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/973/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Math","Divide and Conquer","Geometry","Sorting","Heap (Priority Queue)","Quickselect"]},{"location":"problems/978/","title":"978. Longest Turbulent Subarray","text":"","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/978/#978-longest-turbulent-subarray","title":"978. Longest Turbulent Subarray","text":"<p>Medium</p>","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/978/#description","title":"Description","text":"<p>Given an integer array <code>arr</code>, return the length of a maximum size turbulent subarray of <code>arr</code>.</p> <p>A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.</p> <p>More formally, a subarray <code>[arr[i], arr[i + 1], ..., arr[j]]</code> of <code>arr</code> is said to be turbulent if and only if:</p> <ul> <li> <p>For <code>i &lt;= k &lt; j</code>:</p> <ul> <li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is odd, and</li> <li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is even.</li> </ul> </li> <li> <p>Or, for <code>i &lt;= k &lt; j</code>:</p> <ul> <li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is even, and</li> <li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is odd.</li> </ul> </li> </ul> <p>Example 1:</p> <pre><code>Input: arr = [9,4,2,10,7,8,8,1,9]\nOutput: 5\nExplanation: arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: arr = [4,8,12,16]\nOutput: 2\n</code></pre> <p>Example 3:</p> <pre><code>Input: arr = [100]\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 4 * 10\u2074</code></li> <li><code>0 &lt;= arr[i] &lt;= 10\u2079</code></li> </ul>","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/978/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming","Sliding Window"]},{"location":"problems/98/","title":"98. Validate Binary Search Tree","text":"","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/98/#98-validate-binary-search-tree","title":"98. Validate Binary Search Tree","text":"<p>Medium</p>","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/98/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, determine if it is a valid binary search tree (BST).</p> <p>A valid BST is defined as follows:</p> <p>The left subtree of a node contains only nodes with keys less than the node's key.</p> <p>The right subtree of a node contains only nodes with keys greater than the node's key.</p> <p>Both the left and right subtrees must also be binary search trees.</p> <p>Example 1:</p> <p></p> <pre><code>Input: root = [2,1,3]\nOutput: true\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10\u2074]</code>.</li> <li>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</li> </ul>","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/98/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},{"location":"problems/981/","title":"981. Time Based Key-Value Store","text":"","tags":["Hash Table","String","Binary Search","Design"]},{"location":"problems/981/#981-time-based-key-value-store","title":"981. Time Based Key-Value Store","text":"<p>Medium</p>","tags":["Hash Table","String","Binary Search","Design"]},{"location":"problems/981/#description","title":"Description","text":"<p>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.</p> <p>Implement the <code>TimeMap</code> class:</p> <ul> <li><code>TimeMap()</code> Initializes the object of the data structure.</li> <li><code>void set(String key, String value, int timestamp)</code> Stores the key key with the value value at the given time timestamp.</li> <li><code>String get(String key, int timestamp)</code> Returns a value such that set was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>\"\"</code>.</li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\nOutput\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\nExplanation\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\"\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= key.length, value.length &lt;= 100</code></li> <li><code>key</code> and <code>value</code> consist of lowercase English letters and digits.</li> <li><code>1 &lt;= timestamp &lt;= 10\u2077</code></li> <li>All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</li> <li>At most <code>2*10\u2075</code> calls will be made to <code>set</code> and <code>get</code>.</li> </ul>","tags":["Hash Table","String","Binary Search","Design"]},{"location":"problems/981/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Binary Search","Design"]},{"location":"problems/994/","title":"994. Rotting Oranges","text":"","tags":["Array","Breadth-First Search","Matrix"]},{"location":"problems/994/#994-rotting-oranges","title":"994. Rotting Oranges","text":"<p>Medium</p>","tags":["Array","Breadth-First Search","Matrix"]},{"location":"problems/994/#description","title":"Description","text":"<p>You are given an m x n grid where each cell can have one of three values:</p> <ul> <li>0 representing an empty cell,</li> <li>1 representing a fresh orange, or</li> <li>2 representing a rotten orange.</li> </ul> <p>Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.</p> <p>Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return <code>-1</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: grid = [[2,1,1],[1,1,0],[0,1,1]]\nOutput: 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: grid = [[2,1,1],[0,1,1],[1,0,1]]\nOutput: -1\nExplanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n</code></pre> <p>Example 3:</p> <pre><code>Input: grid = [[0,2]]\nOutput: 0\nExplanation: Since there are already no fresh oranges at minute 0, the answer is just 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>grid[i][j] is 0, 1, or 2.</code></li> </ul>","tags":["Array","Breadth-First Search","Matrix"]},{"location":"problems/994/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Breadth-First Search","Matrix"]},{"location":"releases/","title":"Latest Releases, Updates, Solutions","text":"Akhil Singh Chauhan                          Creator"},{"location":"releases/#to-do","title":"To Do","text":"<ul> <li>Annotaion fix, Global abbreviations, links &amp; reference with single page enability and disability</li> <li>Login, Logout &amp; SignUp icons on Mobile &amp; Ipads for their respective butto</li> <li>add google ad sense</li> <li>fix content appearing 3 times sometimes on UI</li> <li>Checkout Page, Success Page ,Figure our Payments</li> <li>Integration of Auth0 and Stripe</li> <li>'Access-Control-Allow-Origin': <code>*</code>  'Access-Control-Allow-Origin' : <code>https://dsabible.com</code>,</li> </ul>"},{"location":"releases/#july-29-31-2025","title":"July 29-31, 2025","text":"<ul> <li>Published 225, 232, 162, 1695, 27, 9, 66, 69, 106, 211, 209, 202, 112, 199, 102</li> </ul>"},{"location":"releases/#july-25-28-2025","title":"July 25-28, 2025","text":"<ul> <li>Published 130, 530, 783, 22, 918, 26, 153, 1325, 1326, 1024, 239, 438, 567, 509</li> </ul>"},{"location":"releases/#july-23-24-2025","title":"July 23-24, 2025","text":"<ul> <li>Pubslished 1137, 787, 1448, 2093, 701, 450, 1046</li> <li>Published variations of 53</li> </ul>"},{"location":"releases/#july-22-2025","title":"July 22, 2025","text":"<ul> <li>Added Animation </li> </ul>"},{"location":"releases/#july-20-21-2025","title":"July 20-21, 2025","text":"<ul> <li>Published 128, 300, 23, 64, 25, 210, 189, 133, 912, 148</li> </ul>"},{"location":"releases/#july-19-2025","title":"July 19, 2025","text":"<ul> <li>Added Go Pro in Announcement Bar with its functionality</li> </ul>"},{"location":"releases/#july-15-17-2025","title":"July 15-17, 2025","text":"<ul> <li>Published 48, 658, 78, 347, 167, 36, 138, 224, 133, 211, 88, 289, 994, 55, 45, 17</li> <li>Updated 2028</li> </ul>"},{"location":"releases/#july-14-2025","title":"July 14, 2025","text":"<ul> <li>Shipped new Feature Smart Highlight</li> </ul>"},{"location":"releases/#july-13-2025","title":"July 13, 2025","text":"<ul> <li>Published problems 152, 978 with Smart Highlight for simple code understanding</li> </ul>"},{"location":"releases/#july-10-2025","title":"July 10, 2025","text":"<ul> <li>Configured hello@dsabible.com &amp; Added smtp server for the email</li> </ul>"},{"location":"releases/#july-6-9-2025","title":"July 6-9, 2025","text":"<ul> <li>Published problem 54, 73, 56, 230, 217, 155, 98, 191, 198</li> <li>Updated solutions icons and authentication logic accordingly.</li> </ul>"},{"location":"releases/#july-5-2025","title":"July 5, 2025","text":"<ul> <li>Added back button  in header, it takes user to the previous page</li> </ul>"},{"location":"releases/#june-30-2025","title":"June 30, 2025","text":"<ul> <li>Added problem 108</li> </ul>"},{"location":"releases/#june-29-2025","title":"June 29, 2025","text":"<ul> <li>Added problem 543, 876</li> </ul>"},{"location":"releases/#june-28-2025","title":"June 28, 2025","text":"<ul> <li>Added problems 344, 169 , 268</li> </ul>"},{"location":"releases/#june-27-2025","title":"June 27, 2025","text":"<ul> <li>Added problem 1143</li> <li>Added  Back to top with scroll to top functionality</li> </ul>"},{"location":"releases/#june-26-2025","title":"June 26, 2025","text":"<ul> <li>Added problems 207, 39</li> </ul>"},{"location":"releases/#june-25-2025","title":"June 25, 2025","text":"<ul> <li>Added Google Analytics to understand user</li> </ul>"},{"location":"releases/#junw-24-2025","title":"Junw 24, 2025","text":"<ul> <li>Added problems 295, 297, 100, 146</li> </ul>"},{"location":"releases/#june-25-2025_1","title":"June 25, 2025","text":"<ul> <li>1 Free Category problem to explore</li> <li>Added problems 295, 297, 100, 146 , 33, 739</li> </ul>"},{"location":"releases/#june-24-2025","title":"June 24, 2025","text":"<ul> <li>Updated theme icons</li> </ul>"},{"location":"releases/#june-23-2025","title":"June 23, 2025","text":"<ul> <li>Updated dsabible content</li> </ul>"},{"location":"releases/#june-22-2025","title":"June 22, 2025","text":"<ul> <li>No ads for paid users</li> </ul>"},{"location":"releases/#june-21-2025","title":"June 21, 2025","text":"<ul> <li>Click on site name takes to home page</li> </ul>"},{"location":"releases/#june-20-2025","title":"June 20, 2025","text":"<ul> <li>Added problems 206, 705 , 706, 141</li> </ul>"},{"location":"releases/#june-19-2025","title":"June 19, 2025","text":"<ul> <li>Images are uploaded on github branch and called from there.</li> </ul>"},{"location":"releases/#june-18-2025","title":"June 18, 2025","text":"<ul> <li>Splitted Code into Modular Structure to improve maintainability and code redeability , relaibility</li> <li>Made Annotations to appear after authentication</li> <li>Restored Annotations positions across multiple screens before and after authentication.</li> </ul>"},{"location":"releases/#june-17-2025","title":"June 17, 2025","text":"<ul> <li>Added ability to enable or disable page-wise snippets with global (abbreviations, links &amp; references).</li> <li>Added 125. Valid Palindrome</li> </ul>"},{"location":"releases/#june-16-2025","title":"June 16, 2025","text":"<ul> <li>Legals in custom footer</li> <li>Added Terms of Service, Subscription Agreement.</li> <li>Glightbox for images customizations.</li> </ul>"},{"location":"releases/#june-15-2025","title":"June 15, 2025","text":"<ul> <li>Added Optimization Problem 4. N-Queen</li> <li>added recursion diagram</li> <li>added new definitions</li> <li>custom theme based accent colors</li> </ul>"},{"location":"releases/#june-14-2025","title":"June 14, 2025","text":""},{"location":"releases/#june-13-2025","title":"June 13, 2025","text":"<ul> <li> Login  Logout   and  SignUp buttons with their icons on headers</li> </ul>"},{"location":"releases/#june-12-2025","title":"June 12, 2025","text":"<ul> <li>Added 139. Word Break</li> </ul>"},{"location":"releases/#june-11-2025","title":"June 11, 2025","text":"<ul> <li>Gated Companiy-Wise Problems Section via Authentication &amp; Authorization with js state management and DOM.</li> </ul>"},{"location":"releases/#june-10-2025","title":"June 10, 2025","text":"<ul> <li>Added 50. Pow(x, n)</li> </ul>"},{"location":"releases/#june-9-2025","title":"June 9, 2025","text":"<ul> <li>Found a new way to group/classify other than the tags.</li> </ul>"},{"location":"releases/#june-8-2025","title":"June 8, 2025","text":"<ul> <li>Made PanZoom feature on images and visual diagrams maintaining gated content \ud83e\udd14</li> <li>Prevented gated content leak upon adding of panzoom effect \ud83d\ude07</li> </ul>"},{"location":"releases/#june-7-2025","title":"June 7, 2025","text":"<ul> <li>Added Glossary, Updated Definitions</li> </ul>"},{"location":"releases/#june-6-2025","title":"June 6, 2025","text":"<ul> <li>Mermaid Diagram for 6. Depot Locations Problem</li> <li>Pan Zoom breaking the code</li> </ul>"},{"location":"releases/#june-5-2025","title":"June 5, 2025","text":"<ul> <li>Refactor code-base spilited problems and their solution into separate components.</li> <li>Combining specific solution with its description after authentication only.</li> </ul>"},{"location":"releases/#june-4-2025","title":"June 4, 2025","text":"<ul> <li>Improved UI response time</li> </ul>"},{"location":"releases/#june-3-2025","title":"June 3, 2025","text":"<ul> <li>Companies asked problems categorization by building company-tag-system.</li> </ul>"},{"location":"releases/#june-2-2025","title":"June 2, 2025","text":"<ul> <li>Major Fix Reinitialized Mkdocs components \ud83d\ude05.</li> <li>Fixed issue where protected content was loading multiple times on page refresh \ud83e\udd2f</li> <li>Added debouncing and rendering guards to prevent duplicate content rendering \ud83d\ude0e</li> <li>Improved event listener management for better performance \ud83e\udee3</li> </ul>"},{"location":"releases/#june-1-2025","title":"June 1, 2025","text":"<ul> <li>added Pull to refresh on PWA on branch pwa-with-pull-refresh</li> <li>79. Word Search</li> <li>212. Word Search II</li> <li>Fixed Pricing Page Subscribe buttons event listeners.</li> </ul>"},{"location":"releases/#may-31-2025","title":"May 31, 2025","text":"<ul> <li>login-subscription card</li> <li>gated content based on auth'n , auth'z and subscription levels</li> <li>responsive content on all screens</li> </ul>"},{"location":"releases/#may-30-2025","title":"May 30, 2025","text":"<ul> <li>established communication between client-side, service-workers, auth-system and payment-system to work in sync.</li> </ul>"},{"location":"releases/#may-29-2025","title":"May 29, 2025","text":"<ul> <li>authorization system signup screen on click of signup button</li> </ul>"},{"location":"releases/#may-28-2025","title":"May 28, 2025","text":"<ul> <li>resolved CORS on service workers</li> </ul>"},{"location":"releases/#may-27-2025","title":"May 27, 2025","text":"<ul> <li>service workers to support payments</li> <li>deployed service workers</li> </ul>"},{"location":"releases/#may-26-2025","title":"May 26, 2025","text":"<ul> <li>checkout page</li> <li>success page</li> </ul>"},{"location":"releases/#may-25-2025","title":"May 25, 2025","text":"<ul> <li>universal checkout links</li> <li>integrated embedded payment system</li> </ul>"},{"location":"releases/#may-24-2025","title":"May 24, 2025","text":"<ul> <li>configured auth system (auth0) and payment system (stripe) via actions</li> <li>linked user_id to same user_payment_id</li> </ul>"},{"location":"releases/#may-23-2025","title":"May 23, 2025","text":"<ul> <li>updated requirements</li> <li>updated topics</li> <li>fixed index heap tag Heap (Priority-Queue) topic mapping</li> </ul>"},{"location":"releases/#may-22-2025","title":"May 22, 2025","text":"<ul> <li>Privacy Policy page</li> </ul>"},{"location":"releases/#may-21-2025","title":"May 21, 2025","text":"<ul> <li>Global and Local Meta Data</li> <li>Custom Author Data Logic via meta tags</li> </ul>"},{"location":"releases/#may-20-2025","title":"May 20, 2025","text":"<ul> <li>Added Debouncing, Event-Listeners</li> </ul>"},{"location":"releases/#may-19-2025","title":"May 19, 2025","text":"<ul> <li>Fast Loading of Pages</li> <li>Removed Lag on problems pages.</li> </ul>"},{"location":"releases/#may-18-2025","title":"May 18, 2025","text":"<ul> <li>Login SignUp Card to protect content from unauthorized access on all pages</li> </ul>"},{"location":"releases/#may-17-2025","title":"May 17, 2025","text":"<ul> <li>Pricing Card</li> </ul>"},{"location":"releases/#may-16-2025","title":"May 16, 2025","text":"<ul> <li>Connected Auth0 with Stripe in Actions</li> </ul>"},{"location":"releases/#may-15-2025","title":"May 15, 2025","text":"<ul> <li>Hacked multiple ways to customize mkdocs material</li> </ul>"},{"location":"releases/#may-14-2025","title":"May 14, 2025","text":"<ul> <li>Login &amp; SignUp buttons in custom-header for desktops with auth routes functionalities</li> </ul>"},{"location":"releases/#may-13-2025","title":"May 13, 2025","text":"<ul> <li>Authentication , Authorization</li> </ul>"},{"location":"releases/#may-12-2025","title":"May 12, 2025","text":"<ul> <li>Added Comment System</li> <li>74. Search a 2D Matrix</li> <li>240. Search a 2D Matrix II</li> </ul>"},{"location":"releases/#may-11-2025","title":"May 11, 2025","text":"<ul> <li>Added FeedBack System</li> </ul>"},{"location":"releases/#may-10-2025","title":"May 10, 2025","text":"<ul> <li>DSA Bible source code is private, deployment is public on ghpages with custom domain name.</li> </ul>"},{"location":"releases/#may-9-2025","title":"May 9, 2025","text":"<ul> <li>Custom Theme setup</li> <li>non-sticky header</li> <li>TOC Optional</li> <li>path to Topic Navigation Page via topic tags</li> <li>inherit &amp; custom via code (optional) admomitions border-colors</li> </ul>"},{"location":"releases/#may-8-2025","title":"May 8, 2025","text":"<ul> <li>Clean, Better solution to fetch all tags on index page using built-in tags (without macros).</li> <li>Clicking on a tag Array take user to respective tag on topics page.</li> <li>Created Problem Categories based on topics, list, companies</li> </ul>"},{"location":"releases/#may-7-2025","title":"May 7, 2025","text":"<ul> <li>One solution to fetch all tags on index page via macros using url path</li> </ul>"},{"location":"releases/#may-6-2025","title":"May 6, 2025","text":"<ul> <li>Added new feature grouping pages based on TAGS Topics page</li> </ul>"},{"location":"releases/#may-5-2025","title":"May 5, 2025","text":"<ul> <li>3. Composing flight crews</li> </ul>"},{"location":"releases/#may-4-2025","title":"May 4, 2025","text":"<ul> <li>Added Mermaid, GraphViz extensions to support graphs,diagrams for</li> </ul>"},{"location":"releases/#may-2-3-2025","title":"May 2 - 3, 2025","text":"<ul> <li>374. Guess Number Higher or Lower</li> <li>19. Remove Nth Node From End of List</li> </ul>"},{"location":"releases/#may-1-2025","title":"May 1, 2025","text":"<ul> <li>Added Optimization problems with working online IDE</li> <li>1. Mixed Integer Programming</li> </ul>"},{"location":"releases/#apr-14-30-2025","title":"Apr 14 - 30, 2025","text":"<ul> <li>Worked on building a compiler/interpreter/online ide.</li> </ul>"},{"location":"releases/#apr-13-2025","title":"Apr 13, 2025","text":"<ul> <li>App with offline capabilities</li> </ul>"},{"location":"releases/#apr-12-2025","title":"Apr 12, 2025","text":"<ul> <li>Web App is now PWA</li> <li>Significant improvement on focus, redeability</li> </ul>"},{"location":"releases/#apr-11-2025","title":"Apr 11, 2025","text":"<ul> <li>Added CI/CD for auto deployment</li> </ul>"},{"location":"releases/#apr-10-2025","title":"Apr 10, 2025","text":"<ul> <li>746. Min Cost Climbing Stairs</li> </ul>"},{"location":"releases/#apr-9-2025","title":"Apr 9, 2025","text":"<ul> <li>Custom CSS for application</li> </ul>"},{"location":"releases/#apr-8-2025","title":"Apr 8, 2025","text":"<ul> <li>135. Candy</li> </ul>"},{"location":"releases/#apr-5-2025","title":"Apr 5, 2025","text":"<ul> <li>2226. Maximum Candies Allocated to K Children</li> </ul>"},{"location":"releases/#apr-4-2025","title":"Apr 4, 2025","text":"<ul> <li>1. Two Sum</li> <li>2. Add Two Number</li> </ul>"}]}