{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Greetings","text":"Akhil Singh Chauhan                          Creator                      <p>Welcome to the grand collection of DSA &amp; Large Optimizations problems with their solutions!</p> <p>This site contains detailed explanations of several data structures and implementations of various algorithms through LeetCode problems.</p>"},{"location":"#terminology-strategies","title":"Terminology &amp; Strategies","text":"<p>Comprehend DSA &amp; Optimizations golden-techniques, terminologies and strategies from here Glossary.</p>"},{"location":"#check-out-every-category-open-problem","title":"Check out every category open \ud83d\udd13 problem","text":"<p>1. Two Sum 238. Product of Array Except Self 15. 3Sum 424. Longest Repeating Character Replacement 739. Daily Temperatures 33. Search in Rotated Sorted Array 875. Koko Eating Bananas 146. LRU Cache 100. Same Tree 297. Serialize and Deserialize Binary Tree 295. Find Median from Data Stream 39. Combination Sum 207. Course Schedule 994. Rotting Oranges 1143. Longest Common Subsequence</p>"},{"location":"#problem-categories","title":"Problem Categories","text":"<p>Air Transport</p> <p>Array</p> <p>Backtracking</p> <p>Binary Search</p> <p>Binary Search Tree</p> <p>Binary Tree</p> <p>Bit Manipulation</p> <p>Breadth-First Search</p> <p>Data Stream</p> <p>Depth-First Search</p> <p>Design</p> <p>Divide and Conquer</p> <p>Dynamic Programming</p> <p>Greedy</p> <p>Ground Transport</p> <p>Hash Table</p> <p>Heap (Priority Queue)</p> <p>Interactive</p> <p>LP</p> <p>Linked List</p> <p>MIP</p> <p>Math</p> <p>Matrix</p> <p>Memoization</p> <p>Monotonic Stack</p> <p>Optimization</p> <p>Recursion</p> <p>Sliding Window</p> <p>Stack</p> <p>String</p> <p>Tree</p> <p>Trie</p> <p>Two Pointers</p> <p>For a complete list of problem categories, see the Topics page.</p>"},{"location":"#companies-asked-problems","title":"Companies Asked Problems","text":"<p>Meta</p> <p>Amazon</p> <p>Apple</p> <p>Netflix</p> <p>Google</p> <p>Microsoft</p> <p>Uber</p> <p>Lyft</p> <p>Airbnb</p> <p>Tesla</p> <p>OpenAI</p> <p>Oracle</p> <p>X (formerly Twitter)</p> <p>For a complete list of company asked problems, see the Companies page.</p>"},{"location":"#popular-lists","title":"Popular Lists","text":"<p>Blind 75</p> <p>Grind 75</p> <p>Interview Master 100</p> <p>Neetcode 150</p> <p>Grind 169</p> <p>Neetcode 250</p> <p>For beginner friendly popular lists, see the Popular Lists page</p>"},{"location":"lists/","title":"Popular Lists Problems","text":"<p>Below are the DSA problems of popular lists, intended for people completely new to data structures, algorithms and optimizations.</p> Akhil Singh Chauhan                          Creator"},{"location":"lists/#tag:blind-75","title":"Blind 75","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            206. Reverse Linked List          </li> <li>            238. Product of Array Except Self          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            62. Unique Paths          </li> <li>            79. Word Search          </li> </ul>"},{"location":"lists/#tag:grind-169","title":"Grind 169","text":"<ul> <li>            1. Two Sum          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            136. Single Number          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            2. Add Two Numbers          </li> <li>            206. Reverse Linked List          </li> <li>            238. Product of Array Except Self          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            50. Pow(x, n)          </li> <li>            62. Unique Paths          </li> <li>            704. Binary Search          </li> <li>            79. Word Search          </li> </ul>"},{"location":"lists/#tag:grind-75","title":"Grind 75","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            206. Reverse Linked List          </li> <li>            238. Product of Array Except Self          </li> <li>            62. Unique Paths          </li> <li>            704. Binary Search          </li> <li>            79. Word Search          </li> </ul>"},{"location":"lists/#tag:interview-master-100","title":"Interview Master 100","text":"<ul> <li>            1. Two Sum          </li> <li>            104. Maximum Depth of Binary Tree          </li> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            125. Valid Palindrome          </li> <li>            136. Single Number          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            19. Remove Nth Node From End of List          </li> <li>            2. Add Two Numbers          </li> <li>            20. Valid Parentheses          </li> <li>            206. Reverse Linked List          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            238. Product of Array Except Self          </li> <li>            242. Valid Anagram          </li> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            42. Trapping Rain Water          </li> <li>            5. Longest Palindromic Substring          </li> <li>            50. Pow(x, n)          </li> <li>            62. Unique Paths          </li> <li>            7. Reverse Integer          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            704. Binary Search          </li> <li>            74. Search a 2D Matrix          </li> <li>            746. Min Cost Climbing Stairs          </li> <li>            79. Word Search          </li> </ul>"},{"location":"lists/#tag:neetcode-150","title":"Neetcode 150","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            136. Single Number          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            206. Reverse Linked List          </li> <li>            238. Product of Array Except Self          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            62. Unique Paths          </li> <li>            704. Binary Search          </li> <li>            79. Word Search          </li> </ul>"},{"location":"lists/#tag:neetcode-250","title":"Neetcode 250","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            125. Valid Palindrome          </li> <li>            135. Candy          </li> <li>            136. Single Number          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            206. Reverse Linked List          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            238. Product of Array Except Self          </li> <li>            355. Design Twitter          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            62. Unique Paths          </li> <li>            7. Reverse Integer          </li> <li>            704. Binary Search          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> <li>            79. Word Search          </li> </ul>"},{"location":"pricing/","title":"Pricing","text":"Choose a Plan Monthly Yearly One-time Pro Plan <p>Gain access to all content!</p> <p>$9 per month</p> $6 per month        Subscribe      <ul> <li>\ud83d\udd13 Unlock over 400 solutions across \ud83d\udcda 28 problem categories</li> <li>\ud83c\udfaf Interview-focused explanations</li> <li>\ud83d\udcac Priority support</li> <li>\ud83d\udcf1 Mobile-friendly access</li> </ul> Pro Plan <p>Gain access to all content!</p> $51 per year        Subscribe      <ul> <li>\ud83d\udd13 Unlock over 400 solutions across \ud83d\udcda 28 problem categories</li> <li>\ud83c\udfaf Interview-focused explanations</li> <li>\ud83d\udcac Priority support</li> <li>\ud83d\udcf1 Mobile-friendly access</li> </ul> Pro Plan <p>Gain access to all content!</p> $251 lifetime        Buy Now      <ul> <li>\ud83d\udd13 Unlock over 400 solutions across \ud83d\udcda 28 problem categories</li> <li>\ud83c\udfaf Interview-focused explanations</li> <li>\ud83d\udcac Priority support</li> <li>\ud83d\udcf1 Mobile-friendly access</li> </ul>"},{"location":"topics/","title":"TOPICS","text":"<p>Below is the classification of problems based on topics, useful while cementing any particular data structure, algorithm or topic.</p> Akhil Singh Chauhan                          Creator"},{"location":"topics/#tag:air-transport","title":"Air Transport","text":"<ul> <li>            3. Composing flight crews          </li> </ul>"},{"location":"topics/#tag:array","title":"Array","text":"<ul> <li>            1. Two Sum          </li> <li>            1095. Find in Mountain Array          </li> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            135. Candy          </li> <li>            136. Single Number          </li> <li>            139. Word Break          </li> <li>            15. 3Sum          </li> <li>            212. Word Search II          </li> <li>            2226. Maximum Candies Allocated to K Children          </li> <li>            2294. Partition Array Such That Maximum Difference Is K          </li> <li>            238. Product of Array Except Self          </li> <li>            240. Search a 2D Matrix II          </li> <li>            4. Median of Two Sorted Arrays          </li> <li>            407. Trapping Rain Water II          </li> <li>            42. Trapping Rain Water          </li> <li>            704. Binary Search          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> <li>            74. Search a 2D Matrix          </li> <li>            746. Min Cost Climbing Stairs          </li> <li>            79. Word Search          </li> </ul>"},{"location":"topics/#tag:backtracking","title":"Backtracking","text":"<ul> <li>            212. Word Search II          </li> <li>            52. N-Queens II          </li> <li>            79. Word Search          </li> </ul>"},{"location":"topics/#tag:binary-search","title":"Binary Search","text":"<ul> <li>            1095. Find in Mountain Array          </li> <li>            2226. Maximum Candies Allocated to K Children          </li> <li>            240. Search a 2D Matrix II          </li> <li>            374. Guess Number Higher or Lower          </li> <li>            4. Median of Two Sorted Arrays          </li> <li>            704. Binary Search          </li> <li>            74. Search a 2D Matrix          </li> </ul>"},{"location":"topics/#tag:binary-search-tree","title":"Binary Search Tree","text":"<ul> <li>            703. Kth Largest Element in a Stream          </li> </ul>"},{"location":"topics/#tag:binary-tree","title":"Binary Tree","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            226. Invert Binary Tree          </li> <li>            703. Kth Largest Element in a Stream          </li> </ul>"},{"location":"topics/#tag:bit-manipulation","title":"Bit Manipulation","text":"<ul> <li>            136. Single Number          </li> <li>            29. Divide Two Integers          </li> </ul>"},{"location":"topics/#tag:breadth-first-search","title":"Breadth-First Search","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            226. Invert Binary Tree          </li> <li>            407. Trapping Rain Water II          </li> </ul>"},{"location":"topics/#tag:combinatorics","title":"Combinatorics","text":"<ul> <li>            62. Unique Paths          </li> </ul>"},{"location":"topics/#tag:data-stream","title":"Data Stream","text":"<ul> <li>            703. Kth Largest Element in a Stream          </li> </ul>"},{"location":"topics/#tag:depth-first-search","title":"Depth-First Search","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            226. Invert Binary Tree          </li> <li>            79. Word Search          </li> </ul>"},{"location":"topics/#tag:design","title":"Design","text":"<ul> <li>            355. Design Twitter          </li> <li>            703. Kth Largest Element in a Stream          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> </ul>"},{"location":"topics/#tag:divide-and-conquer","title":"Divide and Conquer","text":"<ul> <li>            240. Search a 2D Matrix II          </li> <li>            4. Median of Two Sorted Arrays          </li> </ul>"},{"location":"topics/#tag:dynamic-programming","title":"Dynamic Programming","text":"<ul> <li>            121. Best Time to Buy and Sell Stock          </li> <li>            139. Word Break          </li> <li>            42. Trapping Rain Water          </li> <li>            5. Longest Palindromic Substring          </li> <li>            62. Unique Paths          </li> <li>            746. Min Cost Climbing Stairs          </li> </ul>"},{"location":"topics/#tag:greedy","title":"Greedy","text":"<ul> <li>            135. Candy          </li> <li>            2294. Partition Array Such That Maximum Difference Is K          </li> </ul>"},{"location":"topics/#tag:ground-transport","title":"Ground Transport","text":"<ul> <li>            6. Depot Location          </li> </ul>"},{"location":"topics/#tag:hash-function","title":"Hash Function","text":"<ul> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> </ul>"},{"location":"topics/#tag:hash-table","title":"Hash Table","text":"<ul> <li>            1. Two Sum          </li> <li>            139. Word Break          </li> <li>            141. Linked List Cycle          </li> <li>            242. Valid Anagram          </li> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            355. Design Twitter          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> </ul>"},{"location":"topics/#tag:heap-priority-queue","title":"Heap (Priority Queue)","text":"<ul> <li>            355. Design Twitter          </li> <li>            407. Trapping Rain Water II          </li> <li>            703. Kth Largest Element in a Stream          </li> </ul>"},{"location":"topics/#tag:interactive","title":"Interactive","text":"<ul> <li>            1095. Find in Mountain Array          </li> <li>            374. Guess Number Higher or Lower          </li> </ul>"},{"location":"topics/#tag:lp","title":"LP","text":"<ul> <li>            1. Mixed Integer Programming          </li> </ul>"},{"location":"topics/#tag:linked-list","title":"Linked List","text":"<ul> <li>            141. Linked List Cycle          </li> <li>            19. Remove Nth Node From End of List          </li> <li>            2. Add Two Numbers          </li> <li>            206. Reverse Linked List          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            355. Design Twitter          </li> <li>            705. Design HashSet          </li> <li>            706. Design HashMap          </li> </ul>"},{"location":"topics/#tag:mip","title":"MIP","text":"<ul> <li>            1. Mixed Integer Programming          </li> <li>            3. Composing flight crews          </li> <li>            4. N Queen          </li> <li>            6. Depot Location          </li> </ul>"},{"location":"topics/#tag:math","title":"Math","text":"<ul> <li>            2. Add Two Numbers          </li> <li>            29. Divide Two Integers          </li> <li>            50. Pow(x, n)          </li> <li>            62. Unique Paths          </li> <li>            7. Reverse Integer          </li> </ul>"},{"location":"topics/#tag:matrix","title":"Matrix","text":"<ul> <li>            212. Word Search II          </li> <li>            240. Search a 2D Matrix II          </li> <li>            4. N Queen          </li> <li>            407. Trapping Rain Water II          </li> <li>            74. Search a 2D Matrix          </li> <li>            79. Word Search          </li> </ul>"},{"location":"topics/#tag:memoization","title":"Memoization","text":"<ul> <li>            139. Word Break          </li> </ul>"},{"location":"topics/#tag:monotonic-stack","title":"Monotonic Stack","text":"<ul> <li>            42. Trapping Rain Water          </li> </ul>"},{"location":"topics/#tag:optimization","title":"Optimization","text":"<ul> <li>            3. Composing flight crews          </li> <li>            4. N Queen          </li> <li>            6. Depot Location          </li> </ul>"},{"location":"topics/#tag:prefix-sum","title":"Prefix Sum","text":"<ul> <li>            238. Product of Array Except Self          </li> </ul>"},{"location":"topics/#tag:recursion","title":"Recursion","text":"<ul> <li>            2. Add Two Numbers          </li> <li>            206. Reverse Linked List          </li> <li>            21. Merge Two Sorted Lists          </li> <li>            50. Pow(x, n)          </li> </ul>"},{"location":"topics/#tag:sliding-window","title":"Sliding Window","text":"<ul> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            424. Longest Repeating Character Replacement          </li> </ul>"},{"location":"topics/#tag:sorting","title":"Sorting","text":"<ul> <li>            15. 3Sum          </li> <li>            2294. Partition Array Such That Maximum Difference Is K          </li> <li>            242. Valid Anagram          </li> </ul>"},{"location":"topics/#tag:stack","title":"Stack","text":"<ul> <li>            20. Valid Parentheses          </li> <li>            42. Trapping Rain Water          </li> </ul>"},{"location":"topics/#tag:string","title":"String","text":"<ul> <li>            125. Valid Palindrome          </li> <li>            139. Word Break          </li> <li>            20. Valid Parentheses          </li> <li>            212. Word Search II          </li> <li>            242. Valid Anagram          </li> <li>            3. Longest Substring Without Repeating Characters          </li> <li>            424. Longest Repeating Character Replacement          </li> <li>            5. Longest Palindromic Substring          </li> <li>            79. Word Search          </li> </ul>"},{"location":"topics/#tag:tree","title":"Tree","text":"<ul> <li>            104. Maximum Depth of Binary Tree          </li> <li>            226. Invert Binary Tree          </li> <li>            703. Kth Largest Element in a Stream          </li> </ul>"},{"location":"topics/#tag:trie","title":"Trie","text":"<ul> <li>            139. Word Break          </li> <li>            212. Word Search II          </li> </ul>"},{"location":"topics/#tag:two-pointers","title":"Two Pointers","text":"<ul> <li>            125. Valid Palindrome          </li> <li>            141. Linked List Cycle          </li> <li>            15. 3Sum          </li> <li>            19. Remove Nth Node From End of List          </li> <li>            42. Trapping Rain Water          </li> <li>            5. Longest Palindromic Substring          </li> </ul>"},{"location":"glossary/definitions/","title":"Definitions","text":"Akhil Singh Chauhan                          Creator"},{"location":"glossary/definitions/#general-algorithmstechniques","title":"General algorithms/techniques","text":""},{"location":"glossary/definitions/#recursion","title":"Recursion","text":"<ul> <li>A recursive algorithm is one that calls itself to solve smaller instances of the same problem, ultimately reaching a base case that can be solved directly.</li> <li>It breaks down a problem into subproblems until a simple, solvable case is reached, then combines the solutions to build the solution for the original problem.</li> <li>Defining a problem in terms of itself, often leading to elegant and concise solutions.</li> </ul> <pre><code>  %%{init: {\"themeVariables\": {\"fontSize\":\"18px\"}, \"flowchart\": {\"curve\": \"monotoneY\"}} }%%\n  flowchart TD\n    Start((Start)):::start e1@==&gt; CallFunc{\"Is Base Case?\"}:::decision\n    CallFunc e2@==&gt;|Yes| BaseCase([\"Return Result (Base Case)\"]):::endClass\n    CallFunc e3@==&gt;|No| Recurse[\"Call function&lt;br&gt;again with&lt;br&gt;simpler input\"]:::recurse\n    Recurse e4@==&gt;|Recursive Call| CallFunc\n    BaseCase e5@==&gt; Output[\"Result unwinds&lt;br&gt;back through calls\"]:::output\n\n    classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 10s linear infinite;\n\n    class e1,e2,e3,e4,e5 animate;\n\n    classDef start fill:#8ead52,stroke:#16634d,stroke-width:2px;\n    classDef decision fill:#ffb9009c,stroke:#b07a29,stroke-width:2px;\n    classDef recurse fill:#19f6f98f,stroke:#7fa0f77a,stroke-width:2px,font-style:italic;\n    classDef returnNode fill:#bdf7b7,stroke:#24581c,stroke-width:2px;\n    classDef output fill:#b44adc8c,stroke:#8150ae,stroke-width:2px,font-style:italic;\n\n    class Start start;\n    class CallFunc decision;\n    class ReturnNode returnNode;\n    class Recurse recurse;\n    class Output output;</code></pre>"},{"location":"glossary/definitions/#dynamic-programming","title":"Dynamic Programming","text":"<ul> <li>Breaking down a problem into overlapping subproblems and storing solutions to avoid recomputation.</li> </ul> <pre><code>%%{init: { 'securityLevel': 'loose', 'theme': 'default', 'flowchart': {'curve': 'monotoneY'}}}%%\n  flowchart TD\n      A[Original Problem] e1@==&gt; B{Is Subproblem Solved?}\n      B e2@==&gt;|No| C[Break Down into Subproblems]\n      C e3@==&gt; D[Solve Subproblem]\n      D e4@==&gt; E[Store Solution in Memory]\n      E e5@==&gt; F[Use Stored Solution]\n      B e6@==&gt;|Yes| F\n      F e7@==&gt; G[Solve Original Problem Efficiently]\n\n      classDef animate stroke-dasharray: 5,3,stroke-dashoffset: 900,animation: dash 10s linear infinite;\n\n      class e1,e2,e3,e4,e5,e6,e7 animate;\n\n      %% Animation Hints\n      click A \"javascript:void(0)\" \"Start with the main problem\"\n      click B \"javascript:void(0)\" \"Check if subproblem was solved\"\n      click C \"javascript:void(0)\" \"Divide into overlapping subproblems\"\n      click D \"javascript:void(0)\" \"Solve the required subproblem\"\n      click E \"javascript:void(0)\" \"Store the solution to avoid recomputation\"\n      click F \"javascript:void(0)\" \"Reuse stored result\"\n      click G \"javascript:void(0)\" \"Problem solved efficiently!\"</code></pre>"},{"location":"glossary/definitions/#divide-conquer","title":"Divide &amp; Conquer","text":"<ul> <li>A divide-and-conquer algorithm recursively breaks down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.</li> </ul>"},{"location":"glossary/definitions/#greedy-algorithms","title":"Greedy Algorithms","text":"<ul> <li>Making locally optimal choices at each step with the hope of finding a global optimum.</li> </ul>"},{"location":"glossary/definitions/#backtracking","title":"Backtracking","text":"<ul> <li>Incrementally building solutions, exploring all possible paths, and abandoning invalid ones.</li> </ul>"},{"location":"glossary/definitions/#arrays-strings","title":"Arrays &amp; Strings","text":""},{"location":"glossary/definitions/#subsequence","title":"Subsequence","text":"<ul> <li>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</li> </ul>"},{"location":"glossary/definitions/#substring","title":"Substring","text":"<ul> <li>A substring is a contiguous non-empty sequence of characters within a string.</li> </ul> Substring Illustration"},{"location":"glossary/definitions/#consider-a-string-of-n-characters-s_0s_1s_2s_n-1","title":"Consider a string of n characters: \"\\(s_0s_1s_2...s_{n-1}\\)\"","text":"<ul> <li>No. of <code>substring</code> = \\({C^n_2}\\) + \\({C^n_1}\\) = \\(n(n+1)/2\\)</li> <li>\\({C^n_2}\\) - because substring contains more than one character</li> <li>\\({C^n_1}\\) - because one character in itself is a substring</li> </ul>"},{"location":"glossary/definitions/#palindrome","title":"Palindrome","text":"<ul> <li>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</li> </ul>"},{"location":"glossary/definitions/#monotonic","title":"Monotonic","text":"<ul> <li>Elements are entirely non-decreasing or non-increasing</li> </ul>"},{"location":"glossary/definitions/#circular-array","title":"Circular Array","text":"<ul> <li>Array where the end connects to the beginning</li> </ul>"},{"location":"glossary/definitions/#partition","title":"Partition","text":"<ul> <li>Dividing array into parts based on specific criteria</li> </ul>"},{"location":"glossary/definitions/#kadanes-algorithm","title":"Kadane's Algorithm","text":"<ul> <li>Technique to find maximum subarray sum subarray</li> </ul>"},{"location":"glossary/definitions/#two-pointers","title":"Two Pointers","text":"<ul> <li>Using two index pointers to solve array problems</li> </ul>"},{"location":"glossary/definitions/#sliding-window","title":"Sliding Window","text":"<ul> <li>Technique of maintaining a window that slides through an array</li> </ul>"},{"location":"glossary/definitions/#prefix-sum","title":"Prefix Sum","text":"<ul> <li>Array where each element is sum of all previous elements</li> </ul>"},{"location":"glossary/definitions/#suffix-sum","title":"Suffix Sum","text":"<ul> <li>Array where each element is sum of all elements after it</li> </ul>"},{"location":"glossary/definitions/#rotation","title":"Rotation","text":"<ul> <li>Shifting array elements by a certain offset</li> </ul>"},{"location":"glossary/definitions/#in-place","title":"In-place","text":"<ul> <li>Algorithm that transforms input without creating another data structure</li> </ul>"},{"location":"glossary/definitions/#anagram","title":"Anagram","text":"<ul> <li>An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.</li> </ul>"},{"location":"glossary/definitions/#lexicographic-order","title":"Lexicographic Order","text":"<ul> <li>Dictionary Ordering of Strings</li> </ul> Array Illustration <ul> <li> <p>Consider an array: {1,2,3,4}</p> </li> <li> <p>Subarray: contiguous non-empty sequence of an elements within an array i.e. {1,2},{1,2,3}</p> </li> <li> <p>Subsequence: Need not to be contiguous, but maintains order i.e. {1,2,4}</p> </li> <li> <p>Subset: Same as subsequence except it has empty set i.e. # {1,3},{}</p> </li> </ul>"},{"location":"glossary/definitions/#given-an-arraysequence-of-size-n-possible","title":"Given an array/sequence of size n, possible","text":"<ul> <li>Subarray = n*(n+1)/2</li> <li>Subseqeunce = (2<sup>n</sup>) - 1 (non-empty subsequences)</li> <li>Subset = 2<sup>n</sup></li> </ul>"},{"location":"glossary/definitions/#array-operations-time-complexity","title":"Array Operations Time Complexity","text":"Operations Time Complexity Add or Remove Element at the end of Array \\(O(1)\\) Amortized Add or Remove Element NOT at the end of Arra \\(O(n)\\) Access Element at any Index \\(O(1)\\) Searching Array for an Element \\(O(n)\\) Searching Sorted Array for an Element \\(O(\\log n)\\) Binary Search Copying Array \\(O(n)\\) Sliding Window \\(O(n)\\) All Pairs of Array Elements \\(O(n^2)\\)"},{"location":"glossary/definitions/#heap-priority-queue","title":"Heap &amp; Priority Queue","text":""},{"location":"glossary/definitions/#min-heap-max-heap","title":"Min Heap / Max Heap","text":"<ul> <li>Tree-based data structure where parent is smaller/larger than children</li> </ul>"},{"location":"glossary/definitions/#heap-sort","title":"Heap Sort","text":"<ul> <li>Sorting algorithm using a heap</li> </ul>"},{"location":"glossary/definitions/#priority-queue","title":"Priority Queue","text":"<ul> <li>Abstract data type providing efficient access to the minimum/maximum element</li> </ul>"},{"location":"glossary/definitions/#heapify","title":"Heapify","text":"<ul> <li>Process of creating a heap from an array</li> </ul>"},{"location":"glossary/definitions/#k-way-merge","title":"K-Way Merge","text":"<ul> <li>Merging k sorted arrays/lists (often using heaps)</li> </ul>"},{"location":"glossary/definitions/#build-heap","title":"Build Heap","text":"<ul> <li>The process of running heapify() on the entire heap to create a valid heap</li> </ul>"},{"location":"glossary/definitions/#two-heaps","title":"Two Heaps","text":"<ul> <li>A technique used to find the median of a data stream using a max and a min heap</li> </ul>"},{"location":"glossary/definitions/#heap-operations-time-complexity","title":"Heap Operations Time Complexity","text":"Operation TC top() \\(O(1)\\) insert() \\(O(\\log n)\\) remove() \\(O(\\log n)\\) heapify() \\(O(n)\\)"},{"location":"glossary/definitions/#backtracking_1","title":"Backtracking","text":""},{"location":"glossary/definitions/#subsets","title":"Subsets","text":"<ul> <li>Set A is a subset to Set B if all of its elements are found in Set B</li> </ul>"},{"location":"glossary/definitions/#combinations","title":"Combinations","text":"<ul> <li>Number of ways of selection and arrangement of items where order does not matter</li> </ul>"},{"location":"glossary/definitions/#permutations","title":"Permutations","text":"<ul> <li>Number of ways of selection and arrangement of items where order matters</li> </ul>"},{"location":"glossary/definitions/#pruning","title":"Pruning","text":"<ul> <li>Used to eliminate branches early on that can never lead to valid solutions</li> </ul>"},{"location":"glossary/definitions/#constraint","title":"Constraint","text":"<ul> <li>A condition that must be satisfied to reach a valid solution</li> </ul>"},{"location":"glossary/definitions/#base-case","title":"Base Case","text":"<ul> <li>Determines when a valid solution has been found</li> </ul>"},{"location":"glossary/definitions/#candidate-solution","title":"Candidate Solution","text":"<ul> <li>Start from the final problem and recursively break it into smaller subproblems</li> </ul>"},{"location":"glossary/definitions/#unique-combination","title":"Unique Combination","text":"<ul> <li>Two combinations are unique if the frequency of chosen numbers is not the same</li> </ul>"},{"location":"glossary/definitions/#dynamic-programming_1","title":"Dynamic Programming","text":""},{"location":"glossary/definitions/#memoization","title":"Memoization","text":"<ul> <li>Cache technique to avoid redundant calculations</li> </ul>"},{"location":"glossary/definitions/#tabulation","title":"Tabulation","text":"<ul> <li>Bottom-up approach using arrays to store subproblem results</li> </ul>"},{"location":"glossary/definitions/#state","title":"State","text":"<ul> <li>Snapshot of progress you've made in solving the larger problem</li> </ul>"},{"location":"glossary/definitions/#overlapping-subproblems","title":"Overlapping Subproblems","text":"<ul> <li>When the same subproblems are solved multiple times</li> </ul>"},{"location":"glossary/definitions/#1-dimensional","title":"1-Dimensional","text":"<ul> <li>The result for the current state only depends on one previous state or a linear history, e.g. Fib</li> </ul>"},{"location":"glossary/definitions/#2-dimensional","title":"2-Dimensional","text":"<ul> <li>The problem depends on two varying factors, often two strings, two sequences, or two indices</li> </ul>"},{"location":"glossary/definitions/#top-down","title":"Top Down","text":"<ul> <li>Start from the final problem and recursively break it into smaller subproblems</li> </ul>"},{"location":"glossary/definitions/#bottom-up","title":"Bottom Up","text":"<ul> <li>Build the solution from the base case all the way up to the final solution</li> </ul>"},{"location":"glossary/definitions/#longest-common-subsequence-lcs","title":"Longest Common Subsequence (LCS)","text":"<ul> <li>Finding the longest subsequence common to two sequences</li> </ul>"},{"location":"glossary/definitions/#longest-increasing-subsequence-lis","title":"Longest Increasing Subsequence (LIS)","text":"<ul> <li>Finding the longest subsequence where elements are in ascending order</li> </ul>"},{"location":"glossary/definitions/#0-1-knapsack","title":"0 / 1 Knapsack","text":"<ul> <li>Pick items such that profits associated with them are maximized.</li> <li>Each item can be picked at most once</li> </ul>"},{"location":"glossary/definitions/#unbounded-knapsack","title":"Unbounded Knapsack","text":"<ul> <li>Pick items such that profits associated with them are maximized.</li> <li>Each item can be picked unlimited times</li> </ul>"},{"location":"glossary/definitions/#tree","title":"Tree","text":""},{"location":"glossary/definitions/#binary-tree","title":"Binary Tree","text":"<ul> <li>Tree where each node has atmost two children</li> </ul>"},{"location":"glossary/definitions/#binary-search-tree-bst","title":"Binary Search Tree (BST)","text":"<ul> <li>Binary tree where left child value &lt; parent value &lt; right child value</li> </ul>"},{"location":"glossary/definitions/#complete-binary-tree","title":"Complete Binary Tree","text":"<ul> <li>Every level filled except possibly last, which is filled left to right</li> </ul>"},{"location":"glossary/definitions/#perfect-binary-tree","title":"Perfect Binary Tree","text":"<ul> <li>All internal nodes have exactly two children and all leaf nodes are at same level</li> </ul>"},{"location":"glossary/definitions/#balanced-tree","title":"Balanced Tree","text":"<ul> <li>Height difference between left and right subtrees is limited and (often \\(\\leq\\) 1)</li> </ul>"},{"location":"glossary/definitions/#self-balancing-tree","title":"Self Balancing Tree","text":"<ul> <li>Automatically maintains balance after insertions/deletions (e.g., AVL, Red-Black)</li> </ul>"},{"location":"glossary/definitions/#traversal","title":"Traversal","text":"<ul> <li>Methods to visit all nodes (preorder, inorder, postorder, level-order)</li> </ul>"},{"location":"glossary/definitions/#lowest-common-ancestor-lca","title":"Lowest Common Ancestor (LCA)","text":"<ul> <li>Deepest node that is an ancestor of two given nodes</li> </ul>"},{"location":"glossary/definitions/#serialization-deserialization","title":"Serialization/ Deserialization","text":"<ul> <li> <p>Converting a tree to/from a string representation</p> </li> <li> <p>Serialization: Converting a tree to a string.</p> </li> <li> <p>Deserialization: Converting a string back into a tree</p> </li> <li> <p>Example: \"1, 2, 4, null, null, 5, null, null, 3, null, null\", where null indicates a null node.</p> </li> </ul>"},{"location":"glossary/definitions/#diameter","title":"Diameter","text":"<ul> <li>Longest path between any two nodes in a tree, not necessarily through the root.</li> </ul>"},{"location":"glossary/definitions/#depth","title":"Depth","text":"<ul> <li>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</li> </ul>"},{"location":"glossary/definitions/#level-order","title":"Level Order","text":"<ul> <li>Processing tree nodes level by level</li> </ul>"},{"location":"glossary/definitions/#segment-tree","title":"Segment Tree","text":"<ul> <li>Data structure for range queries</li> </ul>"},{"location":"glossary/definitions/#bfs-breadth-first-search-aka-level-order-traversal","title":"BFS (Breadth First Search) aka Level Order Traversal","text":"<ul> <li>Traversing the tree nodes level by level, often using a queue.</li> </ul>"},{"location":"glossary/definitions/#dfs-depth-first-search","title":"DFS (Depth First Search)","text":"<ul> <li> <p>Traversing the tree in a depth-first manner</p> </li> <li> <p>Visits nodes by exploring depth-first. Comes in three orders:</p> </li> <li> <p>Preorder: node \u2192 left \u2192 right (NLR)</p> </li> <li>Inorder: left \u2192 node \u2192 right (LNR)</li> <li>Postorder: left \u2192 right \u2192 node (LRN)</li> </ul>"},{"location":"glossary/definitions/#graphs","title":"Graphs","text":""},{"location":"glossary/definitions/#directed-undirected","title":"Directed / Undirected","text":"<ul> <li>Edges with/without direction</li> </ul>"},{"location":"glossary/definitions/#weighted-unweighted","title":"Weighted / Unweighted","text":"<ul> <li>Edges with/without values - known as weights</li> </ul>"},{"location":"glossary/definitions/#connected-component","title":"Connected Component","text":"<ul> <li>Subset of vertices where any two vertices are connected by a path</li> </ul>"},{"location":"glossary/definitions/#strongly-connected-component-scc","title":"Strongly Connected Component (SCC)","text":"<ul> <li>In a directed graph, subset where every vertex is reachable from every other</li> </ul>"},{"location":"glossary/definitions/#bipartite-graph","title":"Bipartite Graph","text":"<ul> <li>Can be divided into two sets with no edges within each set</li> </ul>"},{"location":"glossary/definitions/#dag-directed-acyclic-graph","title":"DAG (Directed Acyclic Graph)","text":"<ul> <li>Directed graph with no cycles</li> </ul>"},{"location":"glossary/definitions/#topological-sort","title":"Topological Sort","text":"<ul> <li>Linear ordering of vertices where for every edge (u,v), u comes before v. Works with DAGs</li> </ul>"},{"location":"glossary/definitions/#adjacency-list","title":"Adjacency List","text":"<ul> <li>Graph representation derived from an array of edges</li> </ul>"},{"location":"glossary/definitions/#bfsdfs","title":"BFS/DFS","text":"<ul> <li>Breadth-First Search and Depth-First Search traversal strategies</li> </ul>"},{"location":"glossary/definitions/#mst-minimum-spanning-tree","title":"MST (Minimum Spanning Tree)","text":"<ul> <li>Tree connecting all vertices with minimum total edge weight</li> </ul>"},{"location":"glossary/definitions/#bellman-ford-dijkstra-floyd-warshall","title":"Bellman-Ford / Dijkstra / Floyd-Warshall","text":"<ul> <li>Shortest path algorithms</li> </ul>"},{"location":"glossary/definitions/#union-find","title":"Union-Find","text":"<ul> <li>Data structure for disjoint sets operations</li> </ul>"},{"location":"glossary/definitions/#cycle-detection","title":"Cycle Detection","text":"<ul> <li>Algorithms to find cycles in graphs</li> </ul>"},{"location":"glossary/definitions/#a-algorithm","title":"A* Algorithm","text":"<ul> <li>Best-first search algorithm for path finding</li> </ul>"},{"location":"glossary/definitions/#miscellaneous","title":"Miscellaneous","text":""},{"location":"glossary/definitions/#amortized-analysis","title":"Amortized Analysis","text":"<ul> <li>Analyzing average performance over a sequence of operations</li> </ul>"},{"location":"glossary/definitions/#randomized-algorithm","title":"Randomized Algorithm","text":"<ul> <li>Algorithm that uses random numbers to decide next step</li> </ul>"},{"location":"glossary/definitions/#skip-list","title":"Skip List","text":"<ul> <li>Probabilistic data structure for efficient search</li> </ul>"},{"location":"glossary/definitions/#execution-time","title":"Execution Time","text":"<ul> <li>The raw time taken in seconds to execute an algorithm</li> </ul>"},{"location":"glossary/definitions/#stable-sorting-algorithm","title":"Stable Sorting Algorithm","text":"<ul> <li>A sorting algorithm that maintains the relative order of elements after sorting</li> </ul>"},{"location":"glossary/definitions/#unstable-sorting-algorithm","title":"Unstable Sorting Algorithm","text":"<ul> <li>A sorting algorithm that does not maintain the relative order of elements after sorting</li> </ul>"},{"location":"glossary/strategies/","title":"Strategies","text":"Akhil Singh Chauhan                          Creator"},{"location":"glossary/strategies/#golden-rules-for-solving-a-coding-problem-in-an-interview","title":"Golden rules for solving a Coding problem in an Interview","text":"<ol> <li> <p>If the coding problem requires performing an operation that needs faster search in O(1), try to use Set or a Map.</p> </li> <li> <p>If the coding problem requires finding/manipulating/dealing with the top, bottom, maximum, minimum, closest, and farthest \"K\" elements among given \"N\" elements, try to use a Heap.</p> </li> <li> <p>If the coding problem has input as a sorted Array, List, or Matrix, try to use Two Pointer strategy or try to use Binary Search.</p> </li> <li> <p>If the problem requires finding all Permutations or Combinations , we can use backtracking(DFS) or BFS.</p> </li> <li> <p>If the coding problem has input in the form of a Tree or Graph, then most of the time problem can be solved by applying Tree Traversals or Graph Traversals algorithms called Breadth First Search (BFS) and Depth First Search (DFS).</p> </li> <li> <p>If the coding problem is around a Singly Linked List, and If you are stuck in traversals logic, then try to use either Two Pointers or Slow/Fast Pointers.</p> </li> <li> <p>If the coding problem has a recursive solution but it's hard to visualize/code, try using a Stack data structure with a loop.</p> </li> <li> <p>If the coding problem revolves around iterating an array, and takes O(N\u00b2) time complexity, O(1) space complexity then try to use a HashMap/HashSet. It makes the algorithm faster with O(N) time complexity but takes more space with O(N) space complexity.</p> </li> <li> <p>If the coding problem revolves around iterating an array and takes O(N\u00b2) time complexity, and O(1) space complexity then try to sort the array. It makes the algorithm faster with O(N log N) time complexity and O(1) space complexity.</p> </li> <li> <p>If the coding problem requires optimization(e.g., maximization or minimization) around the recursive the solution, there could be a possibility that dynamic programming can be used.</p> </li> <li> <p>If the coding problem has a group of strings or some manipulation/find/storing needs to be done around the substring, there is a high possibility that either Tries or HashMap can be used.</p> </li> </ol> <p>Golden Rules</p> <p></p>"},{"location":"glossary/strategies/#observations","title":"Observations","text":"<ol> <li> <p>Collectively 8 and 9 suggests</p> <p>For a problem involving arrays, if there exists a solution in O(n<sup>2</sup>) time and O(1) space, there must exist two other solutions :</p> <ol> <li> <p>Using a HashMap or a Set for O(n) time and O(n) space,</p> </li> <li> <p>Using sorting for O(n log n) time and O(1) space.</p> </li> </ol> </li> <li> <p>Every recursive solution can be converted to an iterative solution using a Stack.</p> </li> <li> <p>If we need to try all combinations (or permutations) of the input, we can either use recursive Backtracking or iterative Breadth-First Search</p> </li> </ol>"},{"location":"glossary/strategies/#data-structures-use-case","title":"Data Structures Use Case","text":"<ul> <li> <p>The best data structure that comes to mind to find the smallest number among a set of \u2018K\u2019 numbers is a Heap.</p> </li> <li> <p>If we need to find some common substring among a set of strings, we will be using a HashMap or a Trie.</p> </li> <li> <p>If we need to search/manipulate a bunch of strings, Trie will be the best data structure.</p> </li> </ul>"},{"location":"glossary/strategies/#problem-solving-techniques","title":"Problem Solving Techniques","text":"<p>1.Two Pointer Technique:</p> <p>This technique is commonly applied on sorted arrays or linked lists to find pairs or reverse elements. It is an ideal strategy when managing elements with pair relationships.</p> <p>2.Prefix Sums</p> <p>A prefix sum is a technique used to calculate the running sum of the array up until a given index</p> <p>3.Sliding Window:</p> <p>This pattern is used to track a subset of data within a larger dataset. It's particularly useful in array or string problems when you need to maintain a 'window' of elements satisfying a certain condition.</p> <p>4.Fast &amp; Slow Pointer OR Floyd\u2019s Cycle Detection OR Tortoise and Hare algorithm:</p> <p>It uses two pointers - slow and fast. The fast pointer moves twice as fast as the slow pointer.</p> <p>Used in linked list or array problems, this pattern is ideal for detecting cycles or finding a midpoint.</p> <p>5.Merge Intervals:</p> <p>Use this pattern to deal with overlapping intervals, helping to create a more organized and efficient structure.</p> <p>6.Cyclic Sort:</p> <p>Employed when you need to sort numbers within a defined range, it provides a neat way to ensure ordered data.</p> <p>7.Linked List Reversal:</p> <p>If you need to reverse a linked list in-place, this is the pattern to use.</p> <p>Refers to completely reversing the pointers of the linked list.</p> <p>8.Breadth First Search:</p> <p>Perfect for traversing a tree level-by-level, providing a comprehensive overview of all nodes.</p> <p>9.Depth First Search:</p> <p>This pattern allows you to traverse a tree or graph using depth as the main factor.</p> <p>10.Two Heaps:</p> <p>Ideal when dealing with situations that require access to both the smallest and largest elements simultaneously.</p> <p>The root of the max heap will always be &lt;= than the root of the min heap.</p> <p>11.Backtracking:</p> <p>Useful in solving problems related to subsets, permutations and combinations.</p> <p>12.Modified Binary Search:</p> <p>An adaptation of the binary search for situations where a standard binary search doesn't apply.</p> <p>13.Top 'K' Elements:</p> <p>This pattern is beneficial for problems that require identifying the top or bottom 'k' elements in a set.</p> <p>14.K-way Merge:</p> <p>Employ this pattern to merge K sorted lists or arrays efficiently.</p> <p>15.0/1 Knapsack (Dynamic Programming):</p> <p>This dynamic programming pattern is often used for optimization problems.</p> <p>16.Topological Sort (Graph):</p> <p>Useful in finding a linear ordering of vertices in a directed acyclic graph (DAG).</p> <p>17.Kadane\u2019s Algorithm (Dynamic Programming):</p> <p>It's an optimal solution for the maximum subarray problem.</p> <p>18.Longest Common Subsequence/ Substring (Dynamic Programming):</p> <p>This pattern is handy when finding the longest common subsequence or substring in two strings or arrays.</p> <p>19.Union Find (Disjoint Set):</p> <p>A data structure used to maintain disjointed sets and is useful for network connectivity problems.</p> <p>20.Trie (Prefix Tree):</p> <p>Ideal for efficient retrieval of keys in a dataset of strings. It's commonly used for features like autocomplete or spell check.</p> <p>21. Monotonic Stack:</p> <p>Monotonic stack is a stack that maintains its elements in increasing or decreasing order. </p> <p>22. Memoization</p> <p>Refers to a dynamic programming technique where you start from the final problem and recursively break it into smaller subproblems (often performed with recursion).</p> <p>23. Tabulation</p> <p>It builds the solution from the base case all the way up to the final solution.</p> <p>24. Multi-Source BFS</p> <p>A variation of the classic Breadth-First Search, but instead of starting from one node, it starts from multiple sources simultaneously.</p>"},{"location":"glossary/style-guide/","title":"Style Guide","text":"Akhil Singh Chauhan                          Creator"},{"location":"glossary/style-guide/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Class: UpperCamelCase</li> <li>Function: lowerCamelCase</li> <li>Variable: lower_snake_case</li> <li>Constant: UPPER_SNAKE_CASE</li> </ul>"},{"location":"glossary/style-guide/#example","title":"Example","text":"Python <pre><code># Class\nclass YourClass:\n  pass\n\n# Function\ndef yourFunction(param: int) -&gt; None:\n  pass\n\n# Variable\nyour_variable = 0\n\n# Constant\nK_MOD = 1_000_000_009\n</code></pre>"},{"location":"optimizations/1/","title":"1. Mixed Integer Programming","text":"","tags":["MIP","LP"]},{"location":"optimizations/1/#1-mixed-integer-programming","title":"1. Mixed Integer Programming","text":"<p>Easy</p>","tags":["MIP","LP"]},{"location":"optimizations/1/#description","title":"Description","text":"<p>Formulate and solve the following simple MIP model:</p> <pre><code>Maximize\n    x + y + 2z\n\nsubject to constraints\n    x + 2y + 3z &lt;= 4\n    x +  y      &gt;= 1\n    x, y, z binary\n</code></pre>","tags":["MIP","LP"]},{"location":"optimizations/1/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","LP"]},{"location":"optimizations/1/#results","title":"Results","text":"View Result <pre><code>Objective value: 3.0\nx: 1.0\ny: 0.0\nz: 1.0\n</code></pre>","tags":["MIP","LP"]},{"location":"optimizations/1/#solutions","title":"Solutions","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","LP"]},{"location":"optimizations/2/","title":"2. Mermaid Examples","text":"<pre><code>flowchart LR\n\n    classDef smallNod2 fill:#f9f,stroke:#333,stroke-width:2px,width:500px,height:500px,font-size:260pt;\n\n    A((A)):::smallNode2\n    B((B)):::smallNode2\n    C((C)):::smallNode2\n\n    A---|This is the text|B\n    A--&gt;|text1|B\n    A-- text2 --&gt;B\n    A ----|text3| B\n    A -- text4 --&gt; B -- text1 --&gt; C\n    A-- This is the text6! ---B\n    B &lt;--text2--&gt; C\n    B e1@==&gt; C\n    e1@{ animate: true, animation: slow }</code></pre> <pre><code>%%{init: { 'flowchart': { 'curve': 'linear','htmlLabels': true } } }%%\ngraph LR\n    classDef smallNode fill:#f9f,stroke:#333,stroke-width:2px;\n\n    style 1 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 2 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 3 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 4 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 5 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 6 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 7 fill:#f9f,stroke:#333,stroke-width:2px, width:500px, height:500px\n    style 8 fill:#ccf,stroke:#333,stroke-width:2px, width:500px, height:500px\n\n    1((\"  1  \"))\n    2((\"  2  \"))\n    3((3))\n    4((4))\n    5((5))\n    6((6))\n    7((7))\n    8((8))\n\n    1----|30| 2\n    1---|24| 4\n    1----|25| 5\n\n    2----|27| 3\n    2---|28| 4\n    2----|27| 6\n\n    3----|30| 7\n    3-----|26| 6\n\n    4---|29| 5\n    4---|21| 6\n\n    5---|30| 6\n    5-----|30| 8\n\n    6---|28| 7\n    6---|36| 8\n\n    7-----|25| 8</code></pre> <pre><code>flowchart LR\n  A e4@==&gt; B\n  classDef animate stroke-dasharray: 9,5,stroke-dashoffset: 900,animation: dash 25s linear infinite;\n  class e4 animate</code></pre>"},{"location":"optimizations/2/#depot-locations","title":"Depot Locations","text":"<pre><code>flowchart LR\n    D1[\"Depot 1\"]\n    D2[\"Depot 2\"]\n    D3[\"Depot 3\"]\n    D4[\"Depot 4\"]\n    D5[\"Depot 5\"]\n    D6[\"Depot 6\"]\n    D7[\"Depot 7\"]\n    D8[\"Depot 8\"]\n    D9[\"Depot 9\"]\n    D10[\"Depot 10\"]\n    D11[\"Depot 11\"]\n    D12[\"Depot 12\"]\n    C1[\"Customer 1\"]\n    C2[\"Customer 2\"]\n    C3[\"Customer 3\"]\n    C4[\"Customer 4\"]\n    C5[\"Customer 5\"]\n    C6[\"Customer 6\"]\n    C7[\"Customer 7\"]\n    C8[\"Customer 8\"]\n    C9[\"Customer 9\"]\n    C10[\"Customer 10\"]\n    C11[\"Customer 11\"]\n    C12[\"Customer 12\"]\n    D1 ---&gt;|5.0 tons| C2\n    D1 ---&gt;|75.0 tons| C3\n    D1 ---&gt;|100.0 tons| C4\n    D1 ---&gt;|120.0 tons| C12\n    D5 ---&gt;|120.0 tons| C1\n    D5 ---&gt;|40.0 tons| C2\n    D8 ---&gt;|35.0 tons| C2\n    D8 ---&gt;|100.0 tons| C6\n    D8 ---&gt;|85.0 tons| C10\n    D9 ---&gt;|110.0 tons| C5\n    D9 ---&gt;|65.0 tons| C10\n    D9 ---&gt;|95.0 tons| C11\n    D12 ---&gt;|90.0 tons| C7\n    D12 ---&gt;|60.0 tons| C8\n    D12 ---&gt;|30.0 tons| C9</code></pre>"},{"location":"optimizations/2/#dp","title":"DP","text":"<pre><code>  %%{init: {'theme': 'default', 'flowchart': {'curve': 'monotoneY'}}}%%\n  flowchart TD\n      subgraph Step1[\"Step 1: Start with Original Problem\"]\n          A[Original Problem]\n      end\n\n      subgraph Step2[\"Step 2: Check if Subproblem is Solved\"]\n          B{Is Subproblem Solved?}\n      end\n\n      subgraph Step3[\"Step 3: If No - Break into Subproblems\"]\n          C[Break Down into Subproblems]\n          D[Solve Subproblem]\n          E[Store Solution in Memory]\n      end\n\n      subgraph Step4[\"Step 4: If Yes or After Storing - Use Stored Solution\"]\n          F[Use Stored Solution]\n      end\n\n      subgraph Step5[\"Step 5: Solve Original Problem Efficiently\"]\n          G[Solve Original Problem Efficiently]\n      end\n\n      A --&gt; B\n      B -- \"No\" --&gt; C\n      C --&gt; D\n      D --&gt; E\n      E --&gt; F\n      B -- \"Yes\" --&gt; F\n      F --&gt; G\n\n      %% Animation Hints via click\n      click A \"javascript:void(0)\" \"Start with the main problem\"\n      click B \"javascript:void(0)\" \"Check if subproblem was solved\"\n      click C \"javascript:void(0)\" \"Divide into overlapping subproblems\"\n      click D \"javascript:void(0)\" \"Solve the required subproblem\"\n      click E \"javascript:void(0)\" \"Store the solution to avoid recomputation\"\n      click F \"javascript:void(0)\" \"Reuse stored result\"\n      click G \"javascript:void(0)\" \"Problem solved efficiently!\"</code></pre>"},{"location":"optimizations/2/#recursion","title":"Recursion","text":"<pre><code>%%{init: {\"themeVariables\": {\"fontSize\":\"18px\"}, \"flowchart\": {\"curve\": \"monotoneY\", \"nodeSpacing\": 60, \"rankSpacing\": 50, \"htmlLabels\": true, \"useMaxWidth\": true, \"animate\": true}} }%%\nflowchart LR\n    Start((Start)):::start --&gt; CallFunc{\"Is Base Case?\"}:::decision\n    CallFunc -- Yes --&gt; BaseCase([\"Return Result (Base Case)\"]):::endClass\n    CallFunc -- No --&gt; Recurse[\"Call function&lt;br&gt;again with&lt;br&gt;simpler input\"]:::recurse\n    Recurse -- Recursive Call --&gt; CallFunc\n    BaseCase --&gt; Output[\"Result unwinds&lt;br&gt;back through calls\"]:::output\n\n    classDef start fill:#9eebcf,stroke:#054c38,stroke-width:2px;\n    classDef decision fill:#ffd366,stroke:#e09f3e,stroke-width:2px;\n    classDef recurse fill:#a0c4ff,stroke:#19388a,stroke-width:2px,font-style:italic;\n    classDef endClass fill:#bdf7b7,stroke:#24581c,stroke-width:2px;\n    classDef output fill:#e9b3fd,stroke:#612796,stroke-width:2px,font-style:italic;</code></pre>"},{"location":"optimizations/2/#research-learning-resources","title":"Research, Learning Resources","text":"<ul> <li>Reference 1</li> <li>Reference 2</li> </ul>"},{"location":"optimizations/3/","title":"3. Composing flight crews","text":"","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#3-composing-flight-crews","title":"3. Composing flight crews","text":"<p>Ardous</p>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#description","title":"Description","text":"<p>During the Second World War the Royal Air Force (<code>RAF</code>) had many foreign pilots speaking different languages and more or less trained on the different types of aircraft. The <code>RAF</code> had to form pilot/co-pilot pairs (<code>crews</code>) for every plane with a compatible language and a sufficiently good knowledge of the aircraft type. In our example there are eight pilots. In the following table every pilot is characterized by a mark between <code>0 (worst)</code> and <code>20 (best)</code> for his language skills (in <code>English</code>, <code>French</code>, <code>Dutch</code>, and <code>Norwegian</code>), and for his experience with different two-seater aircraft (<code>reconnaissance</code>, <code>transport</code>, <code>bomber</code>, <code>fighterbomber</code>, and <code>supply planes</code>).</p> Pilot 1 2 3 4 5 6 7 8 Language English 20 14 0 13 0 0 8 8 French 12 0 0 10 15 20 8 9 Dutch 0 20 12 0 8 11 14 12 Norwegian 0 0 0 0 17 0 0 16 Plane type Reconnaissance 1 8 12 5 0 0 8 0 Transport 10 0 9 14 15 8 12 13 Bomber 0 17 0 11 13 10 0 0 Fighter Bomber 0 0 14 0 0 12 16 0 Supply plane 0 0 0 0 12 18 0 18 <p>Table 3.1 Ratings of pilots</p> <p>A valid flight crew consists of two pilots that both have each at least <code>10/20</code> for the same language and <code>10/20</code> on the same aircraft type.</p> <p>Question 1: Is it possible to have all pilots fly?</p> <p>Subsequently, we calculate for every valid flight crew the sum of their scores for every aircraft type for which both pilots are rated at least 10/20. This allows us to define for every crew the maximum score among these marks. For example, pilots 5 and 6 have marks 13 and 10 on bombers and 12 and 18 on supply planes. The score for this crew is therefore max(13 + 10, 12 + 18) = 30.</p> <p>Question 2: Which is the set of crews with maximum total score?</p>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#results","title":"Results","text":"View Result <pre><code>Objective Value: 4\nArc (1,2): 30\nArc (3,7): 30\nArc (4,5): 29\nArc (6,8): 36\nCrew Score 125.0\n</code></pre>","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/3/#answer","title":"Answer \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","Air Transport","Optimization"]},{"location":"optimizations/4/","title":"4. N Queen","text":"","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#4-n-queen","title":"4. N Queen","text":"<p>Ardous</p>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#description","title":"Description","text":"<p>The N-Queens problem is a classic constraint satisfaction problem in computer science and mathematics. Given an <code>N x N</code> chessboard, the challenge is to place <code>N</code> queens such that no two queens attack each other. Queens can attack horizontally, vertically, and diagonally.</p> <p></p> <p>Constraints:</p> <ul> <li><code>1 &lt;= N &lt;= 20</code></li> <li>Each queen must be placed such that no two queens can attack each other</li> </ul>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#results","title":"Results","text":"View Result <pre><code>For N = 8: 92 solutions found\nFor N = 12: 14200 solutions found\nFor N = 16: 14772512 solutions found\n\nExample solution for N = 8:\nQueen positions: [(1,1), (2,5), (3,8), (4,6), (5,3), (6,7), (7,2), (8,4)]\n</code></pre> <p>Board visualization: <pre><code>block-beta\n    columns 8\n    Q1[\"\u265b\"]:1\n    E2[\" \"]:1\n    E3[\" \"]:1\n    E4[\" \"]:1\n    E5[\" \"]:1\n    E6[\" \"]:1\n    E7[\" \"]:1\n    E8[\" \"]:1\n\n    F1[\" \"]:1\n    F2[\" \"]:1\n    F3[\" \"]:1\n    F4[\" \"]:1\n    Q2[\"\u265b\"]:1\n    F6[\" \"]:1\n    F7[\" \"]:1\n    F8[\" \"]:1\n\n    G1[\" \"]:1\n    G2[\" \"]:1\n    G3[\" \"]:1\n    G4[\" \"]:1\n    G5[\" \"]:1\n    G6[\" \"]:1\n    G7[\" \"]:1\n    Q3[\"\u265b\"]:1\n\n    H1[\" \"]:1\n    H2[\" \"]:1\n    H3[\" \"]:1\n    H4[\" \"]:1\n    H5[\" \"]:1\n    Q4[\"\u265b\"]:1\n    H7[\" \"]:1\n    H8[\" \"]:1\n\n    I1[\" \"]:1\n    I2[\" \"]:1\n    Q5[\"\u265b\"]:1\n    I4[\" \"]:1\n    I5[\" \"]:1\n    I6[\" \"]:1\n    I7[\" \"]:1\n    I8[\" \"]:1\n\n    J1[\" \"]:1\n    J2[\" \"]:1\n    J3[\" \"]:1\n    J4[\" \"]:1\n    J5[\" \"]:1\n    J6[\" \"]:1\n    Q6[\"\u265b\"]:1\n    J8[\" \"]:1\n\n    K1[\" \"]:1\n    Q7[\"\u265b\"]:1\n    K3[\" \"]:1\n    K4[\" \"]:1\n    K5[\" \"]:1\n    K6[\" \"]:1\n    K7[\" \"]:1\n    K8[\" \"]:1\n\n    L1[\" \"]:1\n    L2[\" \"]:1\n    L3[\" \"]:1\n    Q8[\"\u265b\"]:1\n    L5[\" \"]:1\n    L6[\" \"]:1\n    L7[\" \"]:1\n    L8[\" \"]:1\n\n    classDef queen fill:#ff6b6b,stroke:#333,stroke-width:2px,color:#fff\n    classDef empty fill:#f9f9f9,stroke:#ddd,stroke-width:1px\n\n    class Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8 queen</code></pre></p>","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/4/#answer","title":"Answer \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","Matrix","Optimization"]},{"location":"optimizations/5/","title":"5. GraphViz Examples","text":""},{"location":"optimizations/5/#example-1","title":"Example 1","text":"<ol> <li><code>splines=false</code> doesn't work well with labels - it often causes unexpected behavior</li> <li><code>splines=line</code> is better for straight edges with labels</li> <li>The layout engine (dot, neato, fdp, etc.) significantly affects how edges are drawn</li> <li>Increasing <code>nodesep</code> and <code>ranksep</code> gives more space for straight edges</li> <li>Using <code>labelfloat=true</code> can help position labels better</li> </ol> <p>G11221--2441--4551--5332--32--4662--63--6773--74--54--65--6885--86--76--87--825</p> <ul> <li><code>nodesep</code> for horizontal spacing</li> <li><code>ranksep</code> for more vertical spacing</li> <li><code>len</code> values for longer individual edges</li> </ul>"},{"location":"optimizations/5/#example-2","title":"Example 2","text":"<p>G11221--230441--424551--5252--428332--327662--6274--5294--6215--630885--8303--626773--7306--7286--8367--825</p>"},{"location":"optimizations/5/#depot-transactions","title":"Depot Transactions","text":"<p>DepotTransactionsD1Depot 1C2Customer 2D1-&gt;C25.0 tonsC3Customer 3D1-&gt;C375.0 tonsC4Customer 4D1-&gt;C4100.0 tonsC12Customer 12D1-&gt;C12120.0 tonsD2Depot 2D3Depot 3D4Depot 4D5Depot 5C1Customer 1D5-&gt;C1120.0 tonsD5-&gt;C240.0 tonsD6Depot 6D7Depot 7D8Depot 8D8-&gt;C235.0 tonsC6Customer 6D8-&gt;C6100.0 tonsC10Customer 10D8-&gt;C1085.0 tonsD9Depot 9C5Customer 5D9-&gt;C5110.0 tonsD9-&gt;C1065.0 tonsC11Customer 11D9-&gt;C1195.0 tonsD10Depot 10D11Depot 11D12Depot 12C7Customer 7D12-&gt;C790.0 tonsC8Customer 8D12-&gt;C860.0 tonsC9Customer 9D12-&gt;C930.0 tons</p>"},{"location":"optimizations/5/#research-learning-resources","title":"Research, Learning Resources","text":"<ul> <li>Reference 1</li> <li>Reference 2</li> <li>Reference 3</li> <li>Reference 4</li> <li>Reference 5</li> <li>Reference 6</li> <li>Reference 7</li> <li>Plugin Reference 1</li> <li>Plugin Reference 2</li> <li>Plugin Reference 3</li> <li>Plugin Reference 4</li> <li>Graph Reference</li> </ul>"},{"location":"optimizations/6/","title":"6. Depot Location","text":"","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#6-depot-location","title":"6. Depot Location","text":"<p>Ardous</p>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#description","title":"Description","text":"<p>A large company wishes to open new depots to deliver to its sales centers. Every new set-up of a depot has a fixed cost. Goods are delivered from a depot to the sales centers close to the site. Every delivery has a cost that depends on the distance covered. The two sorts of cost are quite different: set-up costs are capital costs which may usually be written off over several years, and transport costs are operating costs. A detailed discussion of how to combine these two costs is beyond the scope of this scenario \u2014 we assume here that they have been put on some comparable basis, perhaps by taking the costs over a year.</p> <p>There are 12 sites available for the construction of new depots and 12 sales centers need to receive deliveries from these depots.</p> <p>The following Table 6.1 gives the costs (in thousand $) of satisfying the entire demand of each customer (sales center) from a depot (not the unit costs). So, for instance, the cost per unit of supplying customer 9 (who has a total demand of 30 tonnes according to Table 6.3) from depot 1 is $60000/30t, i.e. $2000/t. Certain deliveries that are impossible are marked with the infinity symbol \\(\u221e\\).</p> <p>Table 6.1: Delivery costs for satisfying entire demand of customers</p> Customer Depot 1 2 3 4 5 6 7 8 9 10 11 12 1 100 80 50 50 60 100 120 90 60 70 65 110 2 120 90 60 70 65 110 140 110 80 80 75 130 3 140 110 80 80 75 130 160 125 100 100 80 150 4 160 125 100 100 80 150 190 150 130 \u221e \u221e \u221e 5 190 150 130 \u221e \u221e \u221e 200 180 150 \u221e \u221e \u221e 6 200 180 150 \u221e \u221e \u221e 100 80 50 50 60 100 7 100 80 50 50 60 100 120 90 60 70 65 110 8 120 90 60 70 65 110 140 110 80 80 75 130 9 140 110 80 80 75 130 160 125 100 100 80 150 10 160 125 100 100 80 150 190 150 130 \u221e \u221e \u221e 11 190 150 130 \u221e \u221e \u221e 200 180 150 \u221e \u221e \u221e 12 200 180 150 \u221e \u221e \u221e 100 80 50 50 60 100 <p>In addition, for every depot we have the following information: the fixed cost for constructing the depot that needs to be included into the objective function and its capacity limit, all listed in Table 6.2</p> <p>Table 6.2: Fix costs and capacity limits of the depot locations</p> Depot 1 2 3 4 5 6 7 8 9 10 11 12 Cost(k$) 3500 9000 10000 4000 3000 9000 9000 3000 4000 10000 9000 3500 Capacity(t) 300 250 100 180 275 300 200 220 270 250 230 180 <p>The quantities demanded by the sales centers (customers), are summarized in the following table.</p> <p>Table 6.3: Demand data</p> Customer 1 2 3 4 5 6 7 8 9 10 11 12 Demand(t) 120 80 75 100 110 100 90 60 30 150 95 120 <p>In every case, the demand of a customer needs to be satisfied but a sales center may be delivered to from several depots.</p> <p>Which depots should be opened to minimize the total cost of construction and of delivery, whilst satisfying all demands?</p>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#test-your-code","title":"\ud83d\ude80 Test your code","text":"<p>Try to solve the problem below in the code editor before reading the solution.</p>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#results","title":"Results","text":"View Result <pre><code>Total Minimum Cost = $18103\n</code></pre>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#depot-transactions","title":"Depot Transactions","text":"<pre><code>flowchart TD\n    D1[\"Depot 1\"]\n    D2[\"Depot 2\"]\n    D3[\"Depot 3\"]\n    D4[\"Depot 4\"]\n    D5[\"Depot 5\"]\n    D6[\"Depot 6\"]\n    D7[\"Depot 7\"]\n    D8[\"Depot 8\"]\n    D9[\"Depot 9\"]\n    D10[\"Depot 10\"]\n    D11[\"Depot 11\"]\n    D12[\"Depot 12\"]\n    C1[\"Customer 1\"]\n    C2[\"Customer 2\"]\n    C3[\"Customer 3\"]\n    C4[\"Customer 4\"]\n    C5[\"Customer 5\"]\n    C6[\"Customer 6\"]\n    C7[\"Customer 7\"]\n    C8[\"Customer 8\"]\n    C9[\"Customer 9\"]\n    C10[\"Customer 10\"]\n    C11[\"Customer 11\"]\n    C12[\"Customer 12\"]\n\n    D1 e1@==&gt;|5.0 tons| C2\n    e1@{ animate: true, animation: slow }\n    D1 e2@==&gt;|75.0 tons| C3\n    e2@{ animate: true, animation: slow }\n    D1 e3@==&gt;|100.0 tons| C4\n    e3@{ animate: true, animation: slow }\n    D1 e4@==&gt;|120.0 tons| C12\n    e4@{ animate: true, animation: slow }\n    D5 e5@==&gt;|120.0 tons| C1\n    e5@{ animate: true, animation: slow }\n    D5 e6@==&gt;|40.0 tons| C2\n    e6@{ animate: true, animation: slow }\n    D8 e7@==&gt;|35.0 tons| C2\n    e7@{ animate: true, animation: slow }\n    D8 e8@==&gt;|100.0 tons| C6\n    e8@{ animate: true, animation: slow }\n    D8 e9@==&gt;|85.0 tons| C10\n    e9@{ animate: true, animation: slow }\n    D9 e10@==&gt;|110.0 tons| C5\n    e10@{ animate: true, animation: slow }\n    D9 e11@==&gt;|65.0 tons| C10\n    e11@{ animate: true, animation: slow }\n    D9 e12@==&gt;|95.0 tons| C11\n    e12@{ animate: true, animation: slow }\n    D12 e13@==&gt;|90.0 tons| C7\n    e13@{ animate: true, animation: slow }\n    D12 e14@==&gt;|60.0 tons| C8\n    e14@{ animate: true, animation: slow }\n    D12 e15@==&gt;|30.0 tons| C9\n    e15@{ animate: true, animation: slow }</code></pre>","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/6/#answer","title":"Answer \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["MIP","Ground Transport","Optimization"]},{"location":"optimizations/7/","title":"More Optimization Problems Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/1/","title":"1. Two Sum","text":"","tags":["Array","Hash Table"]},{"location":"problems/1/#1-two-sum","title":"1. Two Sum","text":"<p>Easy</p>","tags":["Array","Hash Table"]},{"location":"problems/1/#description","title":"Description","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,7,11,15], target = 9\nOutput: [0, 1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [3,2,4], target = 6\nOutput: [1, 2]\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [3,3], target = 6\nOutput: [0, 1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> <li><code>-109 &lt;= target &lt;= 109</code></li> <li><code>Only one valid answer exists.</code></li> </ul> <p>Follow-up: Can you come up with an algorithm that is less than \\(O(n^2)\\) time complexity?</p>","tags":["Array","Hash Table"]},{"location":"problems/1/#_1","title":"1. Two Sum","text":"","tags":["Array","Hash Table"]},{"location":"problems/1/#solutions","title":"Solutions \ud83d\udd12","text":"<p>Video Solution Coming Soon</p>","tags":["Array","Hash Table"]},{"location":"problems/1/#approach-1-hash-table","title":"Approach 1: Hash Table","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p>","tags":["Array","Hash Table"]},{"location":"problems/1/#way-1","title":"Way 1","text":"<p>Algorithmic</p> <p>We can use the hash table \\(seen\\) to store the array value and the corresponding index.</p> <p>Traverse the array <code>nums</code>, when you find <code>target - nums[i]</code> in the hash table, it means that the target value is found, and the index of <code>target - nums[i]</code> and \\(i\\) are returned.</p> <p>The time complexity is \\(O(n)\\) and the space complexity is \\(O(n)\\). Where \\(n\\) is the length of the input array <code>nums</code>.</p> PythonJavaCC++GoTypeScriptRustJavaScriptC#PHPScalaSwiftRubyKotlinNimCangjie <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        seen = {} #map elements with their indexs {ele:idx}\n        for idx,ele in enumerate(nums):\n            num = target - ele\n            if num in seen:\n                return [seen[num],idx]\n            seen[ele] = idx\n</code></pre> <pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        return null;\n    }\n}\n</code></pre> <pre><code>/**\n* Note: The returned array must be malloced, assume caller calls free().\n*/\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n\n}\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int, int&gt; indices;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            int complement = target - nums[i];\n            if (indices.count(complement)) {\n                return {indices[complement], i};\n            }\n            indices[nums[i]] = i;\n        }\n        return {};\n    }\n};\n</code></pre> <pre><code>func twoSum(nums []int, target int) []int {\n}\n</code></pre> <pre><code>function twoSum(nums: number[], target: number): number[] {\n    const seen = new Map();\n    for (let i = 0; i &lt; nums.length; i++) {\n        const diff = target - nums[i];\n        if (seen.has(diff)) {\n            return [seen.get(diff), i];\n        }\n        seen.set(nums[i], i);\n    }\n    return [];\n}\n</code></pre> <pre><code>impl Solution {\n    pub fn two_sum(nums: Vec&lt;i32&gt;, target: i32) -&gt; Vec&lt;i32&gt; {\n\n    }\n}\n</code></pre> <pre><code>/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n*/\n\nvar twoSum = function (nums, target) {\n\n}\n</code></pre> <pre><code>public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n    }\n}\n</code></pre> <pre><code>class Solution {\n    /**\n    * @param Integer[] $nums\n    * @param Integer $target\n    * @return Integer[]\n    */\n    function twoSum($nums, $target) {\n    }\n}\n</code></pre> <pre><code>object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n    }\n}\n</code></pre> <pre><code>class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] {\n\n    }\n}\n</code></pre> <pre><code># @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n\nend\n</code></pre> <pre><code>class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n\n    }\n}\n</code></pre> <pre><code>proc twoSum(nums: seq[int], target: int): seq[int] =\n</code></pre> <pre><code>class Solution {\n    func twoSum(nums: Array&lt;Int64&gt;, target: Int64): Array&lt;Int64&gt; {\n\n    }\n}\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table"]},{"location":"problems/104/","title":"104. Maximum Depth of Binary Tree","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/104/#104-maximum-depth-of-binary-tree","title":"104. Maximum Depth of Binary Tree","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/104/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, return its maximum depth. (1)</p> <ol> <li> <p></p> <ul> <li>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: root = [3,9,20,null,null,15,7]\nOutput: 3\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: root = [1,null,2]\nOutput: 2\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in the tree is in the range [0, 10\u2074].</code></li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/104/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/1095/","title":"1095. Find in Mountain Array","text":"","tags":["Array","Binary Search","Interactive"]},{"location":"problems/1095/#1095-find-in-mountain-array","title":"1095. Find in Mountain Array","text":"<p>Hard</p>","tags":["Array","Binary Search","Interactive"]},{"location":"problems/1095/#description","title":"Description","text":"<p>(This problem is an interactive problem.)</p> <p>You may recall that an array arr is a mountain array if and only if:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some i with <code>0 &lt; i &lt; arr.length - 1</code> such that:</li> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> <p>Given a mountain array <code>mountainArr</code>, return the minimum <code>index</code> such that <code>mountainArr.get(index) == target</code>. If such an <code>index</code> does not exist, return <code>-1</code>.</p> <p>You cannot access the mountain array directly. You may only access the array using a <code>MountainArray</code> interface:</p> <ul> <li><code>MountainArray.get(k)</code> returns the element of the array at index <code>k</code> (0-indexed).</li> <li><code>MountainArray.length()</code> returns the length of the array.</li> </ul> <p>Submissions making more than <code>100</code> calls to <code>MountainArray.get</code> will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.</p> <p>Example 1:</p> <pre><code>Input: mountainArr = [1,2,3,4,5,3,1], target = 3\nOutput: 2\nExplanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: mountainArr = [0,1,2,4,2,1], target = 3\nOutput: -1\nExplanation: 3 does not exist in the array, so we return -1.\n</code></pre> <p>Constraints:</p> <ul> <li><code>3 &lt;= mountainArr.length() &lt;= 104</code></li> <li><code>0 &lt;= target &lt;= 109</code></li> <li><code>0 &lt;= mountainArr.get(index) &lt;= 109</code></li> </ul>","tags":["Array","Binary Search","Interactive"]},{"location":"problems/1095/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Interactive"]},{"location":"problems/121/","title":"121. Best Time to Buy and Sell Stock","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/121/#121-best-time-to-buy-and-sell-stock","title":"121. Best Time to Buy and Sell Stock","text":"<p>Easy</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/121/#description","title":"Description","text":"<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the i<sup>th</sup> day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p> <p>Example 1:</p> <pre><code>Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</code></pre> <p>Example 2:</p> <pre><code>Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 10\u2075</code></li> <li><code>0 &lt;= prices[i] &lt;= 10\u2074</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/121/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/125/","title":"125. Valid Palindrome","text":"","tags":["Two Pointers","String"]},{"location":"problems/125/#125-valid-palindrome","title":"125. Valid Palindrome","text":"<p>Easy</p>","tags":["Two Pointers","String"]},{"location":"problems/125/#description","title":"Description","text":"<p>Given a string <code>s</code>, return <code>true</code> if it is a palindrome (1), or <code>false</code> otherwise.</p> <ol> <li> <p></p> <ul> <li>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2 * 10\u2075</code></li> <li><code>s</code> consists only of printable ASCII characters.</li> </ul>","tags":["Two Pointers","String"]},{"location":"problems/125/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Two Pointers","String"]},{"location":"problems/135/","title":"135. Candy","text":"","tags":["Array","Greedy"]},{"location":"problems/135/#135-candy","title":"135. Candy","text":"<p>Hard</p>","tags":["Array","Greedy"]},{"location":"problems/135/#description","title":"Description","text":"<p>There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.</p> <p>You are giving candies to these children subjected to the following requirements:</p> <ul> <li>Each child must have at least one candy.</li> <li>Children with a higher rating get more candies than their neighbors.</li> </ul> <p>Return the minimum number of candies you need to have to distribute the candies to the children.</p> <p>Example 1:</p> <pre><code>Input: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n</code></pre> <p>Example 2:</p> <pre><code>Input: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == ratings.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= ratings[i] &lt;= 2 * 104</code></li> </ul>","tags":["Array","Greedy"]},{"location":"problems/135/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Greedy"]},{"location":"problems/136/","title":"136. Single Number","text":"","tags":["Array","Bit Manipulation"]},{"location":"problems/136/#136-single-number","title":"136. Single Number","text":"<p>Easy</p>","tags":["Array","Bit Manipulation"]},{"location":"problems/136/#description","title":"Description","text":"<p>Given a non-empty array of integers <code>nums</code>, every element appears twice except for one. Find that single one.</p> <p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p> <p>Example 1:</p> <pre><code>Input: nums = [2,2,1]\n\nOutput: 1\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [4,1,2,1,2]\n\nOutput: 4\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [1]\n\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10\u2074</code></li> <li><code>-3 * 10\u2074 &lt;= nums[i] &lt;= 3 * 10\u2074</code></li> <li>Each element in the array appears twice except for one element which appears only once.</li> </ul>","tags":["Array","Bit Manipulation"]},{"location":"problems/136/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Bit Manipulation"]},{"location":"problems/139/","title":"139. Word Break","text":"","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/139/#139-word-break","title":"139. Word Break","text":"<p>Medium</p>","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/139/#description","title":"Description","text":"<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p> <p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p> <p>Example 1:</p> <pre><code>Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li> <li><code>s and wordDict[i] consist of only lowercase English letters.</code></li> <li><code>All the strings of wordDict are unique.</code></li> </ul>","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/139/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","String","Dynamic Programming","Trie","Memoization"]},{"location":"problems/141/","title":"141. Linked List Cycle","text":"","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/141/#141-linked-list-cycle","title":"141. Linked List Cycle","text":"<p>Easy</p>","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/141/#description","title":"Description","text":"<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail's <code>next</code> pointer is connected to.Note that <code>pos</code> is not passed as a parameter.</p> <p>Return <code>true</code> if there is a cycle in the linked list. Otherwise, return <code>false</code>.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n</code></pre> <p>Example 3:</p> <p></p> <pre><code>Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of the nodes in the list is in the range</code>[0, 10<sup>4</sup>].</li> <li>-10<sup>5</sup> <code>&lt;= Node.val &lt;=</code> 10<sup>5</sup></li> <li><code>pos</code> is <code>-1</code> or a valid index in the linked-list.</li> </ul>","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/141/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Linked List","Two Pointers"]},{"location":"problems/15/","title":"15. 3Sum","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#15-3sum","title":"15. 3Sum","text":"<p>Medium</p>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#description","title":"Description","text":"<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p> <p>Example 1:</p> <pre><code>Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation:\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [0,0,0]\nOutput: [[0, 0, 0]]\nExplanation: The only possible triplet sums up to 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 3000</code></li> <li><code>-10\u2075 &lt;= nums[i] &lt;= 10\u2075</code></li> </ul>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#solutions","title":"Solutions \ud83d\udd12","text":"","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#approach-sorting-two-pointers-using-hashset","title":"Approach: Sorting + Two Pointers (using HashSet)","text":"<p> Time complexity: \\(O(n^2)\\)</p> <p> Space complexity: \\(O(|ans|)\\) = \\(O(n)\\)</p> <p>Algorithm</p> <p>First, sort the array to make it easier to skip duplicates and use the two-pointer technique.</p> <p>Iterate through each element, treating it as the first element of the triplet.</p> <p>For each element, use two pointers (one starting just after the current element and the other at the end of the array) to find pairs that sum to the negative of the current element.</p> <p>Skip over duplicate elements to avoid duplicate triplets in the result.</p> <p>Use a set to store the triplets to automatically handle duplicates.</p> <p>Convert the set of tuples back to a list of lists before returning.</p> <p>Sorting the array takes \\(O(n \\log n)\\), and the two nested loops take \\(O(n^2)\\). Thus, the overall time complexity is dominated by the \\(O(n^2)\\) part.</p> <p>The space complexity is \\(O(n)\\) due to the storage of the result in a set, which can contain up to \\(O(n)\\) unique triplets. No additional significant space is used.</p> Python <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        ans = set()\n        n = len(nums)\n        nums = sorted(nums)\n        for i in range(n):\n            l,r = i+1,n-1\n            while l&lt;r:\n                S = nums[i]+nums[l]+nums[r]\n                if S == 0:\n                    ans.add((nums[i],nums[l],nums[r]))\n                    l+=1\n                    r-=1\n                elif S &gt; 0:\n                    r-=1\n                else:\n                    l+=1\n\n        return [list(tup) for tup in ans]\n</code></pre>","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/15/#approach-two-pointers-sorting","title":"Approach :Two Pointers +Sorting","text":"<p> Time complexity: \\(O(n^2)\\)</p> <p> Space complexity: \\(O(|ans|)\\) = \\(O(n)\\)</p> <p>Algorithm</p> <p>We notice that the problem does not require us to return the triplet in order, so we might as well sort the array first, which makes it easy to skip duplicate elements.</p> <p>Next, we enumerate the first element of the triplet \\(nums[i]\\) , where \\(0 \u2264 i&lt; n\u22122\\).</p> <p>For each \\(i\\), we can find \\(l\\) and \\(r\\) satisfying \\(nums[i]+nums[l]+nums[r]=0\\) by maintaining two pointers \\(l=i+1\\) and \\(r=n\u22121\\).</p> <p>In the enumeration process, we need to skip duplicate elements to avoid duplicate triplets.</p> <p>The specific judgment logic is as follows:</p> <p>If \\(i&gt;0\\) and \\(nums[i]=nums[i\u22121]\\), it means that the element currently enumerated is the same as the previous element, we can skip it directly, because it will not produce new results.</p> <p>If \\(nums[i] &gt; 0\\), it means that the element currently enumerated is greater than \\(0\\), so the sum of three numbers must not be equal to \\(0\\), and the enumeration ends.</p> <p>Otherwise, we let the left pointer \\(j=i+1\\), and the right pointer \\(k=n\u22121\\).</p> <p>When \\(l &lt; r\\), the loop is executed, and the sum of three numbers \\(summ = nums[i]+nums[l]+nums[r]\\) is calculated and compared with \\(0\\):</p> <ul> <li>If \\(summ &lt; 0\\), it means that \\(nums[l]\\) is too small, we need to move \\(l\\) to the right.</li> <li>If \\(summ &gt; 0\\), it means that \\(nums[r]\\) is too large, we need to move \\(r\\) to the left.</li> <li>Otherwise, it means that we have found a valid triplet, add it to the answer \\(ans\\), move \\(l\\) to the right, move \\(r\\) to the left, and skip all duplicate elements to continue looking for the next valid triplet.</li> </ul> <p>After the enumeration is over, we can get the answer \\(ans\\) to the triplet.</p> <p>The time complexity is \\(O(n^2)\\) and the space complexity is \\(O(\\log n)\\). The \\(n\\) is the length of the array.</p> Python <pre><code>class Solution:\n    def threeSum(self,nums:List[int])-&gt;List[List[int]]:\n        if len(nums) &lt; 3: return ans\n\n        nums = sorted(nums)\n        ans = []\n        n = len(nums)\n        for i in range(n-2):\n            if i&gt;0 and nums[i]==nums[i-1]:\n                continue\n            # Choose nums[i] as the first number in the triplet, then search the\n            # remaining numbers in [i + 1, n - 1].\n            l , r = i+1,n-1\n            while l &lt; r:\n                summ = nums[i]+nums[l]+nums[r]\n                if summ==0:\n                    ans.append((nums[i],nums[l],nums[r]))\n                    l+=1\n                    r-=1\n                    #skip duplicates\n                    while nums[l]==nums[l-1] and l&lt;r:\n                        l+=1\n                    while nums[r]==nums[r+1] and l&lt;r:\n                        r-=1\n\n                elif summ &lt;0:\n                    l+=1\n                else:\n                    r-=1\n\n        return ans\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Sorting"]},{"location":"problems/19/","title":"19. Remove Nth Node From End of List","text":"","tags":["Linked List","Two Pointers"]},{"location":"problems/19/#19-remove-nth-node-from-end-of-list","title":"19. Remove Nth Node From End of List","text":"<p>Medium</p>","tags":["Linked List","Two Pointers"]},{"location":"problems/19/#description","title":"Description","text":"<p>Given the <code>head</code> of a linked list, remove the n<sup>th</sup> node from the end of the list and return its head.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5], n = 2\nOutput: [1, 2, 3, 5]\n</code></pre> <p>Example 2:</p> <pre><code>Input: head = [1], n = 1\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: head = [1,2], n = 1\nOutput: [1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in the list is sz.</code></li> <li><code>1 &lt;= sz &lt;= 30</code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= sz</code></li> </ul> <p>Follow up: Could you do this in one pass?</p>","tags":["Linked List","Two Pointers"]},{"location":"problems/19/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Two Pointers"]},{"location":"problems/2/","title":"2. Add Two Numbers","text":"","tags":["Linked List","Math","Recursion"]},{"location":"problems/2/#2-add-two-numbers","title":"2. Add Two Numbers","text":"<p>Medium</p>","tags":["Linked List","Math","Recursion"]},{"location":"problems/2/#description","title":"Description","text":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p>Example 1:</p> <p></p> <pre><code>Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7, 0, 8]\nExplanation: 342 + 465 = 807.\n</code></pre> <p>Example 2:</p> <pre><code>Input: l1 = [0], l2 = [0]\nOutput: [0]\n</code></pre> <p>Example 3:</p> <pre><code>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8, 9, 9, 9, 0, 0, 0, 1]\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in each linked list is in the range [1, 100].</code></li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li><code>It is guaranteed that the list represents a number that does not have leading zeros.</code></li> </ul>","tags":["Linked List","Math","Recursion"]},{"location":"problems/2/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Math","Recursion"]},{"location":"problems/20/","title":"20. Valid Parentheses","text":"","tags":["String","Stack"]},{"location":"problems/20/#20-valid-parentheses","title":"20. Valid Parentheses","text":"<p>Easy</p>","tags":["String","Stack"]},{"location":"problems/20/#description","title":"Description","text":"<p>Given a string s containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p> <p>An input string is valid if:</p> <ol> <li>Open brackets must be closed by the same type of brackets.</li> <li>Open brackets must be closed in the correct order.</li> <li>Every close bracket has a corresponding open bracket of the same type.</li> </ol> <p>Example 1:</p> <pre><code>Input: s = \"()\"\n\nOutput: true\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"()[]{}\"\n\nOutput: true\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"(]\"\n\nOutput: false\n</code></pre> <p>Example 4:</p> <pre><code>Input: s = \"([])\"\n\nOutput: true\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 104</code></li> <li><code>s consists of parentheses only '()[]{}'</code></li> </ul>","tags":["String","Stack"]},{"location":"problems/20/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["String","Stack"]},{"location":"problems/206/","title":"206. Reverse Linked List","text":"","tags":["Linked List","Recursion"]},{"location":"problems/206/#206-reverse-linked-list","title":"206. Reverse Linked List","text":"<p>Medium</p>","tags":["Linked List","Recursion"]},{"location":"problems/206/#description","title":"Description","text":"<p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: head = [1,2]\nOutput: [2,1]\n</code></pre> <p>Example 3:</p> <pre><code>Input: head = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in the list is the range [0, 5000].</code></li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p>Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?</p>","tags":["Linked List","Recursion"]},{"location":"problems/206/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Recursion"]},{"location":"problems/21/","title":"21. Merge Two Sorted Lists","text":"","tags":["Linked List","Recursion"]},{"location":"problems/21/#21-merge-two-sorted-lists","title":"21. Merge Two Sorted Lists","text":"<p>Easy</p>","tags":["Linked List","Recursion"]},{"location":"problems/21/#description","title":"Description","text":"<p>You are given the heads of two sorted linked lists list1 and list2.</p> <p>Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.</p> <p>Return the head of the merged linked list.</p> <p>Example 1:</p> <p></p> <pre><code>Input: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1, 1, 2, 3, 4, 4]\n</code></pre> <p>Example 2:</p> <pre><code>Input: list1 = [], list2 = []\nOutput: []\n</code></pre> <p>Example 3:</p> <pre><code>Input: list1 = [], list2 = [0]\nOutput: [0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>The number of nodes in both lists is in the range [0, 50].</code></li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>Both list1 and list2 are sorted in non-decreasing order.</code></li> </ul>","tags":["Linked List","Recursion"]},{"location":"problems/21/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Linked List","Recursion"]},{"location":"problems/212/","title":"212. Word Search II","text":"","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/212/#212-word-search-ii","title":"212. Word Search II","text":"<p>Hard</p>","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/212/#description","title":"Description","text":"<p>Given an <code>m x n</code> <code>board</code> of characters and a list of strings <code>words</code>, return all words on the board.</p> <p>Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p> <p>Example 1:</p> <pre><code>Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\", \"oath\"]\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 12</code></li> <li><code>board[i][j] is a lowercase English letter.</code></li> <li><code>1 &lt;= words.length &lt;= 3 * 104</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i] consists of lowercase English letters.</code></li> <li><code>All the strings of words are unique.</code></li> </ul>","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/212/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","String","Backtracking","Trie","Matrix"]},{"location":"problems/2140/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/2226/","title":"2226. Maximum Candies Allocated to K Children","text":"","tags":["Array","Binary Search"]},{"location":"problems/2226/#2226-maximum-candies-allocated-to-k-children","title":"2226. Maximum Candies Allocated to K Children","text":"<p>Medium</p>","tags":["Array","Binary Search"]},{"location":"problems/2226/#description","title":"Description","text":"<p>You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.</p> <p>You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can be allocated candies from only one pile of candies and some piles of candies may go unused.</p> <p>Return the maximum number of candies each child can get.</p> <p>Example 1:</p> <pre><code>Input: candies = [5,8,6], k = 3\nOutput: 5\nExplanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.\n</code></pre> <p>Example 2:</p> <pre><code>Input: candies = [2,5], k = 11\nOutput: 0\nExplanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= candies.length &lt;= 105</code></li> <li><code>1 &lt;= candies[i] &lt;= 107</code></li> <li><code>1 &lt;= k &lt;= 1012</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/2226/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/226/","title":"226. Invert Binary Tree","text":"","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/226/#226-invert-binary-tree","title":"226. Invert Binary Tree","text":"<p>Easy</p>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/226/#description","title":"Description","text":"<p>Given the <code>root</code> of a binary tree, invert the tree, and return its root.</p> <p>Example 1:</p> <pre><code>Input: root = [4, 2, 7, 1, 3, 6, 9]\nOutput: [4, 7, 2, 9, 6, 3, 1]\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: root = [2, 1, 3]\nOutput: [2, 3, 1]\n</code></pre> <p></p> <p>Example 3:</p> <pre><code>Input: root = []\nOutput: []\n</code></pre> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/226/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},{"location":"problems/2294/","title":"2294. Partition Array Such That Maximum Difference Is K","text":"","tags":["Array","Greedy","Sorting"]},{"location":"problems/2294/#2294-partition-array-such-that-maximum-difference-is-k","title":"2294. Partition Array Such That Maximum Difference Is K","text":"<p>Medium</p>","tags":["Array","Greedy","Sorting"]},{"location":"problems/2294/#description","title":"Description","text":"<p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You may partition <code>nums</code> into one or more subsequences such that each element in <code>nums</code> appears in exactly one of the subsequences.</p> <p>Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence (1) is at most <code>k</code>.</p> <ol> <li> <p></p> <ul> <li>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: nums = [3,6,1,2,5], k = 2\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [1,2,3], k = 1\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].\n</code></pre> <p>Example 3:</p> <pre><code>Input: nums = [2,2,4,5], k = 0\nOutput: 3\nExplanation:\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10\u2075</code></li> <li><code>0 &lt;= nums[i] &lt;= 10\u2075</code></li> <li><code>0 &lt;= k &lt;= 10\u2075</code></li> </ul>","tags":["Array","Greedy","Sorting"]},{"location":"problems/2294/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Greedy","Sorting"]},{"location":"problems/238/","title":"238. Product of Array Except Self","text":"","tags":["Array","Prefix Sum"]},{"location":"problems/238/#238-product-of-array-except-self","title":"238. Product of Array Except Self","text":"<p>Medium</p>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#description","title":"Description","text":"<p>Given an integer array <code>nums</code>, return an array <code>answer</code> such that <code>answer[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p> <p>The product of any prefix or suffix of <code>nums</code> is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.</p> <p>Example 1:</p> <pre><code>Input: nums = [1,2,3,4]\nOutput: [24, 12, 8, 6]\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1,1,0,-3,3]\nOutput: [0, 0, 9, 0, 0]\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10\u2075</code>.</li> <li><code>-30 &lt;= nums[i] &lt;= 30</code></li> <li><code>The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.</code></li> </ul> <p>Follow up: Can you solve the problem in <code>O(1)</code> extra space complexity? (The output array does not count as extra space for space complexity analysis.)</p>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#solutions","title":"Solutions \ud83d\udd12","text":"<p>Video Solution Coming Soon</p>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#approach-prefixsum","title":"Approach: PrefixSum","text":"","tags":["Array","Prefix Sum"]},{"location":"problems/238/#way-1-using-two-arrays","title":"Way 1: Using Two arrays","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(n)\\)</p> <p>where \\(n\\) is the no. of elements in the input array</p> <p>Algorithm</p> <p>To solve this problem efficiently without using division, we\u2019ll use two additional arrays.</p> <p>First, we'll create a left product array \u201cfrom_left\u201d where each element at index i represents the product of all elements to the left of nums[i].</p> <p>Then, we'll create a right product array \u201cfrom_right\u201d where each element at index i represents the product of all elements to the right of nums[i].</p> <p>Finally, we'll compute the result array \u201cres\u201d by multiplying corresponding elements from \u201cfrom_left\u201d and \u201cfrom_right\u201d.</p> <p>Time complexity of this solution is O(n).</p> Python <pre><code>class Solution: # 2 extra arrays\ndef productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n    n = len(nums)\n\n    #Initialize left product array\n    from_left = [1]*n\n    # Product from index=0 to index=i-1\n    for i  in range(1,n):\n        from_left[i] = from_left[i-1]*nums[i-1]\n\n    #Initialize right product array\n    from_right = [1]*n\n    # Product from index=n-1 to current position\n    for i  in range(n-2,-1,-1):\n        from_right[i] =from_right[i+1]*nums[i+1]\n\n    #Compute answer\n    res = [1]*n\n    for i in range(n):\n        res[i] = from_left[i]*from_right[i]\n\n    return res\n</code></pre> quick tip <p>Use List comprehension it is efficient</p> <pre><code>res = [from_left[i]*from_right[i] for i in range(n)]\n\n        V\n      better\n        V\n\nres = [1]*n\nfor i in range(n):\n    res[i] = from_left[i]*from_right[i]\n</code></pre>","tags":["Array","Prefix Sum"]},{"location":"problems/238/#way-2-optimized-approach-for-follow-up","title":"Way 2: Optimized Approach for Follow Up","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(1)\\)</p> <p>Algorithm</p> <p>We define two variables <code>left</code> and <code>right</code>, which represent the product of all elements to the left and right of the current element respectively.</p> <p>Initially, <code>left = 1</code>, <code>right = 1</code>. Define an answer array <code>ans</code> of length n.</p> <p>We first traverse the array from left to right, for the <code>ith</code> element we update <code>ans[i]</code> with <code>left</code>, then left multiplied by <code>nums[i]</code>.</p> <p>Then, we traverse the array from right to left, for the <code>ith</code> element, we update <code>ans[i]</code> to <code>ans[i]*right</code>, then right multiplied by <code>nums[i]</code>.</p> <p>After the traversal, the array <code>ans</code> is the answer.</p> <p>The time complexity is \\(O(n)\\), where \\(n\\) is the length of the array nums. Ignoring the space consumption of the answer array, the space complexity is O(1).</p> Python <pre><code>class Solution:\n    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n    n = len(nums)\n\n    ans = [1]*n\n\n    #traverse the array from left to right\n    left =1\n    for i in range(n):\n        ans[i]=left\n        left = left*nums[i]\n\n    #traverse the array from right to left\n    right = 1\n    for i in range(n-1, -1, -1):\n        ans[i] = ans[i]*right\n        right = right*nums[i]\n\n    return ans\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Array","Prefix Sum"]},{"location":"problems/240/","title":"240. Search a 2D Matrix II","text":"","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/240/#240-search-a-2d-matrix-ii","title":"240. Search a 2D Matrix II","text":"<p>Medium</p>","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/240/#description","title":"Description","text":"<p>Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:</p> <ul> <li>Integers in each row are sorted in ascending from left to right.</li> <li>Integers in each column are sorted in ascending from top to bottom.</li> </ul> <p>Example 1:</p> <pre><code>Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= n, m &lt;= 300</code></li> <li><code>-109 &lt;= matrix[i][j] &lt;= 109</code></li> <li><code>All the integers in each row are sorted in ascending order.</code></li> <li><code>All the integers in each column are sorted in ascending order.</code></li> <li><code>-109 &lt;= target &lt;= 109</code></li> </ul>","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/240/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Divide and Conquer","Matrix"]},{"location":"problems/242/","title":"242. Valid Anagram","text":"","tags":["Hash Table","String","Sorting"]},{"location":"problems/242/#242-valid-anagram","title":"242. Valid Anagram","text":"<p>Easy</p>","tags":["Hash Table","String","Sorting"]},{"location":"problems/242/#description","title":"Description","text":"<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p> <p>Example 1:</p> <pre><code>Input: s = \"anagram\", t = \"nagaram\"\n\nOutput: true\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"rat\", t = \"car\"\n\nOutput: false\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 5 * 10\u2074</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul>","tags":["Hash Table","String","Sorting"]},{"location":"problems/242/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sorting"]},{"location":"problems/2503/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/29/","title":"29. Divide Two Integers","text":"","tags":["Math","Bit Manipulation"]},{"location":"problems/29/#29-divide-two-integers","title":"29. Divide Two Integers","text":"<p>Medium</p>","tags":["Math","Bit Manipulation"]},{"location":"problems/29/#description","title":"Description","text":"<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division, and mod operator.</p> <p>The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.</p> <p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p> <p>Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u22122<sup>31</sup>, 2<sup>31</sup> \u2212 1]. For this problem, if the quotient is strictly greater than 2<sup>31</sup> - 1, then return 2<sup>31</sup> - 1, and if the quotient is strictly less than -2<sup>31</sup>, then return -2<sup>31</sup>.</p> <p>Example 1:</p> <pre><code>Input: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>-2</code><sup>31</sup><code>&lt;= dividend, divisor &lt;= 2</code><sup>31</sup><code>- 1</code></li> <li><code>divisor != 0</code></li> </ul>","tags":["Math","Bit Manipulation"]},{"location":"problems/29/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Bit Manipulation"]},{"location":"problems/3/","title":"3. Longest Substring Without Repeating Characters","text":"","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/3/#3-longest-substring-without-repeating-characters","title":"3. Longest Substring Without Repeating Characters","text":"<p>Medium</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/3/#description","title":"Description","text":"<p>Given a string <code>s</code>, find the length of the longest substring (1) without duplicate characters.</p> <ol> <li> <p></p> <ul> <li>A substring is a contiguous non-empty sequence of characters within a string.</li> </ul> </li> </ol> <p>Example 1:</p> <pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n</code></pre> <p>Example 3:</p> <pre><code>Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 5 * 104</code></li> <li><code>s consists of English letters, digits, symbols and spaces.</code></li> </ul>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/3/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/355/","title":"355. Design Twitter","text":"","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/355/#355-design-twitter","title":"355. Design Twitter","text":"<p>Medium</p>","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/355/#description","title":"Description","text":"<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.</p> <p>Implement the <code>Twitter</code> class:</p> <ol> <li> <p><code>Twitter()</code></p> <p>Initializes your twitter object.</p> </li> <li> <p><code>void postTweet(int userId, int tweetId)</code></p> <p>Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.</p> </li> <li> <p><code>List&lt;Integer&gt; getNewsFeed(int userId)</code></p> <p>Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.</p> </li> <li> <p><code>void follow(int followerId, int followeeId)</code></p> <p>The user with ID followerId started following the user with ID followeeId.</p> </li> <li> <p><code>void unfollow(int followerId, int followeeId)</code></p> <p>The user with ID followerId started unfollowing the user with ID followeeId.</p> </li> </ol> <p>Example 1:</p> <pre><code>Input\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\n\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li> <li><code>0 &lt;= tweetId &lt;= 10\u2074</code></li> <li><code>All the tweets have unique IDs.</code></li> <li><code>At most 3 * 10\u2074 calls will be made to postTweet, getNewsFeed, follow, and unfollow.</code></li> <li><code>A user cannot follow himself.</code></li> </ul>","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/355/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Hash Table","Linked List","Design","Heap (Priority Queue)"]},{"location":"problems/374/","title":"374. Guess Number Higher or Lower","text":"","tags":["Binary Search","Interactive"]},{"location":"problems/374/#374-guess-number-higher-or-lower","title":"374. Guess Number Higher or Lower","text":"<p>Easy</p>","tags":["Binary Search","Interactive"]},{"location":"problems/374/#description","title":"Description","text":"<p>We are playing the Guess Game. The game is as follows:</p> <p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p> <p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p> <p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p> <ul> <li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li> <li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li> <li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li> </ul> <p>Return the number that I picked.</p> <p>Example 1:</p> <pre><code>Input: n = 10, pick = 6\nOutput: 6\n</code></pre> <p>Example 2:</p> <pre><code>Input: n = 1, pick = 1\nOutput: 1\n</code></pre> <p>Example 3:</p> <pre><code>Input: n = 2, pick = 1\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 231 - 1</code></li> <li><code>1 &lt;= pick &lt;= n</code></li> </ul>","tags":["Binary Search","Interactive"]},{"location":"problems/374/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Binary Search","Interactive"]},{"location":"problems/4/","title":"4. Median of Two Sorted Arrays","text":"","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/4/#4-median-of-two-sorted-arrays","title":"4. Median of Two Sorted Arrays","text":"<p>Hard</p>","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/4/#description","title":"Description","text":"<p>Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.</p> <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p> <p>Example 1:</p> <pre><code>Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</code></pre> <p>Constraints:</p> <ul> <li><code>nums1.length == m</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m &lt;= 1000</code></li> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= m + n &lt;= 2000</code></li> <li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li> </ul>","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/4/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Divide and Conquer"]},{"location":"problems/40/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/407/","title":"407. Trapping Rain Water II","text":"","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/407/#407-trapping-rain-water-ii","title":"407. Trapping Rain Water II","text":"<p>Hard</p>","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/407/#description","title":"Description","text":"<p>Given an <code>m x n</code> integer matrix <code>heightMap</code> representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.</p> <p>Example 1:</p> <p></p> <pre><code>Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\nOutput: 4\nExplanation: After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n</code></pre> <p>Example 2:</p> <p></p> <pre><code>Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\nOutput: 10\n</code></pre> <p>Constraints:</p> <ul> <li><code>m == heightMap.length</code></li> <li><code>n == heightMap[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 104</code></li> </ul>","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/407/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Breadth-First Search","Heap (Priority Queue)","Matrix"]},{"location":"problems/42/","title":"42. Trapping Rain Water","text":"","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/42/#42-trapping-rain-water","title":"42. Trapping Rain Water","text":"<p>Hard</p>","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/42/#description","title":"Description","text":"<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p> <p>Example 1:</p> <p></p> <pre><code>Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</code></pre> <p>Example 2:</p> <pre><code>Input: height = [4,2,0,3,2,5]\nOutput: 9\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= height[i] &lt;= 105</code></li> </ul> <p>Hint : Remember Array Operations (1)</p> <ol> <li> Operations Time Complexity Add or Remove Element at the end of Array \\(O(1)\\) Amortized Add or Remove Element NOT at the end of Arra \\(O(n)\\) Access Element at any Index \\(O(1)\\) Searching Array for an Element \\(O(n)\\) Searching Sorted Array for an Element \\(O(\\log n)\\) Binary Search Copying Array \\(O(n)\\) Sliding Window \\(O(n)\\) All Pairs of Array Elements \\(O(n^2)\\) </li> </ol>","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/42/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Two Pointers","Dynamic Programming","Stack","Monotonic Stack"]},{"location":"problems/424/","title":"424. Longest Repeating Character Replacement","text":"","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#424-longest-repeating-character-replacement","title":"424. Longest Repeating Character Replacement","text":"<p>Hard</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#description","title":"Description","text":"<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p> <p>Return the length of the longest substring containing the same letter you can get after performing the above operations.</p> <p>Example 1:</p> <pre><code>Input: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10\u2075</code></li> <li><code>s</code> consists of only uppercase English letters.</li> <li><code>0 &lt;= k &lt;= s.length</code></li> </ul>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#solutions","title":"Solutions \ud83d\udd12","text":"Algorithm Discussion","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#sliding-window","title":"Sliding Window","text":"<ol> <li> <p>We can keep tracking a current window, and use two pointer to apply the sliding window algorithms.</p> </li> <li> <p>We can expand the window to the right greedily as long as the character is not existent in the current window.</p> </li> <li> <p>Otherwise, we need to move the left pointer and erase the corresponding characters at left pointer out of the window until the current character at the right pointer is no longer in the window.</p> </li> <li> <p>If we don\u2019t move the left pointer (shrink the window), the substring is not valid no matter how we move the right pointer.</p> </li> </ol> <p>The time complexity is \\(O(n)\\) as the left and right pointers both move towards the right and the space complexity is \\(O(n)\\) as we need a hash-set or dictionary to store the elements in the current window.</p>","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/424/#approach-hashtable-slidingwindow","title":"Approach: HashTable + SlidingWindow","text":"<p> Time complexity: \\(O(n)\\)</p> <p> Space complexity: \\(O(1)\\)</p> <p>Algorithm</p> <p>The problem can be efficiently solved using the sliding window technique.</p> <p>We maintain a window that contains the maximum number of repeating characters possible with at most k replacements.</p> <p>Counter() <code>count</code> is used to keep track of the frequency of characters within the current window.</p> <p><code>maxCount</code> keeps track of the highest frequency of any single character within the current window, which helps us determine how many replacements we can afford.</p> <p>If the current window size minus <code>maxCount</code> exceeds <code>k</code>, it indicates that we need more than <code>k</code> replacements to make all characters in the window the same, thus we shrink the window from the left.</p> <p>We continuously update the answer with the maximum valid window size encountered during the process.</p> <p>The time complexity is \\(O(n)\\), where n is the length of the string s. This is because each character in the string is processed at most twice, once when expanding the window and once when shrinking it.</p> <p>The space complexity \\(O(1)\\), despite using a Counter, the space complexity is constant because the input string consists of only uppercase English letters, limiting the number of unique keys in the Counter to 26.</p> Python <pre><code>from collections import Counter\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -&gt; int:\n        ans = 0\n        count = Counter()                   #window, a hashtable to store the frequencies of characters like this {A:1,B:1,....}\n        maxCount = 0                        # to store the frequncy of maximum character count\n        l = 0\n\n        for r in range(len(s)):\n            count[s[r]]+=1                  #expand the window i.e add the count of incoming character in window\n            maxCount = max(maxCount,count[s[r]])\n\n            while(r-l+1) - maxCount &gt; k:   #window condition broken or invalid window condition , when length of window (r-l+1) minus maxCharacterCount becomes more than the k (the character can be replaced) meaning we can only expand the window until we consume the provided characters count\n                count[s[l]]-=1              #shrink the window\n                l+=1                        #slide the window\n\n            ans = max(ans,r-l+1)\n\n        return ans\n</code></pre> Akhil Singh Chauhan                          Creator","tags":["Hash Table","String","Sliding Window"]},{"location":"problems/45/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/5/","title":"5. Longest Palindromic Substring","text":"","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/5/#5-longest-palindromic-substring","title":"5. Longest Palindromic Substring","text":"<p>Medium</p>","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/5/#description","title":"Description","text":"<p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p> <p>Example 1:</p> <pre><code>Input: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n</code></pre> <p>Example 2:</p> <pre><code>Input: s = \"cbbd\"\nOutput: \"bb\"\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consist of only digits and English letters.</li> </ul>","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/5/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Two Pointers","String","Dynamic Programming"]},{"location":"problems/50/","title":"50. Pow(x, n)","text":"","tags":["Math","Recursion"]},{"location":"problems/50/#50-powx-n","title":"50. Pow(x, n)","text":"<p>Medium</p>","tags":["Math","Recursion"]},{"location":"problems/50/#description","title":"Description","text":"<p>Implement pow(x, n), which calculates <code>x</code> raised to the power <code>n</code> (i.e., x<sup>n</sup>).</p> <p>Example 1:</p> <p></p> <pre><code>Input: x = 2.00000, n = 10\nOutput: 1024.00000\n</code></pre> <p>Example 2:</p> <pre><code>Input: x = 2.10000, n = 3\nOutput: 9.26100\n</code></pre> <p>Example 3:</p> <pre><code>Input: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2\u207b\u00b2 = 1/2\u00b2 = 1/4 = 0.25\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= height[i] &lt;= 105</code></li> </ul>","tags":["Math","Recursion"]},{"location":"problems/50/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Recursion"]},{"location":"problems/52/","title":"52. N-Queens II","text":"","tags":["Backtracking"]},{"location":"problems/52/#52-n-queens-ii","title":"52. N-Queens II","text":"<p>Hard</p>","tags":["Backtracking"]},{"location":"problems/52/#description","title":"Description","text":"<p>The n-queens puzzle is the problem of placing \\(n\\) queens on an \\(n \\times n\\) chessboard such that no two queens attack each other.</p> <p>Given an integer \\(n\\), return the number of distinct solutions to the n-queens puzzle.</p> <p>Example 1:</p> <pre><code>Input: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown below\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: n = 1\nOutput: 1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 9</code></li> </ul>","tags":["Backtracking"]},{"location":"problems/52/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Backtracking"]},{"location":"problems/6/","title":"Coming Soon","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator"},{"location":"problems/62/","title":"62. Unique Paths","text":"","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/62/#62-unique-paths","title":"62. Unique Paths","text":"<p>Medium</p>","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/62/#description","title":"Description","text":"<p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>Given the two integers <code>m</code> and <code>n</code>, return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The test cases are generated so that the answer will be less than or equal to 2 * 10<sup>9</sup>.</p> <p>Example 1:</p> <pre><code>Input: m = 3, n = 7\nOutput: 28\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 100</code></li> </ul>","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/62/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math","Dynamic Programming","Combinatorics"]},{"location":"problems/7/","title":"7. Reverse Integer","text":"","tags":["Math"]},{"location":"problems/7/#7-reverse-integer","title":"7. Reverse Integer","text":"<p>Medium</p>","tags":["Math"]},{"location":"problems/7/#description","title":"Description","text":"<p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range [-2<sup>31</sup>, 2<sup>31</sup> - 1], then return <code>0</code>.</p> <p>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</p> <p>Example 1:</p> <pre><code>Input: x = 123\nOutput: 321\n</code></pre> <p>Example 2:</p> <pre><code>Input: x = -123\nOutput: -321\n</code></pre> <p>Example 3:</p> <pre><code>Input: x = 120\nOutput: 21\n</code></pre> <p>Constraints:</p> <ul> <li>-\\(2^{31}\\) &lt;= x &lt;= 2<sup>31</sup> - 1</li> </ul>","tags":["Math"]},{"location":"problems/7/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Math"]},{"location":"problems/703/","title":"703. Kth Largest Element in a Stream","text":"","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/703/#703-kth-largest-element-in-a-stream","title":"703. Kth Largest Element in a Stream","text":"<p>Easy</p>","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/703/#description","title":"Description","text":"<p>You are part of a university admissions office and need to keep track of the kth highest test score from applicants in real-time. This helps to determine cut-off marks for interviews and admissions dynamically as new applicants submit their scores.</p> <p>You are tasked to implement a class which, for a given integer k, maintains a stream of test scores and continuously returns the kth highest test score after a new score has been submitted. More specifically, we are looking for the kth highest score in the sorted list of all scores.</p> <p>Implement the <code>KthLargest</code> class:</p> <p><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer k and the stream of test scores <code>nums</code>. <code>int add(int val)</code> Adds a new test score val to the stream and returns the element representing the \\(k^{th}\\) largest element in the pool of test scores so far.</p> <p>Example 1:</p> <pre><code>Input:\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n\nOutput: [null, 4, 5, 5, 8, 8]\n\nExplanation:\n\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3); // return 4\nkthLargest.add(5); // return 5\nkthLargest.add(10); // return 5\nkthLargest.add(9); // return 8\nkthLargest.add(4); // return 8\n</code></pre> <p>Example 2:</p> <pre><code>Input:\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\"]\n[[4, [7, 7, 7, 7, 8, 3]], [2], [10], [9], [9]]\n\nOutput: [null, 7, 7, 7, 8]\n\nExplanation:\n\nKthLargest kthLargest = new KthLargest(4, [7, 7, 7, 7, 8, 3]);\nkthLargest.add(2); // return 7\nkthLargest.add(10); // return 7\nkthLargest.add(9); // return 7\nkthLargest.add(9); // return 8\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 104</code></li> <li><code>1 &lt;= k &lt;= nums.length + 1</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>-104 &lt;= val &lt;= 104</code></li> <li><code>At most 104 calls will be made to add.</code></li> </ul>","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/703/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Heap (Priority Queue)","Tree","Design","Binary Search Tree","Binary Tree","Data Stream"]},{"location":"problems/704/","title":"704. Binary Search","text":"","tags":["Array","Binary Search"]},{"location":"problems/704/#704-binary-search","title":"704. Binary Search","text":"<p>Easy</p>","tags":["Array","Binary Search"]},{"location":"problems/704/#description","title":"Description","text":"<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 104</code></li> <li><code>-104 &lt; nums[i], target &lt; 104</code></li> <li><code>All the integers in nums are unique.</code></li> <li><code>nums is sorted in ascending order.</code></li> </ul>","tags":["Array","Binary Search"]},{"location":"problems/704/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search"]},{"location":"problems/705/","title":"705. Design HashSet","text":"","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/705/#705-design-hashset","title":"705. Design HashSet","text":"<p>Easy</p>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/705/#description","title":"Description","text":"<p>Design a HashSet without using any built-in hash table libraries.</p> <p>Implement <code>MyHashSet</code> class:</p> <ul> <li> <p><code>void add(key)</code> Inserts the value <code>key</code> into the HashSet.</p> </li> <li> <p><code>bool contains(key)</code> Returns whether the value <code>key</code> exists in the HashSet or not.</p> </li> <li> <p><code>void remove(key)</code> Removes the value <code>key</code> in the HashSet. If <code>key</code> does not exist in the HashSet, do nothing.</p> </li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\n\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= key, value &lt;= 10\u2076</code></li> <li>At most 10<sup>4</sup> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li> </ul>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/705/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/","title":"706. Design HashMap","text":"","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/#706-design-hashmap","title":"706. Design HashMap","text":"<p>Easy</p>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/#description","title":"Description","text":"<p>Design a HashMap without using any built-in hash table libraries.</p> <p>Implement the <code>MyHashMap</code> class:</p> <ul> <li> <p><code>MyHashMap()</code> initializes the object with an empty map.</p> </li> <li> <p><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the key already exists in the map, update the corresponding <code>value</code>.</p> </li> <li> <p><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</p> </li> <li> <p><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</p> </li> </ul> <p>Example 1:</p> <pre><code>Input\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\nOutput\n[null, null, null, 1, -1, null, 1, null, -1]\n\nExplanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n</code></pre> <p>Constraints:</p> <ul> <li><code>0 &lt;= key, value &lt;= 10\u2076</code></li> <li>At most 10<sup>4</sup> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li> </ul>","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/706/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Hash Table","Linked List","Design","Hash Function"]},{"location":"problems/74/","title":"74. Search a 2D Matrix","text":"","tags":["Array","Binary Search","Matrix"]},{"location":"problems/74/#74-search-a-2d-matrix","title":"74. Search a 2D Matrix","text":"<p>Medium</p>","tags":["Array","Binary Search","Matrix"]},{"location":"problems/74/#description","title":"Description","text":"<p>You are given an m x n integer matrix matrix with the following two properties:</p> <ul> <li>Each row is sorted in non-decreasing order.</li> <li>The first integer of each row is greater than the last integer of the previous row.</li> <li>Given an integer target, return true if target is in matrix or false otherwise.</li> </ul> <p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p> <p>Example 1:</p> <pre><code>Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-104 &lt;= matrix[i][j], target &lt;= 104</code></li> </ul>","tags":["Array","Binary Search","Matrix"]},{"location":"problems/74/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Binary Search","Matrix"]},{"location":"problems/746/","title":"746. Min Cost Climbing Stairs","text":"","tags":["Array","Dynamic Programming"]},{"location":"problems/746/#746-min-cost-climbing-stairs","title":"746. Min Cost Climbing Stairs","text":"<p>Easy</p>","tags":["Array","Dynamic Programming"]},{"location":"problems/746/#description","title":"Description","text":"<p>You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.</p> <p>You can either start from the step with index 0, or the step with index 1.</p> <p>Return the minimum cost to reach the top of the floor.</p> <p>Example 1:</p> <pre><code>Input: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n</code></pre> <p>Example 2:</p> <pre><code>Input: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= cost.length &lt;= 1000</code></li> <li><code>0 &lt;= cost[i] &lt;= 999</code></li> </ul>","tags":["Array","Dynamic Programming"]},{"location":"problems/746/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","Dynamic Programming"]},{"location":"problems/79/","title":"79. Word Search","text":"","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"problems/79/#79-word-search","title":"79. Word Search","text":"<p>Medium</p>","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"problems/79/#description","title":"Description","text":"<p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> if <code>word</code> exists in the grid.</p> <p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p> <p>Example 1:</p> <pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\n</code></pre> <p></p> <p>Example 2:</p> <pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n</code></pre> <p></p> <p>Example 3:</p> <pre><code>Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n</code></pre> <p></p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n = board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 6</code></li> <li><code>1 &lt;= word.length &lt;= 15</code></li> <li><code>board and word consists of only lowercase and uppercase English letters.</code></li> </ul> <p>Follow up: Could you use search pruning to make your solution faster with a larger <code>board</code>?</p>","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"problems/79/#solutions","title":"Solutions \ud83d\udd12","text":"<p> \ud83d\udc4b Already have an account? <p>Please log in to view the solution</p>        Log In      \ud83d\udc4b Don't have an account yet? <p>Access to detailed solutions requires an active subscription account. Get one now \ud83d\ude80</p>        Sign Up      <p></p> <p> \ud83d\udd12 Premium Content <p>This solution requires an active subscription to view.</p>        Upgrade to Pro      <p> Already subscribed? Try refreshing the page. </p> <p></p> Akhil Singh Chauhan                          Creator","tags":["Array","String","Backtracking","Depth-First Search","Matrix"]},{"location":"releases/","title":"Latest Releases, Updates, Solutions","text":"Akhil Singh Chauhan                          Creator"},{"location":"releases/#to-do","title":"To Do","text":"<ul> <li>Annotaion fix, Global abbreviations, links &amp; reference with single page enability and disability</li> <li>Login, Logout &amp; SignUp icons on Mobile &amp; Ipads for their respective butto</li> <li>add google ad sense</li> <li>fix content appearing 3 times sometimes on UI</li> <li>Checkout Page, Success Page ,Figure our Payments</li> <li>Integration of Auth0 and Stripe</li> <li>'Access-Control-Allow-Origin': <code>*</code>, 'Access-Control-Allow-Origin' : <code>https://dsabible.com</code>,</li> </ul>"},{"location":"releases/#june-22-2025","title":"June 22, 2025","text":"<ul> <li>No ads for paid users</li> </ul>"},{"location":"releases/#june-21-2025","title":"June 21, 2025","text":"<ul> <li>Click on site name takes to home page</li> </ul>"},{"location":"releases/#june-20-2025","title":"June 20, 2025","text":"<ul> <li>Added problems 206, 705 , 706, 141</li> </ul>"},{"location":"releases/#june-19-2025","title":"June 19, 2025","text":"<ul> <li>Images are uploaded on github branch and called from there.</li> </ul>"},{"location":"releases/#june-18-2025","title":"June 18, 2025","text":"<ul> <li>Splitted Code into Modular Structure to improve maintainability and code redeability , relaibility</li> <li>Made Annotations to appear after authentication</li> <li>Restored Annotations positions across multiple screens before and after authentication.</li> </ul>"},{"location":"releases/#june-17-2025","title":"June 17, 2025","text":"<ul> <li>Added ability to enable or disable page-wise snippets with global (abbreviations, links &amp; references).</li> <li>Added 125. Valid Palindrome</li> </ul>"},{"location":"releases/#june-16-2025","title":"June 16, 2025","text":"<ul> <li>Legals in custom footer</li> <li>Added Terms of Service, Subscription Agreement.</li> <li>Glightbox for images customizations.</li> </ul>"},{"location":"releases/#june-15-2025","title":"June 15, 2025","text":"<ul> <li>Added Optimization Problem 4. N-Queen</li> <li>added recursion diagram</li> <li>added new definitions</li> <li>custom theme based accent colors</li> </ul>"},{"location":"releases/#june-14-2025","title":"June 14, 2025","text":""},{"location":"releases/#june-13-2025","title":"June 13, 2025","text":"<ul> <li> Login  Logout   and  SignUp buttons with their icons on headers</li> </ul>"},{"location":"releases/#june-12-2025","title":"June 12, 2025","text":"<ul> <li>Added 139. Word Break</li> </ul>"},{"location":"releases/#june-11-2025","title":"June 11, 2025","text":"<ul> <li>Gated Companiy-Wise Problems Section via Authentication &amp; Authorization with js state management and DOM.</li> </ul>"},{"location":"releases/#june-10-2025","title":"June 10, 2025","text":"<ul> <li>Added 50. Pow(x, n)</li> </ul>"},{"location":"releases/#june-9-2025","title":"June 9, 2025","text":"<ul> <li>Found a new way to group/classify other than the tags.</li> </ul>"},{"location":"releases/#june-8-2025","title":"June 8, 2025","text":"<ul> <li>Made PanZoom feature on images and visual diagrams maintaining gated content \ud83e\udd14</li> <li>Prevented gated content leak upon adding of panzoom effect \ud83d\ude07</li> </ul>"},{"location":"releases/#june-7-2025","title":"June 7, 2025","text":"<ul> <li>Added Glossary, Updated Definitions</li> </ul>"},{"location":"releases/#june-6-2025","title":"June 6, 2025","text":"<ul> <li>Mermaid Diagram for 6. Depot Locations Problem</li> <li>Pan Zoom breaking the code</li> </ul>"},{"location":"releases/#june-5-2025","title":"June 5, 2025","text":"<ul> <li>Refactor code-base spilited problems and their solution into separate components.</li> <li>Combining specific solution with its description after authentication only.</li> </ul>"},{"location":"releases/#june-4-2025","title":"June 4, 2025","text":"<ul> <li>Improved UI response time</li> </ul>"},{"location":"releases/#june-3-2025","title":"June 3, 2025","text":"<ul> <li>Companies asked problems categorization by building company-tag-system.</li> </ul>"},{"location":"releases/#june-2-2025","title":"June 2, 2025","text":"<ul> <li>Major Fix Reinitialized Mkdocs components \ud83d\ude05.</li> <li>Fixed issue where protected content was loading multiple times on page refresh \ud83e\udd2f</li> <li>Added debouncing and rendering guards to prevent duplicate content rendering \ud83d\ude0e</li> <li>Improved event listener management for better performance \ud83e\udee3</li> </ul>"},{"location":"releases/#june-1-2025","title":"June 1, 2025","text":"<ul> <li>added Pull to refresh on PWA on branch pwa-with-pull-refresh</li> <li>79. Word Search</li> <li>212. Word Search II</li> <li>Fixed Pricing Page Subscribe buttons event listeners.</li> </ul>"},{"location":"releases/#may-31-2025","title":"May 31, 2025","text":"<ul> <li>login-subscription card</li> <li>gated content based on auth'n , auth'z and subscription levels</li> <li>responsive content on all screens</li> </ul>"},{"location":"releases/#may-30-2025","title":"May 30, 2025","text":"<ul> <li>established communication between client-side, service-workers, auth-system and payment-system to work in sync.</li> </ul>"},{"location":"releases/#may-29-2025","title":"May 29, 2025","text":"<ul> <li>authorization system signup screen on click of signup button</li> </ul>"},{"location":"releases/#may-28-2025","title":"May 28, 2025","text":"<ul> <li>resolved CORS on service workers</li> </ul>"},{"location":"releases/#may-27-2025","title":"May 27, 2025","text":"<ul> <li>service workers to support payments</li> <li>deployed service workers</li> </ul>"},{"location":"releases/#may-26-2025","title":"May 26, 2025","text":"<ul> <li>checkout page</li> <li>success page</li> </ul>"},{"location":"releases/#may-25-2025","title":"May 25, 2025","text":"<ul> <li>universal checkout links</li> <li>integrated embedded payment system</li> </ul>"},{"location":"releases/#may-24-2025","title":"May 24, 2025","text":"<ul> <li>configured auth system (auth0) and payment system (stripe) via actions</li> <li>linked user_id to same user_payment_id</li> </ul>"},{"location":"releases/#may-23-2025","title":"May 23, 2025","text":"<ul> <li>updated requirements</li> <li>updated topics</li> <li>fixed index heap tag Heap (Priority-Queue) topic mapping</li> </ul>"},{"location":"releases/#may-22-2025","title":"May 22, 2025","text":"<ul> <li>Privacy Policy page</li> </ul>"},{"location":"releases/#may-21-2025","title":"May 21, 2025","text":"<ul> <li>Global and Local Meta Data</li> <li>Custom Author Data Logic via meta tags</li> </ul>"},{"location":"releases/#may-20-2025","title":"May 20, 2025","text":"<ul> <li>Added Debouncing, Event-Listeners</li> </ul>"},{"location":"releases/#may-19-2025","title":"May 19, 2025","text":"<ul> <li>Fast Loading of Pages</li> <li>Removed Lag on problems pages.</li> </ul>"},{"location":"releases/#may-18-2025","title":"May 18, 2025","text":"<ul> <li>Login SignUp Card to protect content from unauthorized access on all pages</li> </ul>"},{"location":"releases/#may-17-2025","title":"May 17, 2025","text":"<ul> <li>Pricing Card</li> </ul>"},{"location":"releases/#may-16-2025","title":"May 16, 2025","text":"<ul> <li>Connected Auth0 with Stripe in Actions</li> </ul>"},{"location":"releases/#may-15-2025","title":"May 15, 2025","text":"<ul> <li>Hacked multiple ways to customize mkdocs material</li> </ul>"},{"location":"releases/#may-14-2025","title":"May 14, 2025","text":"<ul> <li>Login &amp; SignUp buttons in custom-header for desktops with auth routes functionalities</li> </ul>"},{"location":"releases/#may-13-2025","title":"May 13, 2025","text":"<ul> <li>Authentication , Authorization</li> </ul>"},{"location":"releases/#may-12-2025","title":"May 12, 2025","text":"<ul> <li>Added Comment System</li> <li>74. Search a 2D Matrix</li> <li>240. Search a 2D Matrix II</li> </ul>"},{"location":"releases/#may-11-2025","title":"May 11, 2025","text":"<ul> <li>Added FeedBack System</li> </ul>"},{"location":"releases/#may-10-2025","title":"May 10, 2025","text":"<ul> <li>DSA Bible source code is private, deployment is public on ghpages with custom domain name.</li> </ul>"},{"location":"releases/#may-9-2025","title":"May 9, 2025","text":"<ul> <li>Custom Theme setup</li> <li>non-sticky header</li> <li>TOC Optional</li> <li>path to Topic Navigation Page via topic tags</li> <li>inherit &amp; custom via code (optional) admomitions border-colors</li> </ul>"},{"location":"releases/#may-8-2025","title":"May 8, 2025","text":"<ul> <li>Clean, Better solution to fetch all tags on index page using built-in tags (without macros).</li> <li>Clicking on a tag Array take user to respective tag on topics page.</li> <li>Problem Categories</li> </ul>"},{"location":"releases/#may-7-2025","title":"May 7, 2025","text":"<ul> <li>One solution to fetch all tags on index page via macros using url path</li> </ul>"},{"location":"releases/#may-6-2025","title":"May 6, 2025","text":"<ul> <li>Added new feature grouping pages based on TAGS Topics page</li> </ul>"},{"location":"releases/#may-5-2025","title":"May 5, 2025","text":"<ul> <li>3. Composing flight crews</li> </ul>"},{"location":"releases/#may-4-2025","title":"May 4, 2025","text":"<ul> <li>Added Mermaid, GraphViz extensions to support graphs,diagrams for</li> </ul>"},{"location":"releases/#may-2-3-2025","title":"May 2 - 3, 2025","text":"<ul> <li>374. Guess Number Higher or Lower</li> <li>19. Remove Nth Node From End of List</li> </ul>"},{"location":"releases/#may-1-2025","title":"May 1, 2025","text":"<ul> <li>Added Optimization problems with working online IDE</li> <li>1. Mixed Integer Programming</li> </ul>"},{"location":"releases/#apr-14-30-2025","title":"Apr 14 - 30, 2025","text":"<ul> <li>Worked on building a compiler/interpreter/online ide.</li> </ul>"},{"location":"releases/#apr-13-2025","title":"Apr 13, 2025","text":"<ul> <li>App with offline capabilities</li> </ul>"},{"location":"releases/#apr-12-2025","title":"Apr 12, 2025","text":"<ul> <li>Web App is now PWA</li> <li>Significant improvement on focus, redeability</li> </ul>"},{"location":"releases/#apr-11-2025","title":"Apr 11, 2025","text":"<ul> <li>Added CI/CD for auto deployment</li> </ul>"},{"location":"releases/#apr-10-2025","title":"Apr 10, 2025","text":"<ul> <li>746. Min Cost Climbing Stairs</li> </ul>"},{"location":"releases/#apr-9-2025","title":"Apr 9, 2025","text":"<ul> <li>Custom CSS for application</li> </ul>"},{"location":"releases/#apr-8-2025","title":"Apr 8, 2025","text":"<ul> <li>135. Candy</li> </ul>"},{"location":"releases/#apr-5-2025","title":"Apr 5, 2025","text":"<ul> <li>2226. Maximum Candies Allocated to K Children</li> </ul>"},{"location":"releases/#apr-4-2025","title":"Apr 4, 2025","text":"<ul> <li>1. Two Sum</li> <li>2. Add Two Number</li> </ul>"}]}